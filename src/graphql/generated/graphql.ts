import { GraphQLClient } from 'graphql-request';
import * as Dom from 'graphql-request/dist/types.dom';
import gql from 'graphql-tag';
export type Maybe<T> = T | null;
export type InputMaybe<T> = Maybe<T>;
export type Exact<T extends { [key: string]: unknown }> = { [K in keyof T]: T[K] };
export type MakeOptional<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]?: Maybe<T[SubKey]> };
export type MakeMaybe<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]: Maybe<T[SubKey]> };
/** All built-in and custom scalars, mapped to their actual values */
export type Scalars = {
  ID: string;
  String: string;
  Boolean: boolean;
  Int: number;
  Float: number;
  Date: any;
  DateTime: any;
  Hex: any;
  Json: any;
  Long: any;
  RGBAHue: any;
  RGBATransparency: any;
  RichTextAST: any;
};

export type Accordion = Entity & {
  __typename?: 'Accordion';
  contentDescription?: Maybe<RichText>;
  contentHeader?: Maybe<RichText>;
  contentImage?: Maybe<Asset>;
  /** The unique identifier */
  id: Scalars['ID'];
  /** System stage field */
  stage: Stage;
  videoBox?: Maybe<VideoBox>;
};


export type AccordionContentImageArgs = {
  forceParentLocale?: InputMaybe<Scalars['Boolean']>;
  locales?: InputMaybe<Array<Locale>>;
};


export type AccordionVideoBoxArgs = {
  forceParentLocale?: InputMaybe<Scalars['Boolean']>;
  locales?: InputMaybe<Array<Locale>>;
};

export type AccordionConnectInput = {
  /** Allow to specify document position in list of connected documents, will default to appending at end of list */
  position?: InputMaybe<ConnectPositionInput>;
  /** Document to connect */
  where: AccordionWhereUniqueInput;
};

/** A connection to a list of items. */
export type AccordionConnection = {
  __typename?: 'AccordionConnection';
  aggregate: Aggregate;
  /** A list of edges. */
  edges: Array<AccordionEdge>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
};

export type AccordionCreateInput = {
  contentDescription?: InputMaybe<Scalars['RichTextAST']>;
  contentHeader?: InputMaybe<Scalars['RichTextAST']>;
  contentImage?: InputMaybe<AssetCreateOneInlineInput>;
  videoBox?: InputMaybe<VideoBoxCreateOneInlineInput>;
};

export type AccordionCreateManyInlineInput = {
  /** Create and connect multiple existing Accordion documents */
  create?: InputMaybe<Array<AccordionCreateInput>>;
};

export type AccordionCreateOneInlineInput = {
  /** Create and connect one Accordion document */
  create?: InputMaybe<AccordionCreateInput>;
};

export type AccordionCreateWithPositionInput = {
  /** Document to create */
  data: AccordionCreateInput;
  /** Position in the list of existing component instances, will default to appending at the end of list */
  position?: InputMaybe<ConnectPositionInput>;
};

/** An edge in a connection. */
export type AccordionEdge = {
  __typename?: 'AccordionEdge';
  /** A cursor for use in pagination. */
  cursor: Scalars['String'];
  /** The item at the end of the edge. */
  node: Accordion;
};

/** Identifies documents */
export type AccordionManyWhereInput = {
  /** Logical AND on all given filters. */
  AND?: InputMaybe<Array<AccordionWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: InputMaybe<Array<AccordionWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: InputMaybe<Array<AccordionWhereInput>>;
  /** Contains search across all appropriate fields. */
  _search?: InputMaybe<Scalars['String']>;
  contentImage?: InputMaybe<AssetWhereInput>;
  id?: InputMaybe<Scalars['ID']>;
  /** All values containing the given string. */
  id_contains?: InputMaybe<Scalars['ID']>;
  /** All values ending with the given string. */
  id_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are contained in given list. */
  id_in?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** Any other value that exists and is not equal to the given value. */
  id_not?: InputMaybe<Scalars['ID']>;
  /** All values not containing the given string. */
  id_not_contains?: InputMaybe<Scalars['ID']>;
  /** All values not ending with the given string */
  id_not_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are not contained in given list. */
  id_not_in?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** All values not starting with the given string. */
  id_not_starts_with?: InputMaybe<Scalars['ID']>;
  /** All values starting with the given string. */
  id_starts_with?: InputMaybe<Scalars['ID']>;
  videoBox?: InputMaybe<VideoBoxWhereInput>;
};

export enum AccordionOrderByInput {
  IdAsc = 'id_ASC',
  IdDesc = 'id_DESC'
}

export type AccordionParent = LayoutBlockColumn;

export type AccordionParentConnectInput = {
  LayoutBlockColumn?: InputMaybe<LayoutBlockColumnConnectInput>;
};

export type AccordionParentCreateInput = {
  LayoutBlockColumn?: InputMaybe<LayoutBlockColumnCreateInput>;
};

export type AccordionParentCreateManyInlineInput = {
  /** Create and connect multiple existing AccordionParent documents */
  create?: InputMaybe<Array<AccordionParentCreateInput>>;
};

export type AccordionParentCreateOneInlineInput = {
  /** Create and connect one AccordionParent document */
  create?: InputMaybe<AccordionParentCreateInput>;
};

export type AccordionParentCreateWithPositionInput = {
  LayoutBlockColumn?: InputMaybe<LayoutBlockColumnCreateWithPositionInput>;
};

export type AccordionParentUpdateInput = {
  LayoutBlockColumn?: InputMaybe<LayoutBlockColumnUpdateInput>;
};

export type AccordionParentUpdateManyInlineInput = {
  /** Create and connect multiple AccordionParent component instances */
  create?: InputMaybe<Array<AccordionParentCreateWithPositionInput>>;
  /** Delete multiple AccordionParent documents */
  delete?: InputMaybe<Array<AccordionParentWhereUniqueInput>>;
  /** Update multiple AccordionParent component instances */
  update?: InputMaybe<Array<AccordionParentUpdateWithNestedWhereUniqueAndPositionInput>>;
  /** Upsert multiple AccordionParent component instances */
  upsert?: InputMaybe<Array<AccordionParentUpsertWithNestedWhereUniqueAndPositionInput>>;
};

export type AccordionParentUpdateManyWithNestedWhereInput = {
  LayoutBlockColumn?: InputMaybe<LayoutBlockColumnUpdateManyWithNestedWhereInput>;
};

export type AccordionParentUpdateOneInlineInput = {
  /** Create and connect one AccordionParent document */
  create?: InputMaybe<AccordionParentCreateInput>;
  /** Delete currently connected AccordionParent document */
  delete?: InputMaybe<Scalars['Boolean']>;
  /** Update single AccordionParent document */
  update?: InputMaybe<AccordionParentUpdateWithNestedWhereUniqueInput>;
  /** Upsert single AccordionParent document */
  upsert?: InputMaybe<AccordionParentUpsertWithNestedWhereUniqueInput>;
};

export type AccordionParentUpdateWithNestedWhereUniqueAndPositionInput = {
  LayoutBlockColumn?: InputMaybe<LayoutBlockColumnUpdateWithNestedWhereUniqueAndPositionInput>;
};

export type AccordionParentUpdateWithNestedWhereUniqueInput = {
  LayoutBlockColumn?: InputMaybe<LayoutBlockColumnUpdateWithNestedWhereUniqueInput>;
};

export type AccordionParentUpsertWithNestedWhereUniqueAndPositionInput = {
  LayoutBlockColumn?: InputMaybe<LayoutBlockColumnUpsertWithNestedWhereUniqueAndPositionInput>;
};

export type AccordionParentUpsertWithNestedWhereUniqueInput = {
  LayoutBlockColumn?: InputMaybe<LayoutBlockColumnUpsertWithNestedWhereUniqueInput>;
};

export type AccordionParentWhereInput = {
  LayoutBlockColumn?: InputMaybe<LayoutBlockColumnWhereInput>;
};

export type AccordionParentWhereUniqueInput = {
  LayoutBlockColumn?: InputMaybe<LayoutBlockColumnWhereUniqueInput>;
};

export type AccordionUpdateInput = {
  contentDescription?: InputMaybe<Scalars['RichTextAST']>;
  contentHeader?: InputMaybe<Scalars['RichTextAST']>;
  contentImage?: InputMaybe<AssetUpdateOneInlineInput>;
  videoBox?: InputMaybe<VideoBoxUpdateOneInlineInput>;
};

export type AccordionUpdateManyInlineInput = {
  /** Create and connect multiple Accordion component instances */
  create?: InputMaybe<Array<AccordionCreateWithPositionInput>>;
  /** Delete multiple Accordion documents */
  delete?: InputMaybe<Array<AccordionWhereUniqueInput>>;
  /** Update multiple Accordion component instances */
  update?: InputMaybe<Array<AccordionUpdateWithNestedWhereUniqueAndPositionInput>>;
  /** Upsert multiple Accordion component instances */
  upsert?: InputMaybe<Array<AccordionUpsertWithNestedWhereUniqueAndPositionInput>>;
};

export type AccordionUpdateManyInput = {
  contentDescription?: InputMaybe<Scalars['RichTextAST']>;
  contentHeader?: InputMaybe<Scalars['RichTextAST']>;
};

export type AccordionUpdateManyWithNestedWhereInput = {
  /** Update many input */
  data: AccordionUpdateManyInput;
  /** Document search */
  where: AccordionWhereInput;
};

export type AccordionUpdateOneInlineInput = {
  /** Create and connect one Accordion document */
  create?: InputMaybe<AccordionCreateInput>;
  /** Delete currently connected Accordion document */
  delete?: InputMaybe<Scalars['Boolean']>;
  /** Update single Accordion document */
  update?: InputMaybe<AccordionUpdateWithNestedWhereUniqueInput>;
  /** Upsert single Accordion document */
  upsert?: InputMaybe<AccordionUpsertWithNestedWhereUniqueInput>;
};

export type AccordionUpdateWithNestedWhereUniqueAndPositionInput = {
  /** Document to update */
  data?: InputMaybe<AccordionUpdateInput>;
  /** Position in the list of existing component instances, will default to appending at the end of list */
  position?: InputMaybe<ConnectPositionInput>;
  /** Unique component instance search */
  where: AccordionWhereUniqueInput;
};

export type AccordionUpdateWithNestedWhereUniqueInput = {
  /** Document to update */
  data: AccordionUpdateInput;
  /** Unique document search */
  where: AccordionWhereUniqueInput;
};

export type AccordionUpsertInput = {
  /** Create document if it didn't exist */
  create: AccordionCreateInput;
  /** Update document if it exists */
  update: AccordionUpdateInput;
};

export type AccordionUpsertWithNestedWhereUniqueAndPositionInput = {
  /** Document to upsert */
  data?: InputMaybe<AccordionUpsertInput>;
  /** Position in the list of existing component instances, will default to appending at the end of list */
  position?: InputMaybe<ConnectPositionInput>;
  /** Unique component instance search */
  where: AccordionWhereUniqueInput;
};

export type AccordionUpsertWithNestedWhereUniqueInput = {
  /** Upsert data */
  data: AccordionUpsertInput;
  /** Unique document search */
  where: AccordionWhereUniqueInput;
};

/** Identifies documents */
export type AccordionWhereInput = {
  /** Logical AND on all given filters. */
  AND?: InputMaybe<Array<AccordionWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: InputMaybe<Array<AccordionWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: InputMaybe<Array<AccordionWhereInput>>;
  /** Contains search across all appropriate fields. */
  _search?: InputMaybe<Scalars['String']>;
  contentImage?: InputMaybe<AssetWhereInput>;
  id?: InputMaybe<Scalars['ID']>;
  /** All values containing the given string. */
  id_contains?: InputMaybe<Scalars['ID']>;
  /** All values ending with the given string. */
  id_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are contained in given list. */
  id_in?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** Any other value that exists and is not equal to the given value. */
  id_not?: InputMaybe<Scalars['ID']>;
  /** All values not containing the given string. */
  id_not_contains?: InputMaybe<Scalars['ID']>;
  /** All values not ending with the given string */
  id_not_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are not contained in given list. */
  id_not_in?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** All values not starting with the given string. */
  id_not_starts_with?: InputMaybe<Scalars['ID']>;
  /** All values starting with the given string. */
  id_starts_with?: InputMaybe<Scalars['ID']>;
  videoBox?: InputMaybe<VideoBoxWhereInput>;
};

/** References Accordion record uniquely */
export type AccordionWhereUniqueInput = {
  id?: InputMaybe<Scalars['ID']>;
};

export type Aggregate = {
  __typename?: 'Aggregate';
  count: Scalars['Int'];
};

export type Album = Entity & Node & {
  __typename?: 'Album';
  albumBuyLink?: Maybe<Scalars['String']>;
  albumCover?: Maybe<Asset>;
  albumJsonData?: Maybe<Scalars['Json']>;
  albumSlug?: Maybe<Scalars['String']>;
  /** The time the document was created */
  createdAt: Scalars['DateTime'];
  /** User that created this document */
  createdBy?: Maybe<User>;
  description?: Maybe<RichText>;
  /** Get the document in other stages */
  documentInStages: Array<Album>;
  featureHomePage?: Maybe<Scalars['Boolean']>;
  /** List of Album versions */
  history: Array<Version>;
  iFramePlayer?: Maybe<Scalars['String']>;
  /** The unique identifier */
  id: Scalars['ID'];
  /** The time the document was published. Null on documents in draft stage. */
  publishedAt?: Maybe<Scalars['DateTime']>;
  /** User that last published this document */
  publishedBy?: Maybe<User>;
  releaseDate?: Maybe<Scalars['Date']>;
  releaseType?: Maybe<ReleaseType>;
  scheduledIn: Array<ScheduledOperation>;
  /** System stage field */
  stage: Stage;
  title?: Maybe<Scalars['String']>;
  /** The time the document was updated */
  updatedAt: Scalars['DateTime'];
  /** User that last updated this document */
  updatedBy?: Maybe<User>;
  videoBox: Array<VideoBox>;
};


export type AlbumAlbumCoverArgs = {
  forceParentLocale?: InputMaybe<Scalars['Boolean']>;
  locales?: InputMaybe<Array<Locale>>;
};


export type AlbumCreatedByArgs = {
  forceParentLocale?: InputMaybe<Scalars['Boolean']>;
  locales?: InputMaybe<Array<Locale>>;
};


export type AlbumDocumentInStagesArgs = {
  includeCurrent?: Scalars['Boolean'];
  inheritLocale?: Scalars['Boolean'];
  stages?: Array<Stage>;
};


export type AlbumHistoryArgs = {
  limit?: Scalars['Int'];
  skip?: Scalars['Int'];
  stageOverride?: InputMaybe<Stage>;
};


export type AlbumPublishedByArgs = {
  forceParentLocale?: InputMaybe<Scalars['Boolean']>;
  locales?: InputMaybe<Array<Locale>>;
};


export type AlbumScheduledInArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  forceParentLocale?: InputMaybe<Scalars['Boolean']>;
  last?: InputMaybe<Scalars['Int']>;
  locales?: InputMaybe<Array<Locale>>;
  skip?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<ScheduledOperationWhereInput>;
};


export type AlbumUpdatedByArgs = {
  forceParentLocale?: InputMaybe<Scalars['Boolean']>;
  locales?: InputMaybe<Array<Locale>>;
};


export type AlbumVideoBoxArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  forceParentLocale?: InputMaybe<Scalars['Boolean']>;
  last?: InputMaybe<Scalars['Int']>;
  locales?: InputMaybe<Array<Locale>>;
  orderBy?: InputMaybe<VideoBoxOrderByInput>;
  skip?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<VideoBoxWhereInput>;
};

export type AlbumConnectInput = {
  /** Allow to specify document position in list of connected documents, will default to appending at end of list */
  position?: InputMaybe<ConnectPositionInput>;
  /** Document to connect */
  where: AlbumWhereUniqueInput;
};

/** A connection to a list of items. */
export type AlbumConnection = {
  __typename?: 'AlbumConnection';
  aggregate: Aggregate;
  /** A list of edges. */
  edges: Array<AlbumEdge>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
};

export type AlbumCreateInput = {
  albumBuyLink?: InputMaybe<Scalars['String']>;
  albumCover?: InputMaybe<AssetCreateOneInlineInput>;
  albumJsonData?: InputMaybe<Scalars['Json']>;
  albumSlug?: InputMaybe<Scalars['String']>;
  createdAt?: InputMaybe<Scalars['DateTime']>;
  description?: InputMaybe<Scalars['RichTextAST']>;
  featureHomePage?: InputMaybe<Scalars['Boolean']>;
  iFramePlayer?: InputMaybe<Scalars['String']>;
  releaseDate?: InputMaybe<Scalars['Date']>;
  releaseType?: InputMaybe<ReleaseType>;
  title?: InputMaybe<Scalars['String']>;
  updatedAt?: InputMaybe<Scalars['DateTime']>;
  videoBox?: InputMaybe<VideoBoxCreateManyInlineInput>;
};

export type AlbumCreateManyInlineInput = {
  /** Connect multiple existing Album documents */
  connect?: InputMaybe<Array<AlbumWhereUniqueInput>>;
  /** Create and connect multiple existing Album documents */
  create?: InputMaybe<Array<AlbumCreateInput>>;
};

export type AlbumCreateOneInlineInput = {
  /** Connect one existing Album document */
  connect?: InputMaybe<AlbumWhereUniqueInput>;
  /** Create and connect one Album document */
  create?: InputMaybe<AlbumCreateInput>;
};

/** An edge in a connection. */
export type AlbumEdge = {
  __typename?: 'AlbumEdge';
  /** A cursor for use in pagination. */
  cursor: Scalars['String'];
  /** The item at the end of the edge. */
  node: Album;
};

/** Identifies documents */
export type AlbumManyWhereInput = {
  /** Logical AND on all given filters. */
  AND?: InputMaybe<Array<AlbumWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: InputMaybe<Array<AlbumWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: InputMaybe<Array<AlbumWhereInput>>;
  /** Contains search across all appropriate fields. */
  _search?: InputMaybe<Scalars['String']>;
  albumBuyLink?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  albumBuyLink_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  albumBuyLink_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  albumBuyLink_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Any other value that exists and is not equal to the given value. */
  albumBuyLink_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  albumBuyLink_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  albumBuyLink_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  albumBuyLink_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  albumBuyLink_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  albumBuyLink_starts_with?: InputMaybe<Scalars['String']>;
  albumCover?: InputMaybe<AssetWhereInput>;
  /** All values containing the given json path. */
  albumJsonData_json_path_exists?: InputMaybe<Scalars['String']>;
  /**
   * Recursively tries to find the provided JSON scalar value inside the field.
   * It does use an exact match when comparing values.
   * If you pass `null` as value the filter will be ignored.
   * Note: This filter fails if you try to look for a non scalar JSON value!
   */
  albumJsonData_value_recursive?: InputMaybe<Scalars['Json']>;
  albumSlug?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  albumSlug_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  albumSlug_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  albumSlug_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Any other value that exists and is not equal to the given value. */
  albumSlug_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  albumSlug_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  albumSlug_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  albumSlug_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  albumSlug_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  albumSlug_starts_with?: InputMaybe<Scalars['String']>;
  createdAt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  createdAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  createdAt_gte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  createdAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  /** All values less than the given value. */
  createdAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  createdAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** Any other value that exists and is not equal to the given value. */
  createdAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not contained in given list. */
  createdAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  createdBy?: InputMaybe<UserWhereInput>;
  documentInStages_every?: InputMaybe<AlbumWhereStageInput>;
  documentInStages_none?: InputMaybe<AlbumWhereStageInput>;
  documentInStages_some?: InputMaybe<AlbumWhereStageInput>;
  featureHomePage?: InputMaybe<Scalars['Boolean']>;
  /** Any other value that exists and is not equal to the given value. */
  featureHomePage_not?: InputMaybe<Scalars['Boolean']>;
  iFramePlayer?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  iFramePlayer_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  iFramePlayer_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  iFramePlayer_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Any other value that exists and is not equal to the given value. */
  iFramePlayer_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  iFramePlayer_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  iFramePlayer_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  iFramePlayer_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  iFramePlayer_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  iFramePlayer_starts_with?: InputMaybe<Scalars['String']>;
  id?: InputMaybe<Scalars['ID']>;
  /** All values containing the given string. */
  id_contains?: InputMaybe<Scalars['ID']>;
  /** All values ending with the given string. */
  id_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are contained in given list. */
  id_in?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** Any other value that exists and is not equal to the given value. */
  id_not?: InputMaybe<Scalars['ID']>;
  /** All values not containing the given string. */
  id_not_contains?: InputMaybe<Scalars['ID']>;
  /** All values not ending with the given string */
  id_not_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are not contained in given list. */
  id_not_in?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** All values not starting with the given string. */
  id_not_starts_with?: InputMaybe<Scalars['ID']>;
  /** All values starting with the given string. */
  id_starts_with?: InputMaybe<Scalars['ID']>;
  publishedAt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  publishedAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  publishedAt_gte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  publishedAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  /** All values less than the given value. */
  publishedAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  publishedAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** Any other value that exists and is not equal to the given value. */
  publishedAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not contained in given list. */
  publishedAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  publishedBy?: InputMaybe<UserWhereInput>;
  releaseDate?: InputMaybe<Scalars['Date']>;
  /** All values greater than the given value. */
  releaseDate_gt?: InputMaybe<Scalars['Date']>;
  /** All values greater than or equal the given value. */
  releaseDate_gte?: InputMaybe<Scalars['Date']>;
  /** All values that are contained in given list. */
  releaseDate_in?: InputMaybe<Array<InputMaybe<Scalars['Date']>>>;
  /** All values less than the given value. */
  releaseDate_lt?: InputMaybe<Scalars['Date']>;
  /** All values less than or equal the given value. */
  releaseDate_lte?: InputMaybe<Scalars['Date']>;
  /** Any other value that exists and is not equal to the given value. */
  releaseDate_not?: InputMaybe<Scalars['Date']>;
  /** All values that are not contained in given list. */
  releaseDate_not_in?: InputMaybe<Array<InputMaybe<Scalars['Date']>>>;
  releaseType?: InputMaybe<ReleaseType>;
  /** All values that are contained in given list. */
  releaseType_in?: InputMaybe<Array<InputMaybe<ReleaseType>>>;
  /** Any other value that exists and is not equal to the given value. */
  releaseType_not?: InputMaybe<ReleaseType>;
  /** All values that are not contained in given list. */
  releaseType_not_in?: InputMaybe<Array<InputMaybe<ReleaseType>>>;
  scheduledIn_every?: InputMaybe<ScheduledOperationWhereInput>;
  scheduledIn_none?: InputMaybe<ScheduledOperationWhereInput>;
  scheduledIn_some?: InputMaybe<ScheduledOperationWhereInput>;
  title?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  title_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  title_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  title_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Any other value that exists and is not equal to the given value. */
  title_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  title_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  title_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  title_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  title_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  title_starts_with?: InputMaybe<Scalars['String']>;
  updatedAt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  updatedAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  updatedAt_gte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  updatedAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  /** All values less than the given value. */
  updatedAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  updatedAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** Any other value that exists and is not equal to the given value. */
  updatedAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not contained in given list. */
  updatedAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  updatedBy?: InputMaybe<UserWhereInput>;
  videoBox_every?: InputMaybe<VideoBoxWhereInput>;
  videoBox_none?: InputMaybe<VideoBoxWhereInput>;
  videoBox_some?: InputMaybe<VideoBoxWhereInput>;
};

export enum AlbumOrderByInput {
  AlbumBuyLinkAsc = 'albumBuyLink_ASC',
  AlbumBuyLinkDesc = 'albumBuyLink_DESC',
  AlbumSlugAsc = 'albumSlug_ASC',
  AlbumSlugDesc = 'albumSlug_DESC',
  CreatedAtAsc = 'createdAt_ASC',
  CreatedAtDesc = 'createdAt_DESC',
  FeatureHomePageAsc = 'featureHomePage_ASC',
  FeatureHomePageDesc = 'featureHomePage_DESC',
  IFramePlayerAsc = 'iFramePlayer_ASC',
  IFramePlayerDesc = 'iFramePlayer_DESC',
  IdAsc = 'id_ASC',
  IdDesc = 'id_DESC',
  PublishedAtAsc = 'publishedAt_ASC',
  PublishedAtDesc = 'publishedAt_DESC',
  ReleaseDateAsc = 'releaseDate_ASC',
  ReleaseDateDesc = 'releaseDate_DESC',
  ReleaseTypeAsc = 'releaseType_ASC',
  ReleaseTypeDesc = 'releaseType_DESC',
  TitleAsc = 'title_ASC',
  TitleDesc = 'title_DESC',
  UpdatedAtAsc = 'updatedAt_ASC',
  UpdatedAtDesc = 'updatedAt_DESC'
}

export enum AlbumQueryDisplay {
  All = 'all',
  Cd = 'cd',
  Compact = 'compact',
  Featured = 'featured',
  Record = 'record',
  Skew = 'skew',
  Slider = 'slider',
  Stacked = 'stacked'
}

export type AlbumUpdateInput = {
  albumBuyLink?: InputMaybe<Scalars['String']>;
  albumCover?: InputMaybe<AssetUpdateOneInlineInput>;
  albumJsonData?: InputMaybe<Scalars['Json']>;
  albumSlug?: InputMaybe<Scalars['String']>;
  description?: InputMaybe<Scalars['RichTextAST']>;
  featureHomePage?: InputMaybe<Scalars['Boolean']>;
  iFramePlayer?: InputMaybe<Scalars['String']>;
  releaseDate?: InputMaybe<Scalars['Date']>;
  releaseType?: InputMaybe<ReleaseType>;
  title?: InputMaybe<Scalars['String']>;
  videoBox?: InputMaybe<VideoBoxUpdateManyInlineInput>;
};

export type AlbumUpdateManyInlineInput = {
  /** Connect multiple existing Album documents */
  connect?: InputMaybe<Array<AlbumConnectInput>>;
  /** Create and connect multiple Album documents */
  create?: InputMaybe<Array<AlbumCreateInput>>;
  /** Delete multiple Album documents */
  delete?: InputMaybe<Array<AlbumWhereUniqueInput>>;
  /** Disconnect multiple Album documents */
  disconnect?: InputMaybe<Array<AlbumWhereUniqueInput>>;
  /** Override currently-connected documents with multiple existing Album documents */
  set?: InputMaybe<Array<AlbumWhereUniqueInput>>;
  /** Update multiple Album documents */
  update?: InputMaybe<Array<AlbumUpdateWithNestedWhereUniqueInput>>;
  /** Upsert multiple Album documents */
  upsert?: InputMaybe<Array<AlbumUpsertWithNestedWhereUniqueInput>>;
};

export type AlbumUpdateManyInput = {
  albumBuyLink?: InputMaybe<Scalars['String']>;
  albumJsonData?: InputMaybe<Scalars['Json']>;
  description?: InputMaybe<Scalars['RichTextAST']>;
  featureHomePage?: InputMaybe<Scalars['Boolean']>;
  iFramePlayer?: InputMaybe<Scalars['String']>;
  releaseDate?: InputMaybe<Scalars['Date']>;
  releaseType?: InputMaybe<ReleaseType>;
  title?: InputMaybe<Scalars['String']>;
};

export type AlbumUpdateManyWithNestedWhereInput = {
  /** Update many input */
  data: AlbumUpdateManyInput;
  /** Document search */
  where: AlbumWhereInput;
};

export type AlbumUpdateOneInlineInput = {
  /** Connect existing Album document */
  connect?: InputMaybe<AlbumWhereUniqueInput>;
  /** Create and connect one Album document */
  create?: InputMaybe<AlbumCreateInput>;
  /** Delete currently connected Album document */
  delete?: InputMaybe<Scalars['Boolean']>;
  /** Disconnect currently connected Album document */
  disconnect?: InputMaybe<Scalars['Boolean']>;
  /** Update single Album document */
  update?: InputMaybe<AlbumUpdateWithNestedWhereUniqueInput>;
  /** Upsert single Album document */
  upsert?: InputMaybe<AlbumUpsertWithNestedWhereUniqueInput>;
};

export type AlbumUpdateWithNestedWhereUniqueInput = {
  /** Document to update */
  data: AlbumUpdateInput;
  /** Unique document search */
  where: AlbumWhereUniqueInput;
};

export type AlbumUpsertInput = {
  /** Create document if it didn't exist */
  create: AlbumCreateInput;
  /** Update document if it exists */
  update: AlbumUpdateInput;
};

export type AlbumUpsertWithNestedWhereUniqueInput = {
  /** Upsert data */
  data: AlbumUpsertInput;
  /** Unique document search */
  where: AlbumWhereUniqueInput;
};

/** This contains a set of filters that can be used to compare values internally */
export type AlbumWhereComparatorInput = {
  /** This field can be used to request to check if the entry is outdated by internal comparison */
  outdated_to?: InputMaybe<Scalars['Boolean']>;
};

/** Identifies documents */
export type AlbumWhereInput = {
  /** Logical AND on all given filters. */
  AND?: InputMaybe<Array<AlbumWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: InputMaybe<Array<AlbumWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: InputMaybe<Array<AlbumWhereInput>>;
  /** Contains search across all appropriate fields. */
  _search?: InputMaybe<Scalars['String']>;
  albumBuyLink?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  albumBuyLink_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  albumBuyLink_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  albumBuyLink_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Any other value that exists and is not equal to the given value. */
  albumBuyLink_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  albumBuyLink_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  albumBuyLink_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  albumBuyLink_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  albumBuyLink_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  albumBuyLink_starts_with?: InputMaybe<Scalars['String']>;
  albumCover?: InputMaybe<AssetWhereInput>;
  /** All values containing the given json path. */
  albumJsonData_json_path_exists?: InputMaybe<Scalars['String']>;
  /**
   * Recursively tries to find the provided JSON scalar value inside the field.
   * It does use an exact match when comparing values.
   * If you pass `null` as value the filter will be ignored.
   * Note: This filter fails if you try to look for a non scalar JSON value!
   */
  albumJsonData_value_recursive?: InputMaybe<Scalars['Json']>;
  albumSlug?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  albumSlug_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  albumSlug_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  albumSlug_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Any other value that exists and is not equal to the given value. */
  albumSlug_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  albumSlug_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  albumSlug_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  albumSlug_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  albumSlug_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  albumSlug_starts_with?: InputMaybe<Scalars['String']>;
  createdAt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  createdAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  createdAt_gte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  createdAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  /** All values less than the given value. */
  createdAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  createdAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** Any other value that exists and is not equal to the given value. */
  createdAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not contained in given list. */
  createdAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  createdBy?: InputMaybe<UserWhereInput>;
  documentInStages_every?: InputMaybe<AlbumWhereStageInput>;
  documentInStages_none?: InputMaybe<AlbumWhereStageInput>;
  documentInStages_some?: InputMaybe<AlbumWhereStageInput>;
  featureHomePage?: InputMaybe<Scalars['Boolean']>;
  /** Any other value that exists and is not equal to the given value. */
  featureHomePage_not?: InputMaybe<Scalars['Boolean']>;
  iFramePlayer?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  iFramePlayer_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  iFramePlayer_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  iFramePlayer_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Any other value that exists and is not equal to the given value. */
  iFramePlayer_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  iFramePlayer_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  iFramePlayer_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  iFramePlayer_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  iFramePlayer_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  iFramePlayer_starts_with?: InputMaybe<Scalars['String']>;
  id?: InputMaybe<Scalars['ID']>;
  /** All values containing the given string. */
  id_contains?: InputMaybe<Scalars['ID']>;
  /** All values ending with the given string. */
  id_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are contained in given list. */
  id_in?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** Any other value that exists and is not equal to the given value. */
  id_not?: InputMaybe<Scalars['ID']>;
  /** All values not containing the given string. */
  id_not_contains?: InputMaybe<Scalars['ID']>;
  /** All values not ending with the given string */
  id_not_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are not contained in given list. */
  id_not_in?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** All values not starting with the given string. */
  id_not_starts_with?: InputMaybe<Scalars['ID']>;
  /** All values starting with the given string. */
  id_starts_with?: InputMaybe<Scalars['ID']>;
  publishedAt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  publishedAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  publishedAt_gte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  publishedAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  /** All values less than the given value. */
  publishedAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  publishedAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** Any other value that exists and is not equal to the given value. */
  publishedAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not contained in given list. */
  publishedAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  publishedBy?: InputMaybe<UserWhereInput>;
  releaseDate?: InputMaybe<Scalars['Date']>;
  /** All values greater than the given value. */
  releaseDate_gt?: InputMaybe<Scalars['Date']>;
  /** All values greater than or equal the given value. */
  releaseDate_gte?: InputMaybe<Scalars['Date']>;
  /** All values that are contained in given list. */
  releaseDate_in?: InputMaybe<Array<InputMaybe<Scalars['Date']>>>;
  /** All values less than the given value. */
  releaseDate_lt?: InputMaybe<Scalars['Date']>;
  /** All values less than or equal the given value. */
  releaseDate_lte?: InputMaybe<Scalars['Date']>;
  /** Any other value that exists and is not equal to the given value. */
  releaseDate_not?: InputMaybe<Scalars['Date']>;
  /** All values that are not contained in given list. */
  releaseDate_not_in?: InputMaybe<Array<InputMaybe<Scalars['Date']>>>;
  releaseType?: InputMaybe<ReleaseType>;
  /** All values that are contained in given list. */
  releaseType_in?: InputMaybe<Array<InputMaybe<ReleaseType>>>;
  /** Any other value that exists and is not equal to the given value. */
  releaseType_not?: InputMaybe<ReleaseType>;
  /** All values that are not contained in given list. */
  releaseType_not_in?: InputMaybe<Array<InputMaybe<ReleaseType>>>;
  scheduledIn_every?: InputMaybe<ScheduledOperationWhereInput>;
  scheduledIn_none?: InputMaybe<ScheduledOperationWhereInput>;
  scheduledIn_some?: InputMaybe<ScheduledOperationWhereInput>;
  title?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  title_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  title_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  title_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Any other value that exists and is not equal to the given value. */
  title_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  title_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  title_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  title_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  title_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  title_starts_with?: InputMaybe<Scalars['String']>;
  updatedAt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  updatedAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  updatedAt_gte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  updatedAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  /** All values less than the given value. */
  updatedAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  updatedAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** Any other value that exists and is not equal to the given value. */
  updatedAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not contained in given list. */
  updatedAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  updatedBy?: InputMaybe<UserWhereInput>;
  videoBox_every?: InputMaybe<VideoBoxWhereInput>;
  videoBox_none?: InputMaybe<VideoBoxWhereInput>;
  videoBox_some?: InputMaybe<VideoBoxWhereInput>;
};

/** The document in stages filter allows specifying a stage entry to cross compare the same document between different stages */
export type AlbumWhereStageInput = {
  /** Logical AND on all given filters. */
  AND?: InputMaybe<Array<AlbumWhereStageInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: InputMaybe<Array<AlbumWhereStageInput>>;
  /** Logical OR on all given filters. */
  OR?: InputMaybe<Array<AlbumWhereStageInput>>;
  /** This field contains fields which can be set as true or false to specify an internal comparison */
  compareWithParent?: InputMaybe<AlbumWhereComparatorInput>;
  /** Specify the stage to compare with */
  stage?: InputMaybe<Stage>;
};

/** References Album record uniquely */
export type AlbumWhereUniqueInput = {
  albumSlug?: InputMaybe<Scalars['String']>;
  id?: InputMaybe<Scalars['ID']>;
};

/** Asset system model */
export type Asset = Entity & Node & {
  __typename?: 'Asset';
  albumCoverAlbum: Array<Album>;
  audioBlogBlog: Array<Blog>;
  avatarImageProfile: Array<Profile>;
  blogGalleryBlog: Array<Blog>;
  contactAvatarContact: Array<Contact>;
  /** The time the document was created */
  createdAt: Scalars['DateTime'];
  /** User that created this document */
  createdBy?: Maybe<User>;
  /** Get the document in other stages */
  documentInStages: Array<Asset>;
  eventFlyerEvent: Array<Event>;
  eventGalleryEvent: Array<Event>;
  faviconSiteLibrary: Array<SiteLibrary>;
  /** The file name */
  fileName: Scalars['String'];
  galleryProduct: Array<Product>;
  /** The file handle */
  handle: Scalars['String'];
  /** The height of the file */
  height?: Maybe<Scalars['Float']>;
  heroImagePage: Array<Page>;
  heroImageProfile: Array<Profile>;
  /** List of Asset versions */
  history: Array<Version>;
  /** The unique identifier */
  id: Scalars['ID'];
  imageBlog: Array<Blog>;
  imageGalleryProfile: Array<Profile>;
  labelLogoSiteLibrary: Array<SiteLibrary>;
  /** System Locale field */
  locale: Locale;
  /** Get the other localizations for this document */
  localizations: Array<Asset>;
  logoImageLogoTable: Array<LogoTable>;
  logoSiteLibrary: Array<SiteLibrary>;
  memberMusicReleaseProfile: Array<Profile>;
  metaAppleTouchIconSiteLibrary: Array<SiteLibrary>;
  metaOgImageSiteLibrary: Array<SiteLibrary>;
  /** The mime type of the file */
  mimeType?: Maybe<Scalars['String']>;
  navigationLogoNavigation: Array<Navigation>;
  profileLogoProfile: Array<Profile>;
  /** The time the document was published. Null on documents in draft stage. */
  publishedAt?: Maybe<Scalars['DateTime']>;
  /** User that last published this document */
  publishedBy?: Maybe<User>;
  scheduledIn: Array<ScheduledOperation>;
  /** The file size */
  size?: Maybe<Scalars['Float']>;
  /** System stage field */
  stage: Stage;
  testimonialAvatarTestimonial: Array<Testimonial>;
  testimonialLogoTestimonial: Array<Testimonial>;
  /** The time the document was updated */
  updatedAt: Scalars['DateTime'];
  /** User that last updated this document */
  updatedBy?: Maybe<User>;
  /** Get the url for the asset with provided transformations applied. */
  url: Scalars['String'];
  /** The file width */
  width?: Maybe<Scalars['Float']>;
};


/** Asset system model */
export type AssetAlbumCoverAlbumArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  forceParentLocale?: InputMaybe<Scalars['Boolean']>;
  last?: InputMaybe<Scalars['Int']>;
  locales?: InputMaybe<Array<Locale>>;
  orderBy?: InputMaybe<AlbumOrderByInput>;
  skip?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<AlbumWhereInput>;
};


/** Asset system model */
export type AssetAudioBlogBlogArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  forceParentLocale?: InputMaybe<Scalars['Boolean']>;
  last?: InputMaybe<Scalars['Int']>;
  locales?: InputMaybe<Array<Locale>>;
  orderBy?: InputMaybe<BlogOrderByInput>;
  skip?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<BlogWhereInput>;
};


/** Asset system model */
export type AssetAvatarImageProfileArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  forceParentLocale?: InputMaybe<Scalars['Boolean']>;
  last?: InputMaybe<Scalars['Int']>;
  locales?: InputMaybe<Array<Locale>>;
  orderBy?: InputMaybe<ProfileOrderByInput>;
  skip?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<ProfileWhereInput>;
};


/** Asset system model */
export type AssetBlogGalleryBlogArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  forceParentLocale?: InputMaybe<Scalars['Boolean']>;
  last?: InputMaybe<Scalars['Int']>;
  locales?: InputMaybe<Array<Locale>>;
  orderBy?: InputMaybe<BlogOrderByInput>;
  skip?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<BlogWhereInput>;
};


/** Asset system model */
export type AssetContactAvatarContactArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  forceParentLocale?: InputMaybe<Scalars['Boolean']>;
  last?: InputMaybe<Scalars['Int']>;
  locales?: InputMaybe<Array<Locale>>;
  orderBy?: InputMaybe<ContactOrderByInput>;
  skip?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<ContactWhereInput>;
};


/** Asset system model */
export type AssetCreatedAtArgs = {
  variation?: SystemDateTimeFieldVariation;
};


/** Asset system model */
export type AssetCreatedByArgs = {
  forceParentLocale?: InputMaybe<Scalars['Boolean']>;
  locales?: InputMaybe<Array<Locale>>;
};


/** Asset system model */
export type AssetDocumentInStagesArgs = {
  includeCurrent?: Scalars['Boolean'];
  inheritLocale?: Scalars['Boolean'];
  stages?: Array<Stage>;
};


/** Asset system model */
export type AssetEventFlyerEventArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  forceParentLocale?: InputMaybe<Scalars['Boolean']>;
  last?: InputMaybe<Scalars['Int']>;
  locales?: InputMaybe<Array<Locale>>;
  orderBy?: InputMaybe<EventOrderByInput>;
  skip?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<EventWhereInput>;
};


/** Asset system model */
export type AssetEventGalleryEventArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  forceParentLocale?: InputMaybe<Scalars['Boolean']>;
  last?: InputMaybe<Scalars['Int']>;
  locales?: InputMaybe<Array<Locale>>;
  orderBy?: InputMaybe<EventOrderByInput>;
  skip?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<EventWhereInput>;
};


/** Asset system model */
export type AssetFaviconSiteLibraryArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  forceParentLocale?: InputMaybe<Scalars['Boolean']>;
  last?: InputMaybe<Scalars['Int']>;
  locales?: InputMaybe<Array<Locale>>;
  orderBy?: InputMaybe<SiteLibraryOrderByInput>;
  skip?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<SiteLibraryWhereInput>;
};


/** Asset system model */
export type AssetGalleryProductArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  forceParentLocale?: InputMaybe<Scalars['Boolean']>;
  last?: InputMaybe<Scalars['Int']>;
  locales?: InputMaybe<Array<Locale>>;
  orderBy?: InputMaybe<ProductOrderByInput>;
  skip?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<ProductWhereInput>;
};


/** Asset system model */
export type AssetHeroImagePageArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  forceParentLocale?: InputMaybe<Scalars['Boolean']>;
  last?: InputMaybe<Scalars['Int']>;
  locales?: InputMaybe<Array<Locale>>;
  orderBy?: InputMaybe<PageOrderByInput>;
  skip?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<PageWhereInput>;
};


/** Asset system model */
export type AssetHeroImageProfileArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  forceParentLocale?: InputMaybe<Scalars['Boolean']>;
  last?: InputMaybe<Scalars['Int']>;
  locales?: InputMaybe<Array<Locale>>;
  orderBy?: InputMaybe<ProfileOrderByInput>;
  skip?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<ProfileWhereInput>;
};


/** Asset system model */
export type AssetHistoryArgs = {
  limit?: Scalars['Int'];
  skip?: Scalars['Int'];
  stageOverride?: InputMaybe<Stage>;
};


/** Asset system model */
export type AssetImageBlogArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  forceParentLocale?: InputMaybe<Scalars['Boolean']>;
  last?: InputMaybe<Scalars['Int']>;
  locales?: InputMaybe<Array<Locale>>;
  orderBy?: InputMaybe<BlogOrderByInput>;
  skip?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<BlogWhereInput>;
};


/** Asset system model */
export type AssetImageGalleryProfileArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  forceParentLocale?: InputMaybe<Scalars['Boolean']>;
  last?: InputMaybe<Scalars['Int']>;
  locales?: InputMaybe<Array<Locale>>;
  orderBy?: InputMaybe<ProfileOrderByInput>;
  skip?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<ProfileWhereInput>;
};


/** Asset system model */
export type AssetLabelLogoSiteLibraryArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  forceParentLocale?: InputMaybe<Scalars['Boolean']>;
  last?: InputMaybe<Scalars['Int']>;
  locales?: InputMaybe<Array<Locale>>;
  orderBy?: InputMaybe<SiteLibraryOrderByInput>;
  skip?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<SiteLibraryWhereInput>;
};


/** Asset system model */
export type AssetLocalizationsArgs = {
  includeCurrent?: Scalars['Boolean'];
  locales?: Array<Locale>;
};


/** Asset system model */
export type AssetLogoImageLogoTableArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  forceParentLocale?: InputMaybe<Scalars['Boolean']>;
  last?: InputMaybe<Scalars['Int']>;
  locales?: InputMaybe<Array<Locale>>;
  orderBy?: InputMaybe<LogoTableOrderByInput>;
  skip?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<LogoTableWhereInput>;
};


/** Asset system model */
export type AssetLogoSiteLibraryArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  forceParentLocale?: InputMaybe<Scalars['Boolean']>;
  last?: InputMaybe<Scalars['Int']>;
  locales?: InputMaybe<Array<Locale>>;
  orderBy?: InputMaybe<SiteLibraryOrderByInput>;
  skip?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<SiteLibraryWhereInput>;
};


/** Asset system model */
export type AssetMemberMusicReleaseProfileArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  forceParentLocale?: InputMaybe<Scalars['Boolean']>;
  last?: InputMaybe<Scalars['Int']>;
  locales?: InputMaybe<Array<Locale>>;
  orderBy?: InputMaybe<ProfileOrderByInput>;
  skip?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<ProfileWhereInput>;
};


/** Asset system model */
export type AssetMetaAppleTouchIconSiteLibraryArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  forceParentLocale?: InputMaybe<Scalars['Boolean']>;
  last?: InputMaybe<Scalars['Int']>;
  locales?: InputMaybe<Array<Locale>>;
  orderBy?: InputMaybe<SiteLibraryOrderByInput>;
  skip?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<SiteLibraryWhereInput>;
};


/** Asset system model */
export type AssetMetaOgImageSiteLibraryArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  forceParentLocale?: InputMaybe<Scalars['Boolean']>;
  last?: InputMaybe<Scalars['Int']>;
  locales?: InputMaybe<Array<Locale>>;
  orderBy?: InputMaybe<SiteLibraryOrderByInput>;
  skip?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<SiteLibraryWhereInput>;
};


/** Asset system model */
export type AssetNavigationLogoNavigationArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  forceParentLocale?: InputMaybe<Scalars['Boolean']>;
  last?: InputMaybe<Scalars['Int']>;
  locales?: InputMaybe<Array<Locale>>;
  orderBy?: InputMaybe<NavigationOrderByInput>;
  skip?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<NavigationWhereInput>;
};


/** Asset system model */
export type AssetProfileLogoProfileArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  forceParentLocale?: InputMaybe<Scalars['Boolean']>;
  last?: InputMaybe<Scalars['Int']>;
  locales?: InputMaybe<Array<Locale>>;
  orderBy?: InputMaybe<ProfileOrderByInput>;
  skip?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<ProfileWhereInput>;
};


/** Asset system model */
export type AssetPublishedAtArgs = {
  variation?: SystemDateTimeFieldVariation;
};


/** Asset system model */
export type AssetPublishedByArgs = {
  forceParentLocale?: InputMaybe<Scalars['Boolean']>;
  locales?: InputMaybe<Array<Locale>>;
};


/** Asset system model */
export type AssetScheduledInArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  forceParentLocale?: InputMaybe<Scalars['Boolean']>;
  last?: InputMaybe<Scalars['Int']>;
  locales?: InputMaybe<Array<Locale>>;
  skip?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<ScheduledOperationWhereInput>;
};


/** Asset system model */
export type AssetTestimonialAvatarTestimonialArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  forceParentLocale?: InputMaybe<Scalars['Boolean']>;
  last?: InputMaybe<Scalars['Int']>;
  locales?: InputMaybe<Array<Locale>>;
  orderBy?: InputMaybe<TestimonialOrderByInput>;
  skip?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<TestimonialWhereInput>;
};


/** Asset system model */
export type AssetTestimonialLogoTestimonialArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  forceParentLocale?: InputMaybe<Scalars['Boolean']>;
  last?: InputMaybe<Scalars['Int']>;
  locales?: InputMaybe<Array<Locale>>;
  orderBy?: InputMaybe<TestimonialOrderByInput>;
  skip?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<TestimonialWhereInput>;
};


/** Asset system model */
export type AssetUpdatedAtArgs = {
  variation?: SystemDateTimeFieldVariation;
};


/** Asset system model */
export type AssetUpdatedByArgs = {
  forceParentLocale?: InputMaybe<Scalars['Boolean']>;
  locales?: InputMaybe<Array<Locale>>;
};


/** Asset system model */
export type AssetUrlArgs = {
  transformation?: InputMaybe<AssetTransformationInput>;
};

export type AssetConnectInput = {
  /** Allow to specify document position in list of connected documents, will default to appending at end of list */
  position?: InputMaybe<ConnectPositionInput>;
  /** Document to connect */
  where: AssetWhereUniqueInput;
};

/** A connection to a list of items. */
export type AssetConnection = {
  __typename?: 'AssetConnection';
  aggregate: Aggregate;
  /** A list of edges. */
  edges: Array<AssetEdge>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
};

export type AssetCreateInput = {
  albumCoverAlbum?: InputMaybe<AlbumCreateManyInlineInput>;
  audioBlogBlog?: InputMaybe<BlogCreateManyInlineInput>;
  avatarImageProfile?: InputMaybe<ProfileCreateManyInlineInput>;
  backgroundImageLayoutBlock?: InputMaybe<LayoutBlockCreateManyInlineInput>;
  backgroundImageLayoutSectionContent?: InputMaybe<LayoutBlockColumnCreateManyInlineInput>;
  blogGalleryBlog?: InputMaybe<BlogCreateManyInlineInput>;
  boxImageGridBox?: InputMaybe<GridBoxCreateManyInlineInput>;
  contactAvatarContact?: InputMaybe<ContactCreateManyInlineInput>;
  contentImageAccordionContent?: InputMaybe<AccordionCreateManyInlineInput>;
  contentImageTextContent?: InputMaybe<TextContentCreateManyInlineInput>;
  createdAt?: InputMaybe<Scalars['DateTime']>;
  eventFlyerEvent?: InputMaybe<EventCreateManyInlineInput>;
  eventGalleryEvent?: InputMaybe<EventCreateManyInlineInput>;
  faviconSiteLibrary?: InputMaybe<SiteLibraryCreateManyInlineInput>;
  fileName: Scalars['String'];
  footerImageFooterColumn?: InputMaybe<FooterColumnCreateManyInlineInput>;
  galleryElement?: InputMaybe<ElementCreateManyInlineInput>;
  galleryProduct?: InputMaybe<ProductCreateManyInlineInput>;
  handle: Scalars['String'];
  height?: InputMaybe<Scalars['Float']>;
  heroImagePage?: InputMaybe<PageCreateManyInlineInput>;
  heroImageProfile?: InputMaybe<ProfileCreateManyInlineInput>;
  imageBlog?: InputMaybe<BlogCreateManyInlineInput>;
  imageElement?: InputMaybe<ElementCreateManyInlineInput>;
  imageGalleryProfile?: InputMaybe<ProfileCreateManyInlineInput>;
  imageNavigationItem?: InputMaybe<NavigationItemCreateManyInlineInput>;
  labelLogoSiteLibrary?: InputMaybe<SiteLibraryCreateManyInlineInput>;
  /** Inline mutations for managing document localizations excluding the default locale */
  localizations?: InputMaybe<AssetCreateLocalizationsInput>;
  logoImageLogoTable?: InputMaybe<LogoTableCreateManyInlineInput>;
  logoSiteLibrary?: InputMaybe<SiteLibraryCreateManyInlineInput>;
  memberMusicReleaseProfile?: InputMaybe<ProfileCreateManyInlineInput>;
  metaAppleTouchIconSiteLibrary?: InputMaybe<SiteLibraryCreateManyInlineInput>;
  metaOgImageSiteLibrary?: InputMaybe<SiteLibraryCreateManyInlineInput>;
  mimeType?: InputMaybe<Scalars['String']>;
  navigationLogoNavigation?: InputMaybe<NavigationCreateManyInlineInput>;
  parallaxImageElement?: InputMaybe<ElementCreateManyInlineInput>;
  profileLogoProfile?: InputMaybe<ProfileCreateManyInlineInput>;
  size?: InputMaybe<Scalars['Float']>;
  sliderVideoBackgroundHomeVideoSlider?: InputMaybe<HeroMediaSliderCreateManyInlineInput>;
  testimonialAvatarTestimonial?: InputMaybe<TestimonialCreateManyInlineInput>;
  testimonialLogoTestimonial?: InputMaybe<TestimonialCreateManyInlineInput>;
  updatedAt?: InputMaybe<Scalars['DateTime']>;
  width?: InputMaybe<Scalars['Float']>;
};

export type AssetCreateLocalizationDataInput = {
  createdAt?: InputMaybe<Scalars['DateTime']>;
  fileName: Scalars['String'];
  handle: Scalars['String'];
  height?: InputMaybe<Scalars['Float']>;
  mimeType?: InputMaybe<Scalars['String']>;
  size?: InputMaybe<Scalars['Float']>;
  updatedAt?: InputMaybe<Scalars['DateTime']>;
  width?: InputMaybe<Scalars['Float']>;
};

export type AssetCreateLocalizationInput = {
  /** Localization input */
  data: AssetCreateLocalizationDataInput;
  locale: Locale;
};

export type AssetCreateLocalizationsInput = {
  /** Create localizations for the newly-created document */
  create?: InputMaybe<Array<AssetCreateLocalizationInput>>;
};

export type AssetCreateManyInlineInput = {
  /** Connect multiple existing Asset documents */
  connect?: InputMaybe<Array<AssetWhereUniqueInput>>;
  /** Create and connect multiple existing Asset documents */
  create?: InputMaybe<Array<AssetCreateInput>>;
};

export type AssetCreateOneInlineInput = {
  /** Connect one existing Asset document */
  connect?: InputMaybe<AssetWhereUniqueInput>;
  /** Create and connect one Asset document */
  create?: InputMaybe<AssetCreateInput>;
};

/** An edge in a connection. */
export type AssetEdge = {
  __typename?: 'AssetEdge';
  /** A cursor for use in pagination. */
  cursor: Scalars['String'];
  /** The item at the end of the edge. */
  node: Asset;
};

/** Identifies documents */
export type AssetManyWhereInput = {
  /** Logical AND on all given filters. */
  AND?: InputMaybe<Array<AssetWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: InputMaybe<Array<AssetWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: InputMaybe<Array<AssetWhereInput>>;
  /** Contains search across all appropriate fields. */
  _search?: InputMaybe<Scalars['String']>;
  albumCoverAlbum_every?: InputMaybe<AlbumWhereInput>;
  albumCoverAlbum_none?: InputMaybe<AlbumWhereInput>;
  albumCoverAlbum_some?: InputMaybe<AlbumWhereInput>;
  audioBlogBlog_every?: InputMaybe<BlogWhereInput>;
  audioBlogBlog_none?: InputMaybe<BlogWhereInput>;
  audioBlogBlog_some?: InputMaybe<BlogWhereInput>;
  avatarImageProfile_every?: InputMaybe<ProfileWhereInput>;
  avatarImageProfile_none?: InputMaybe<ProfileWhereInput>;
  avatarImageProfile_some?: InputMaybe<ProfileWhereInput>;
  blogGalleryBlog_every?: InputMaybe<BlogWhereInput>;
  blogGalleryBlog_none?: InputMaybe<BlogWhereInput>;
  blogGalleryBlog_some?: InputMaybe<BlogWhereInput>;
  contactAvatarContact_every?: InputMaybe<ContactWhereInput>;
  contactAvatarContact_none?: InputMaybe<ContactWhereInput>;
  contactAvatarContact_some?: InputMaybe<ContactWhereInput>;
  createdAt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  createdAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  createdAt_gte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  createdAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  /** All values less than the given value. */
  createdAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  createdAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** Any other value that exists and is not equal to the given value. */
  createdAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not contained in given list. */
  createdAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  createdBy?: InputMaybe<UserWhereInput>;
  documentInStages_every?: InputMaybe<AssetWhereStageInput>;
  documentInStages_none?: InputMaybe<AssetWhereStageInput>;
  documentInStages_some?: InputMaybe<AssetWhereStageInput>;
  eventFlyerEvent_every?: InputMaybe<EventWhereInput>;
  eventFlyerEvent_none?: InputMaybe<EventWhereInput>;
  eventFlyerEvent_some?: InputMaybe<EventWhereInput>;
  eventGalleryEvent_every?: InputMaybe<EventWhereInput>;
  eventGalleryEvent_none?: InputMaybe<EventWhereInput>;
  eventGalleryEvent_some?: InputMaybe<EventWhereInput>;
  faviconSiteLibrary_every?: InputMaybe<SiteLibraryWhereInput>;
  faviconSiteLibrary_none?: InputMaybe<SiteLibraryWhereInput>;
  faviconSiteLibrary_some?: InputMaybe<SiteLibraryWhereInput>;
  galleryProduct_every?: InputMaybe<ProductWhereInput>;
  galleryProduct_none?: InputMaybe<ProductWhereInput>;
  galleryProduct_some?: InputMaybe<ProductWhereInput>;
  heroImagePage_every?: InputMaybe<PageWhereInput>;
  heroImagePage_none?: InputMaybe<PageWhereInput>;
  heroImagePage_some?: InputMaybe<PageWhereInput>;
  heroImageProfile_every?: InputMaybe<ProfileWhereInput>;
  heroImageProfile_none?: InputMaybe<ProfileWhereInput>;
  heroImageProfile_some?: InputMaybe<ProfileWhereInput>;
  id?: InputMaybe<Scalars['ID']>;
  /** All values containing the given string. */
  id_contains?: InputMaybe<Scalars['ID']>;
  /** All values ending with the given string. */
  id_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are contained in given list. */
  id_in?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** Any other value that exists and is not equal to the given value. */
  id_not?: InputMaybe<Scalars['ID']>;
  /** All values not containing the given string. */
  id_not_contains?: InputMaybe<Scalars['ID']>;
  /** All values not ending with the given string */
  id_not_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are not contained in given list. */
  id_not_in?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** All values not starting with the given string. */
  id_not_starts_with?: InputMaybe<Scalars['ID']>;
  /** All values starting with the given string. */
  id_starts_with?: InputMaybe<Scalars['ID']>;
  imageBlog_every?: InputMaybe<BlogWhereInput>;
  imageBlog_none?: InputMaybe<BlogWhereInput>;
  imageBlog_some?: InputMaybe<BlogWhereInput>;
  imageGalleryProfile_every?: InputMaybe<ProfileWhereInput>;
  imageGalleryProfile_none?: InputMaybe<ProfileWhereInput>;
  imageGalleryProfile_some?: InputMaybe<ProfileWhereInput>;
  labelLogoSiteLibrary_every?: InputMaybe<SiteLibraryWhereInput>;
  labelLogoSiteLibrary_none?: InputMaybe<SiteLibraryWhereInput>;
  labelLogoSiteLibrary_some?: InputMaybe<SiteLibraryWhereInput>;
  logoImageLogoTable_every?: InputMaybe<LogoTableWhereInput>;
  logoImageLogoTable_none?: InputMaybe<LogoTableWhereInput>;
  logoImageLogoTable_some?: InputMaybe<LogoTableWhereInput>;
  logoSiteLibrary_every?: InputMaybe<SiteLibraryWhereInput>;
  logoSiteLibrary_none?: InputMaybe<SiteLibraryWhereInput>;
  logoSiteLibrary_some?: InputMaybe<SiteLibraryWhereInput>;
  memberMusicReleaseProfile_every?: InputMaybe<ProfileWhereInput>;
  memberMusicReleaseProfile_none?: InputMaybe<ProfileWhereInput>;
  memberMusicReleaseProfile_some?: InputMaybe<ProfileWhereInput>;
  metaAppleTouchIconSiteLibrary_every?: InputMaybe<SiteLibraryWhereInput>;
  metaAppleTouchIconSiteLibrary_none?: InputMaybe<SiteLibraryWhereInput>;
  metaAppleTouchIconSiteLibrary_some?: InputMaybe<SiteLibraryWhereInput>;
  metaOgImageSiteLibrary_every?: InputMaybe<SiteLibraryWhereInput>;
  metaOgImageSiteLibrary_none?: InputMaybe<SiteLibraryWhereInput>;
  metaOgImageSiteLibrary_some?: InputMaybe<SiteLibraryWhereInput>;
  navigationLogoNavigation_every?: InputMaybe<NavigationWhereInput>;
  navigationLogoNavigation_none?: InputMaybe<NavigationWhereInput>;
  navigationLogoNavigation_some?: InputMaybe<NavigationWhereInput>;
  profileLogoProfile_every?: InputMaybe<ProfileWhereInput>;
  profileLogoProfile_none?: InputMaybe<ProfileWhereInput>;
  profileLogoProfile_some?: InputMaybe<ProfileWhereInput>;
  publishedAt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  publishedAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  publishedAt_gte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  publishedAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  /** All values less than the given value. */
  publishedAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  publishedAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** Any other value that exists and is not equal to the given value. */
  publishedAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not contained in given list. */
  publishedAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  publishedBy?: InputMaybe<UserWhereInput>;
  scheduledIn_every?: InputMaybe<ScheduledOperationWhereInput>;
  scheduledIn_none?: InputMaybe<ScheduledOperationWhereInput>;
  scheduledIn_some?: InputMaybe<ScheduledOperationWhereInput>;
  testimonialAvatarTestimonial_every?: InputMaybe<TestimonialWhereInput>;
  testimonialAvatarTestimonial_none?: InputMaybe<TestimonialWhereInput>;
  testimonialAvatarTestimonial_some?: InputMaybe<TestimonialWhereInput>;
  testimonialLogoTestimonial_every?: InputMaybe<TestimonialWhereInput>;
  testimonialLogoTestimonial_none?: InputMaybe<TestimonialWhereInput>;
  testimonialLogoTestimonial_some?: InputMaybe<TestimonialWhereInput>;
  updatedAt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  updatedAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  updatedAt_gte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  updatedAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  /** All values less than the given value. */
  updatedAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  updatedAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** Any other value that exists and is not equal to the given value. */
  updatedAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not contained in given list. */
  updatedAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  updatedBy?: InputMaybe<UserWhereInput>;
};

export enum AssetOrderByInput {
  CreatedAtAsc = 'createdAt_ASC',
  CreatedAtDesc = 'createdAt_DESC',
  FileNameAsc = 'fileName_ASC',
  FileNameDesc = 'fileName_DESC',
  HandleAsc = 'handle_ASC',
  HandleDesc = 'handle_DESC',
  HeightAsc = 'height_ASC',
  HeightDesc = 'height_DESC',
  IdAsc = 'id_ASC',
  IdDesc = 'id_DESC',
  MimeTypeAsc = 'mimeType_ASC',
  MimeTypeDesc = 'mimeType_DESC',
  PublishedAtAsc = 'publishedAt_ASC',
  PublishedAtDesc = 'publishedAt_DESC',
  SizeAsc = 'size_ASC',
  SizeDesc = 'size_DESC',
  UpdatedAtAsc = 'updatedAt_ASC',
  UpdatedAtDesc = 'updatedAt_DESC',
  WidthAsc = 'width_ASC',
  WidthDesc = 'width_DESC'
}

/** Transformations for Assets */
export type AssetTransformationInput = {
  document?: InputMaybe<DocumentTransformationInput>;
  image?: InputMaybe<ImageTransformationInput>;
  /** Pass true if you want to validate the passed transformation parameters */
  validateOptions?: InputMaybe<Scalars['Boolean']>;
};

export type AssetUpdateInput = {
  albumCoverAlbum?: InputMaybe<AlbumUpdateManyInlineInput>;
  audioBlogBlog?: InputMaybe<BlogUpdateManyInlineInput>;
  avatarImageProfile?: InputMaybe<ProfileUpdateManyInlineInput>;
  backgroundImageLayoutBlock?: InputMaybe<LayoutBlockUpdateManyInlineInput>;
  backgroundImageLayoutSectionContent?: InputMaybe<LayoutBlockColumnUpdateManyInlineInput>;
  blogGalleryBlog?: InputMaybe<BlogUpdateManyInlineInput>;
  boxImageGridBox?: InputMaybe<GridBoxUpdateManyInlineInput>;
  contactAvatarContact?: InputMaybe<ContactUpdateManyInlineInput>;
  contentImageAccordionContent?: InputMaybe<AccordionUpdateManyInlineInput>;
  contentImageTextContent?: InputMaybe<TextContentUpdateManyInlineInput>;
  eventFlyerEvent?: InputMaybe<EventUpdateManyInlineInput>;
  eventGalleryEvent?: InputMaybe<EventUpdateManyInlineInput>;
  faviconSiteLibrary?: InputMaybe<SiteLibraryUpdateManyInlineInput>;
  fileName?: InputMaybe<Scalars['String']>;
  footerImageFooterColumn?: InputMaybe<FooterColumnUpdateManyInlineInput>;
  galleryElement?: InputMaybe<ElementUpdateManyInlineInput>;
  galleryProduct?: InputMaybe<ProductUpdateManyInlineInput>;
  handle?: InputMaybe<Scalars['String']>;
  height?: InputMaybe<Scalars['Float']>;
  heroImagePage?: InputMaybe<PageUpdateManyInlineInput>;
  heroImageProfile?: InputMaybe<ProfileUpdateManyInlineInput>;
  imageBlog?: InputMaybe<BlogUpdateManyInlineInput>;
  imageElement?: InputMaybe<ElementUpdateManyInlineInput>;
  imageGalleryProfile?: InputMaybe<ProfileUpdateManyInlineInput>;
  imageNavigationItem?: InputMaybe<NavigationItemUpdateManyInlineInput>;
  labelLogoSiteLibrary?: InputMaybe<SiteLibraryUpdateManyInlineInput>;
  /** Manage document localizations */
  localizations?: InputMaybe<AssetUpdateLocalizationsInput>;
  logoImageLogoTable?: InputMaybe<LogoTableUpdateManyInlineInput>;
  logoSiteLibrary?: InputMaybe<SiteLibraryUpdateManyInlineInput>;
  memberMusicReleaseProfile?: InputMaybe<ProfileUpdateManyInlineInput>;
  metaAppleTouchIconSiteLibrary?: InputMaybe<SiteLibraryUpdateManyInlineInput>;
  metaOgImageSiteLibrary?: InputMaybe<SiteLibraryUpdateManyInlineInput>;
  mimeType?: InputMaybe<Scalars['String']>;
  navigationLogoNavigation?: InputMaybe<NavigationUpdateManyInlineInput>;
  parallaxImageElement?: InputMaybe<ElementUpdateManyInlineInput>;
  profileLogoProfile?: InputMaybe<ProfileUpdateManyInlineInput>;
  size?: InputMaybe<Scalars['Float']>;
  sliderVideoBackgroundHomeVideoSlider?: InputMaybe<HeroMediaSliderUpdateManyInlineInput>;
  testimonialAvatarTestimonial?: InputMaybe<TestimonialUpdateManyInlineInput>;
  testimonialLogoTestimonial?: InputMaybe<TestimonialUpdateManyInlineInput>;
  width?: InputMaybe<Scalars['Float']>;
};

export type AssetUpdateLocalizationDataInput = {
  fileName?: InputMaybe<Scalars['String']>;
  handle?: InputMaybe<Scalars['String']>;
  height?: InputMaybe<Scalars['Float']>;
  mimeType?: InputMaybe<Scalars['String']>;
  size?: InputMaybe<Scalars['Float']>;
  width?: InputMaybe<Scalars['Float']>;
};

export type AssetUpdateLocalizationInput = {
  data: AssetUpdateLocalizationDataInput;
  locale: Locale;
};

export type AssetUpdateLocalizationsInput = {
  /** Localizations to create */
  create?: InputMaybe<Array<AssetCreateLocalizationInput>>;
  /** Localizations to delete */
  delete?: InputMaybe<Array<Locale>>;
  /** Localizations to update */
  update?: InputMaybe<Array<AssetUpdateLocalizationInput>>;
  upsert?: InputMaybe<Array<AssetUpsertLocalizationInput>>;
};

export type AssetUpdateManyInlineInput = {
  /** Connect multiple existing Asset documents */
  connect?: InputMaybe<Array<AssetConnectInput>>;
  /** Create and connect multiple Asset documents */
  create?: InputMaybe<Array<AssetCreateInput>>;
  /** Delete multiple Asset documents */
  delete?: InputMaybe<Array<AssetWhereUniqueInput>>;
  /** Disconnect multiple Asset documents */
  disconnect?: InputMaybe<Array<AssetWhereUniqueInput>>;
  /** Override currently-connected documents with multiple existing Asset documents */
  set?: InputMaybe<Array<AssetWhereUniqueInput>>;
  /** Update multiple Asset documents */
  update?: InputMaybe<Array<AssetUpdateWithNestedWhereUniqueInput>>;
  /** Upsert multiple Asset documents */
  upsert?: InputMaybe<Array<AssetUpsertWithNestedWhereUniqueInput>>;
};

export type AssetUpdateManyInput = {
  fileName?: InputMaybe<Scalars['String']>;
  height?: InputMaybe<Scalars['Float']>;
  /** Optional updates to localizations */
  localizations?: InputMaybe<AssetUpdateManyLocalizationsInput>;
  mimeType?: InputMaybe<Scalars['String']>;
  size?: InputMaybe<Scalars['Float']>;
  width?: InputMaybe<Scalars['Float']>;
};

export type AssetUpdateManyLocalizationDataInput = {
  fileName?: InputMaybe<Scalars['String']>;
  height?: InputMaybe<Scalars['Float']>;
  mimeType?: InputMaybe<Scalars['String']>;
  size?: InputMaybe<Scalars['Float']>;
  width?: InputMaybe<Scalars['Float']>;
};

export type AssetUpdateManyLocalizationInput = {
  data: AssetUpdateManyLocalizationDataInput;
  locale: Locale;
};

export type AssetUpdateManyLocalizationsInput = {
  /** Localizations to update */
  update?: InputMaybe<Array<AssetUpdateManyLocalizationInput>>;
};

export type AssetUpdateManyWithNestedWhereInput = {
  /** Update many input */
  data: AssetUpdateManyInput;
  /** Document search */
  where: AssetWhereInput;
};

export type AssetUpdateOneInlineInput = {
  /** Connect existing Asset document */
  connect?: InputMaybe<AssetWhereUniqueInput>;
  /** Create and connect one Asset document */
  create?: InputMaybe<AssetCreateInput>;
  /** Delete currently connected Asset document */
  delete?: InputMaybe<Scalars['Boolean']>;
  /** Disconnect currently connected Asset document */
  disconnect?: InputMaybe<Scalars['Boolean']>;
  /** Update single Asset document */
  update?: InputMaybe<AssetUpdateWithNestedWhereUniqueInput>;
  /** Upsert single Asset document */
  upsert?: InputMaybe<AssetUpsertWithNestedWhereUniqueInput>;
};

export type AssetUpdateWithNestedWhereUniqueInput = {
  /** Document to update */
  data: AssetUpdateInput;
  /** Unique document search */
  where: AssetWhereUniqueInput;
};

export type AssetUpsertInput = {
  /** Create document if it didn't exist */
  create: AssetCreateInput;
  /** Update document if it exists */
  update: AssetUpdateInput;
};

export type AssetUpsertLocalizationInput = {
  create: AssetCreateLocalizationDataInput;
  locale: Locale;
  update: AssetUpdateLocalizationDataInput;
};

export type AssetUpsertWithNestedWhereUniqueInput = {
  /** Upsert data */
  data: AssetUpsertInput;
  /** Unique document search */
  where: AssetWhereUniqueInput;
};

/** This contains a set of filters that can be used to compare values internally */
export type AssetWhereComparatorInput = {
  /** This field can be used to request to check if the entry is outdated by internal comparison */
  outdated_to?: InputMaybe<Scalars['Boolean']>;
};

/** Identifies documents */
export type AssetWhereInput = {
  /** Logical AND on all given filters. */
  AND?: InputMaybe<Array<AssetWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: InputMaybe<Array<AssetWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: InputMaybe<Array<AssetWhereInput>>;
  /** Contains search across all appropriate fields. */
  _search?: InputMaybe<Scalars['String']>;
  albumCoverAlbum_every?: InputMaybe<AlbumWhereInput>;
  albumCoverAlbum_none?: InputMaybe<AlbumWhereInput>;
  albumCoverAlbum_some?: InputMaybe<AlbumWhereInput>;
  audioBlogBlog_every?: InputMaybe<BlogWhereInput>;
  audioBlogBlog_none?: InputMaybe<BlogWhereInput>;
  audioBlogBlog_some?: InputMaybe<BlogWhereInput>;
  avatarImageProfile_every?: InputMaybe<ProfileWhereInput>;
  avatarImageProfile_none?: InputMaybe<ProfileWhereInput>;
  avatarImageProfile_some?: InputMaybe<ProfileWhereInput>;
  blogGalleryBlog_every?: InputMaybe<BlogWhereInput>;
  blogGalleryBlog_none?: InputMaybe<BlogWhereInput>;
  blogGalleryBlog_some?: InputMaybe<BlogWhereInput>;
  contactAvatarContact_every?: InputMaybe<ContactWhereInput>;
  contactAvatarContact_none?: InputMaybe<ContactWhereInput>;
  contactAvatarContact_some?: InputMaybe<ContactWhereInput>;
  createdAt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  createdAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  createdAt_gte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  createdAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  /** All values less than the given value. */
  createdAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  createdAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** Any other value that exists and is not equal to the given value. */
  createdAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not contained in given list. */
  createdAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  createdBy?: InputMaybe<UserWhereInput>;
  documentInStages_every?: InputMaybe<AssetWhereStageInput>;
  documentInStages_none?: InputMaybe<AssetWhereStageInput>;
  documentInStages_some?: InputMaybe<AssetWhereStageInput>;
  eventFlyerEvent_every?: InputMaybe<EventWhereInput>;
  eventFlyerEvent_none?: InputMaybe<EventWhereInput>;
  eventFlyerEvent_some?: InputMaybe<EventWhereInput>;
  eventGalleryEvent_every?: InputMaybe<EventWhereInput>;
  eventGalleryEvent_none?: InputMaybe<EventWhereInput>;
  eventGalleryEvent_some?: InputMaybe<EventWhereInput>;
  faviconSiteLibrary_every?: InputMaybe<SiteLibraryWhereInput>;
  faviconSiteLibrary_none?: InputMaybe<SiteLibraryWhereInput>;
  faviconSiteLibrary_some?: InputMaybe<SiteLibraryWhereInput>;
  fileName?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  fileName_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  fileName_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  fileName_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Any other value that exists and is not equal to the given value. */
  fileName_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  fileName_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  fileName_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  fileName_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  fileName_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  fileName_starts_with?: InputMaybe<Scalars['String']>;
  galleryProduct_every?: InputMaybe<ProductWhereInput>;
  galleryProduct_none?: InputMaybe<ProductWhereInput>;
  galleryProduct_some?: InputMaybe<ProductWhereInput>;
  handle?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  handle_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  handle_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  handle_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Any other value that exists and is not equal to the given value. */
  handle_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  handle_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  handle_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  handle_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  handle_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  handle_starts_with?: InputMaybe<Scalars['String']>;
  height?: InputMaybe<Scalars['Float']>;
  /** All values greater than the given value. */
  height_gt?: InputMaybe<Scalars['Float']>;
  /** All values greater than or equal the given value. */
  height_gte?: InputMaybe<Scalars['Float']>;
  /** All values that are contained in given list. */
  height_in?: InputMaybe<Array<InputMaybe<Scalars['Float']>>>;
  /** All values less than the given value. */
  height_lt?: InputMaybe<Scalars['Float']>;
  /** All values less than or equal the given value. */
  height_lte?: InputMaybe<Scalars['Float']>;
  /** Any other value that exists and is not equal to the given value. */
  height_not?: InputMaybe<Scalars['Float']>;
  /** All values that are not contained in given list. */
  height_not_in?: InputMaybe<Array<InputMaybe<Scalars['Float']>>>;
  heroImagePage_every?: InputMaybe<PageWhereInput>;
  heroImagePage_none?: InputMaybe<PageWhereInput>;
  heroImagePage_some?: InputMaybe<PageWhereInput>;
  heroImageProfile_every?: InputMaybe<ProfileWhereInput>;
  heroImageProfile_none?: InputMaybe<ProfileWhereInput>;
  heroImageProfile_some?: InputMaybe<ProfileWhereInput>;
  id?: InputMaybe<Scalars['ID']>;
  /** All values containing the given string. */
  id_contains?: InputMaybe<Scalars['ID']>;
  /** All values ending with the given string. */
  id_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are contained in given list. */
  id_in?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** Any other value that exists and is not equal to the given value. */
  id_not?: InputMaybe<Scalars['ID']>;
  /** All values not containing the given string. */
  id_not_contains?: InputMaybe<Scalars['ID']>;
  /** All values not ending with the given string */
  id_not_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are not contained in given list. */
  id_not_in?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** All values not starting with the given string. */
  id_not_starts_with?: InputMaybe<Scalars['ID']>;
  /** All values starting with the given string. */
  id_starts_with?: InputMaybe<Scalars['ID']>;
  imageBlog_every?: InputMaybe<BlogWhereInput>;
  imageBlog_none?: InputMaybe<BlogWhereInput>;
  imageBlog_some?: InputMaybe<BlogWhereInput>;
  imageGalleryProfile_every?: InputMaybe<ProfileWhereInput>;
  imageGalleryProfile_none?: InputMaybe<ProfileWhereInput>;
  imageGalleryProfile_some?: InputMaybe<ProfileWhereInput>;
  labelLogoSiteLibrary_every?: InputMaybe<SiteLibraryWhereInput>;
  labelLogoSiteLibrary_none?: InputMaybe<SiteLibraryWhereInput>;
  labelLogoSiteLibrary_some?: InputMaybe<SiteLibraryWhereInput>;
  logoImageLogoTable_every?: InputMaybe<LogoTableWhereInput>;
  logoImageLogoTable_none?: InputMaybe<LogoTableWhereInput>;
  logoImageLogoTable_some?: InputMaybe<LogoTableWhereInput>;
  logoSiteLibrary_every?: InputMaybe<SiteLibraryWhereInput>;
  logoSiteLibrary_none?: InputMaybe<SiteLibraryWhereInput>;
  logoSiteLibrary_some?: InputMaybe<SiteLibraryWhereInput>;
  memberMusicReleaseProfile_every?: InputMaybe<ProfileWhereInput>;
  memberMusicReleaseProfile_none?: InputMaybe<ProfileWhereInput>;
  memberMusicReleaseProfile_some?: InputMaybe<ProfileWhereInput>;
  metaAppleTouchIconSiteLibrary_every?: InputMaybe<SiteLibraryWhereInput>;
  metaAppleTouchIconSiteLibrary_none?: InputMaybe<SiteLibraryWhereInput>;
  metaAppleTouchIconSiteLibrary_some?: InputMaybe<SiteLibraryWhereInput>;
  metaOgImageSiteLibrary_every?: InputMaybe<SiteLibraryWhereInput>;
  metaOgImageSiteLibrary_none?: InputMaybe<SiteLibraryWhereInput>;
  metaOgImageSiteLibrary_some?: InputMaybe<SiteLibraryWhereInput>;
  mimeType?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  mimeType_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  mimeType_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  mimeType_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Any other value that exists and is not equal to the given value. */
  mimeType_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  mimeType_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  mimeType_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  mimeType_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  mimeType_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  mimeType_starts_with?: InputMaybe<Scalars['String']>;
  navigationLogoNavigation_every?: InputMaybe<NavigationWhereInput>;
  navigationLogoNavigation_none?: InputMaybe<NavigationWhereInput>;
  navigationLogoNavigation_some?: InputMaybe<NavigationWhereInput>;
  profileLogoProfile_every?: InputMaybe<ProfileWhereInput>;
  profileLogoProfile_none?: InputMaybe<ProfileWhereInput>;
  profileLogoProfile_some?: InputMaybe<ProfileWhereInput>;
  publishedAt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  publishedAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  publishedAt_gte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  publishedAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  /** All values less than the given value. */
  publishedAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  publishedAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** Any other value that exists and is not equal to the given value. */
  publishedAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not contained in given list. */
  publishedAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  publishedBy?: InputMaybe<UserWhereInput>;
  scheduledIn_every?: InputMaybe<ScheduledOperationWhereInput>;
  scheduledIn_none?: InputMaybe<ScheduledOperationWhereInput>;
  scheduledIn_some?: InputMaybe<ScheduledOperationWhereInput>;
  size?: InputMaybe<Scalars['Float']>;
  /** All values greater than the given value. */
  size_gt?: InputMaybe<Scalars['Float']>;
  /** All values greater than or equal the given value. */
  size_gte?: InputMaybe<Scalars['Float']>;
  /** All values that are contained in given list. */
  size_in?: InputMaybe<Array<InputMaybe<Scalars['Float']>>>;
  /** All values less than the given value. */
  size_lt?: InputMaybe<Scalars['Float']>;
  /** All values less than or equal the given value. */
  size_lte?: InputMaybe<Scalars['Float']>;
  /** Any other value that exists and is not equal to the given value. */
  size_not?: InputMaybe<Scalars['Float']>;
  /** All values that are not contained in given list. */
  size_not_in?: InputMaybe<Array<InputMaybe<Scalars['Float']>>>;
  testimonialAvatarTestimonial_every?: InputMaybe<TestimonialWhereInput>;
  testimonialAvatarTestimonial_none?: InputMaybe<TestimonialWhereInput>;
  testimonialAvatarTestimonial_some?: InputMaybe<TestimonialWhereInput>;
  testimonialLogoTestimonial_every?: InputMaybe<TestimonialWhereInput>;
  testimonialLogoTestimonial_none?: InputMaybe<TestimonialWhereInput>;
  testimonialLogoTestimonial_some?: InputMaybe<TestimonialWhereInput>;
  updatedAt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  updatedAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  updatedAt_gte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  updatedAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  /** All values less than the given value. */
  updatedAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  updatedAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** Any other value that exists and is not equal to the given value. */
  updatedAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not contained in given list. */
  updatedAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  updatedBy?: InputMaybe<UserWhereInput>;
  width?: InputMaybe<Scalars['Float']>;
  /** All values greater than the given value. */
  width_gt?: InputMaybe<Scalars['Float']>;
  /** All values greater than or equal the given value. */
  width_gte?: InputMaybe<Scalars['Float']>;
  /** All values that are contained in given list. */
  width_in?: InputMaybe<Array<InputMaybe<Scalars['Float']>>>;
  /** All values less than the given value. */
  width_lt?: InputMaybe<Scalars['Float']>;
  /** All values less than or equal the given value. */
  width_lte?: InputMaybe<Scalars['Float']>;
  /** Any other value that exists and is not equal to the given value. */
  width_not?: InputMaybe<Scalars['Float']>;
  /** All values that are not contained in given list. */
  width_not_in?: InputMaybe<Array<InputMaybe<Scalars['Float']>>>;
};

/** The document in stages filter allows specifying a stage entry to cross compare the same document between different stages */
export type AssetWhereStageInput = {
  /** Logical AND on all given filters. */
  AND?: InputMaybe<Array<AssetWhereStageInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: InputMaybe<Array<AssetWhereStageInput>>;
  /** Logical OR on all given filters. */
  OR?: InputMaybe<Array<AssetWhereStageInput>>;
  /** This field contains fields which can be set as true or false to specify an internal comparison */
  compareWithParent?: InputMaybe<AssetWhereComparatorInput>;
  /** Specify the stage to compare with */
  stage?: InputMaybe<Stage>;
};

/** References Asset record uniquely */
export type AssetWhereUniqueInput = {
  id?: InputMaybe<Scalars['ID']>;
};

export type BatchPayload = {
  __typename?: 'BatchPayload';
  /** The number of nodes that have been affected by the Batch operation. */
  count: Scalars['Long'];
};

/** Blog Enteries */
export type Blog = Entity & Node & {
  __typename?: 'Blog';
  audioBlog?: Maybe<Asset>;
  authorQuery: Array<ContactQueries>;
  blogCallToActionLink?: Maybe<Scalars['String']>;
  blogCallToActionText?: Maybe<Scalars['String']>;
  blogCategory?: Maybe<BlogTags>;
  blogGallery: Array<Asset>;
  blogHtml?: Maybe<Scalars['String']>;
  blogJson?: Maybe<Scalars['Json']>;
  blogSlug?: Maybe<Scalars['String']>;
  content?: Maybe<RichText>;
  /** The time the document was created */
  createdAt: Scalars['DateTime'];
  /** User that created this document */
  createdBy?: Maybe<User>;
  date?: Maybe<Scalars['Date']>;
  /** Get the document in other stages */
  documentInStages: Array<Blog>;
  excerpt?: Maybe<Scalars['String']>;
  /** List of Blog versions */
  history: Array<Version>;
  /** The unique identifier */
  id: Scalars['ID'];
  image?: Maybe<Asset>;
  /** The time the document was published. Null on documents in draft stage. */
  publishedAt?: Maybe<Scalars['DateTime']>;
  /** User that last published this document */
  publishedBy?: Maybe<User>;
  scheduledIn: Array<ScheduledOperation>;
  /** System stage field */
  stage: Stage;
  title?: Maybe<Scalars['String']>;
  /** The time the document was updated */
  updatedAt: Scalars['DateTime'];
  /** User that last updated this document */
  updatedBy?: Maybe<User>;
  videoBox: Array<VideoBox>;
};


/** Blog Enteries */
export type BlogAudioBlogArgs = {
  forceParentLocale?: InputMaybe<Scalars['Boolean']>;
  locales?: InputMaybe<Array<Locale>>;
};


/** Blog Enteries */
export type BlogBlogGalleryArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  forceParentLocale?: InputMaybe<Scalars['Boolean']>;
  last?: InputMaybe<Scalars['Int']>;
  locales?: InputMaybe<Array<Locale>>;
  orderBy?: InputMaybe<AssetOrderByInput>;
  skip?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<AssetWhereInput>;
};


/** Blog Enteries */
export type BlogCreatedByArgs = {
  forceParentLocale?: InputMaybe<Scalars['Boolean']>;
  locales?: InputMaybe<Array<Locale>>;
};


/** Blog Enteries */
export type BlogDocumentInStagesArgs = {
  includeCurrent?: Scalars['Boolean'];
  inheritLocale?: Scalars['Boolean'];
  stages?: Array<Stage>;
};


/** Blog Enteries */
export type BlogHistoryArgs = {
  limit?: Scalars['Int'];
  skip?: Scalars['Int'];
  stageOverride?: InputMaybe<Stage>;
};


/** Blog Enteries */
export type BlogImageArgs = {
  forceParentLocale?: InputMaybe<Scalars['Boolean']>;
  locales?: InputMaybe<Array<Locale>>;
};


/** Blog Enteries */
export type BlogPublishedByArgs = {
  forceParentLocale?: InputMaybe<Scalars['Boolean']>;
  locales?: InputMaybe<Array<Locale>>;
};


/** Blog Enteries */
export type BlogScheduledInArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  forceParentLocale?: InputMaybe<Scalars['Boolean']>;
  last?: InputMaybe<Scalars['Int']>;
  locales?: InputMaybe<Array<Locale>>;
  skip?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<ScheduledOperationWhereInput>;
};


/** Blog Enteries */
export type BlogUpdatedByArgs = {
  forceParentLocale?: InputMaybe<Scalars['Boolean']>;
  locales?: InputMaybe<Array<Locale>>;
};


/** Blog Enteries */
export type BlogVideoBoxArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  forceParentLocale?: InputMaybe<Scalars['Boolean']>;
  last?: InputMaybe<Scalars['Int']>;
  locales?: InputMaybe<Array<Locale>>;
  orderBy?: InputMaybe<VideoBoxOrderByInput>;
  skip?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<VideoBoxWhereInput>;
};

export type BlogConnectInput = {
  /** Allow to specify document position in list of connected documents, will default to appending at end of list */
  position?: InputMaybe<ConnectPositionInput>;
  /** Document to connect */
  where: BlogWhereUniqueInput;
};

/** A connection to a list of items. */
export type BlogConnection = {
  __typename?: 'BlogConnection';
  aggregate: Aggregate;
  /** A list of edges. */
  edges: Array<BlogEdge>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
};

export type BlogCreateInput = {
  audioBlog?: InputMaybe<AssetCreateOneInlineInput>;
  authorQuery?: InputMaybe<Array<ContactQueries>>;
  blogCallToActionLink?: InputMaybe<Scalars['String']>;
  blogCallToActionText?: InputMaybe<Scalars['String']>;
  blogCategory?: InputMaybe<BlogTags>;
  blogGallery?: InputMaybe<AssetCreateManyInlineInput>;
  blogHtml?: InputMaybe<Scalars['String']>;
  blogJson?: InputMaybe<Scalars['Json']>;
  blogSlug?: InputMaybe<Scalars['String']>;
  content?: InputMaybe<Scalars['RichTextAST']>;
  createdAt?: InputMaybe<Scalars['DateTime']>;
  date?: InputMaybe<Scalars['Date']>;
  excerpt?: InputMaybe<Scalars['String']>;
  image?: InputMaybe<AssetCreateOneInlineInput>;
  title?: InputMaybe<Scalars['String']>;
  updatedAt?: InputMaybe<Scalars['DateTime']>;
  videoBox?: InputMaybe<VideoBoxCreateManyInlineInput>;
};

export type BlogCreateManyInlineInput = {
  /** Connect multiple existing Blog documents */
  connect?: InputMaybe<Array<BlogWhereUniqueInput>>;
  /** Create and connect multiple existing Blog documents */
  create?: InputMaybe<Array<BlogCreateInput>>;
};

export type BlogCreateOneInlineInput = {
  /** Connect one existing Blog document */
  connect?: InputMaybe<BlogWhereUniqueInput>;
  /** Create and connect one Blog document */
  create?: InputMaybe<BlogCreateInput>;
};

/** An edge in a connection. */
export type BlogEdge = {
  __typename?: 'BlogEdge';
  /** A cursor for use in pagination. */
  cursor: Scalars['String'];
  /** The item at the end of the edge. */
  node: Blog;
};

/** Identifies documents */
export type BlogManyWhereInput = {
  /** Logical AND on all given filters. */
  AND?: InputMaybe<Array<BlogWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: InputMaybe<Array<BlogWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: InputMaybe<Array<BlogWhereInput>>;
  /** Contains search across all appropriate fields. */
  _search?: InputMaybe<Scalars['String']>;
  audioBlog?: InputMaybe<AssetWhereInput>;
  /** Matches if the field array contains *all* items provided to the filter and order does match */
  authorQuery?: InputMaybe<Array<ContactQueries>>;
  /** Matches if the field array contains *all* items provided to the filter */
  authorQuery_contains_all?: InputMaybe<Array<ContactQueries>>;
  /** Matches if the field array does not contain any of the items provided to the filter */
  authorQuery_contains_none?: InputMaybe<Array<ContactQueries>>;
  /** Matches if the field array contains at least one item provided to the filter */
  authorQuery_contains_some?: InputMaybe<Array<ContactQueries>>;
  /** Matches if the field array does not contains *all* items provided to the filter or order does not match */
  authorQuery_not?: InputMaybe<Array<ContactQueries>>;
  blogCallToActionLink?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  blogCallToActionLink_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  blogCallToActionLink_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  blogCallToActionLink_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Any other value that exists and is not equal to the given value. */
  blogCallToActionLink_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  blogCallToActionLink_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  blogCallToActionLink_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  blogCallToActionLink_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  blogCallToActionLink_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  blogCallToActionLink_starts_with?: InputMaybe<Scalars['String']>;
  blogCallToActionText?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  blogCallToActionText_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  blogCallToActionText_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  blogCallToActionText_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Any other value that exists and is not equal to the given value. */
  blogCallToActionText_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  blogCallToActionText_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  blogCallToActionText_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  blogCallToActionText_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  blogCallToActionText_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  blogCallToActionText_starts_with?: InputMaybe<Scalars['String']>;
  blogCategory?: InputMaybe<BlogTags>;
  /** All values that are contained in given list. */
  blogCategory_in?: InputMaybe<Array<InputMaybe<BlogTags>>>;
  /** Any other value that exists and is not equal to the given value. */
  blogCategory_not?: InputMaybe<BlogTags>;
  /** All values that are not contained in given list. */
  blogCategory_not_in?: InputMaybe<Array<InputMaybe<BlogTags>>>;
  blogGallery_every?: InputMaybe<AssetWhereInput>;
  blogGallery_none?: InputMaybe<AssetWhereInput>;
  blogGallery_some?: InputMaybe<AssetWhereInput>;
  blogHtml?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  blogHtml_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  blogHtml_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  blogHtml_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Any other value that exists and is not equal to the given value. */
  blogHtml_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  blogHtml_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  blogHtml_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  blogHtml_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  blogHtml_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  blogHtml_starts_with?: InputMaybe<Scalars['String']>;
  /** All values containing the given json path. */
  blogJson_json_path_exists?: InputMaybe<Scalars['String']>;
  /**
   * Recursively tries to find the provided JSON scalar value inside the field.
   * It does use an exact match when comparing values.
   * If you pass `null` as value the filter will be ignored.
   * Note: This filter fails if you try to look for a non scalar JSON value!
   */
  blogJson_value_recursive?: InputMaybe<Scalars['Json']>;
  blogSlug?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  blogSlug_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  blogSlug_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  blogSlug_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Any other value that exists and is not equal to the given value. */
  blogSlug_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  blogSlug_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  blogSlug_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  blogSlug_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  blogSlug_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  blogSlug_starts_with?: InputMaybe<Scalars['String']>;
  createdAt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  createdAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  createdAt_gte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  createdAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  /** All values less than the given value. */
  createdAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  createdAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** Any other value that exists and is not equal to the given value. */
  createdAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not contained in given list. */
  createdAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  createdBy?: InputMaybe<UserWhereInput>;
  date?: InputMaybe<Scalars['Date']>;
  /** All values greater than the given value. */
  date_gt?: InputMaybe<Scalars['Date']>;
  /** All values greater than or equal the given value. */
  date_gte?: InputMaybe<Scalars['Date']>;
  /** All values that are contained in given list. */
  date_in?: InputMaybe<Array<InputMaybe<Scalars['Date']>>>;
  /** All values less than the given value. */
  date_lt?: InputMaybe<Scalars['Date']>;
  /** All values less than or equal the given value. */
  date_lte?: InputMaybe<Scalars['Date']>;
  /** Any other value that exists and is not equal to the given value. */
  date_not?: InputMaybe<Scalars['Date']>;
  /** All values that are not contained in given list. */
  date_not_in?: InputMaybe<Array<InputMaybe<Scalars['Date']>>>;
  documentInStages_every?: InputMaybe<BlogWhereStageInput>;
  documentInStages_none?: InputMaybe<BlogWhereStageInput>;
  documentInStages_some?: InputMaybe<BlogWhereStageInput>;
  excerpt?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  excerpt_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  excerpt_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  excerpt_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Any other value that exists and is not equal to the given value. */
  excerpt_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  excerpt_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  excerpt_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  excerpt_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  excerpt_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  excerpt_starts_with?: InputMaybe<Scalars['String']>;
  id?: InputMaybe<Scalars['ID']>;
  /** All values containing the given string. */
  id_contains?: InputMaybe<Scalars['ID']>;
  /** All values ending with the given string. */
  id_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are contained in given list. */
  id_in?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** Any other value that exists and is not equal to the given value. */
  id_not?: InputMaybe<Scalars['ID']>;
  /** All values not containing the given string. */
  id_not_contains?: InputMaybe<Scalars['ID']>;
  /** All values not ending with the given string */
  id_not_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are not contained in given list. */
  id_not_in?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** All values not starting with the given string. */
  id_not_starts_with?: InputMaybe<Scalars['ID']>;
  /** All values starting with the given string. */
  id_starts_with?: InputMaybe<Scalars['ID']>;
  image?: InputMaybe<AssetWhereInput>;
  publishedAt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  publishedAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  publishedAt_gte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  publishedAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  /** All values less than the given value. */
  publishedAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  publishedAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** Any other value that exists and is not equal to the given value. */
  publishedAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not contained in given list. */
  publishedAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  publishedBy?: InputMaybe<UserWhereInput>;
  scheduledIn_every?: InputMaybe<ScheduledOperationWhereInput>;
  scheduledIn_none?: InputMaybe<ScheduledOperationWhereInput>;
  scheduledIn_some?: InputMaybe<ScheduledOperationWhereInput>;
  title?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  title_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  title_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  title_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Any other value that exists and is not equal to the given value. */
  title_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  title_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  title_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  title_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  title_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  title_starts_with?: InputMaybe<Scalars['String']>;
  updatedAt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  updatedAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  updatedAt_gte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  updatedAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  /** All values less than the given value. */
  updatedAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  updatedAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** Any other value that exists and is not equal to the given value. */
  updatedAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not contained in given list. */
  updatedAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  updatedBy?: InputMaybe<UserWhereInput>;
  videoBox_every?: InputMaybe<VideoBoxWhereInput>;
  videoBox_none?: InputMaybe<VideoBoxWhereInput>;
  videoBox_some?: InputMaybe<VideoBoxWhereInput>;
};

export enum BlogOrderByInput {
  AuthorQueryAsc = 'authorQuery_ASC',
  AuthorQueryDesc = 'authorQuery_DESC',
  BlogCallToActionLinkAsc = 'blogCallToActionLink_ASC',
  BlogCallToActionLinkDesc = 'blogCallToActionLink_DESC',
  BlogCallToActionTextAsc = 'blogCallToActionText_ASC',
  BlogCallToActionTextDesc = 'blogCallToActionText_DESC',
  BlogCategoryAsc = 'blogCategory_ASC',
  BlogCategoryDesc = 'blogCategory_DESC',
  BlogHtmlAsc = 'blogHtml_ASC',
  BlogHtmlDesc = 'blogHtml_DESC',
  BlogSlugAsc = 'blogSlug_ASC',
  BlogSlugDesc = 'blogSlug_DESC',
  CreatedAtAsc = 'createdAt_ASC',
  CreatedAtDesc = 'createdAt_DESC',
  DateAsc = 'date_ASC',
  DateDesc = 'date_DESC',
  ExcerptAsc = 'excerpt_ASC',
  ExcerptDesc = 'excerpt_DESC',
  IdAsc = 'id_ASC',
  IdDesc = 'id_DESC',
  PublishedAtAsc = 'publishedAt_ASC',
  PublishedAtDesc = 'publishedAt_DESC',
  TitleAsc = 'title_ASC',
  TitleDesc = 'title_DESC',
  UpdatedAtAsc = 'updatedAt_ASC',
  UpdatedAtDesc = 'updatedAt_DESC'
}

export enum BlogTags {
  Blog = 'blog',
  Music = 'music'
}

export type BlogUpdateInput = {
  audioBlog?: InputMaybe<AssetUpdateOneInlineInput>;
  authorQuery?: InputMaybe<Array<ContactQueries>>;
  blogCallToActionLink?: InputMaybe<Scalars['String']>;
  blogCallToActionText?: InputMaybe<Scalars['String']>;
  blogCategory?: InputMaybe<BlogTags>;
  blogGallery?: InputMaybe<AssetUpdateManyInlineInput>;
  blogHtml?: InputMaybe<Scalars['String']>;
  blogJson?: InputMaybe<Scalars['Json']>;
  blogSlug?: InputMaybe<Scalars['String']>;
  content?: InputMaybe<Scalars['RichTextAST']>;
  date?: InputMaybe<Scalars['Date']>;
  excerpt?: InputMaybe<Scalars['String']>;
  image?: InputMaybe<AssetUpdateOneInlineInput>;
  title?: InputMaybe<Scalars['String']>;
  videoBox?: InputMaybe<VideoBoxUpdateManyInlineInput>;
};

export type BlogUpdateManyInlineInput = {
  /** Connect multiple existing Blog documents */
  connect?: InputMaybe<Array<BlogConnectInput>>;
  /** Create and connect multiple Blog documents */
  create?: InputMaybe<Array<BlogCreateInput>>;
  /** Delete multiple Blog documents */
  delete?: InputMaybe<Array<BlogWhereUniqueInput>>;
  /** Disconnect multiple Blog documents */
  disconnect?: InputMaybe<Array<BlogWhereUniqueInput>>;
  /** Override currently-connected documents with multiple existing Blog documents */
  set?: InputMaybe<Array<BlogWhereUniqueInput>>;
  /** Update multiple Blog documents */
  update?: InputMaybe<Array<BlogUpdateWithNestedWhereUniqueInput>>;
  /** Upsert multiple Blog documents */
  upsert?: InputMaybe<Array<BlogUpsertWithNestedWhereUniqueInput>>;
};

export type BlogUpdateManyInput = {
  authorQuery?: InputMaybe<Array<ContactQueries>>;
  blogCallToActionLink?: InputMaybe<Scalars['String']>;
  blogCallToActionText?: InputMaybe<Scalars['String']>;
  blogCategory?: InputMaybe<BlogTags>;
  blogHtml?: InputMaybe<Scalars['String']>;
  blogJson?: InputMaybe<Scalars['Json']>;
  content?: InputMaybe<Scalars['RichTextAST']>;
  date?: InputMaybe<Scalars['Date']>;
  excerpt?: InputMaybe<Scalars['String']>;
  title?: InputMaybe<Scalars['String']>;
};

export type BlogUpdateManyWithNestedWhereInput = {
  /** Update many input */
  data: BlogUpdateManyInput;
  /** Document search */
  where: BlogWhereInput;
};

export type BlogUpdateOneInlineInput = {
  /** Connect existing Blog document */
  connect?: InputMaybe<BlogWhereUniqueInput>;
  /** Create and connect one Blog document */
  create?: InputMaybe<BlogCreateInput>;
  /** Delete currently connected Blog document */
  delete?: InputMaybe<Scalars['Boolean']>;
  /** Disconnect currently connected Blog document */
  disconnect?: InputMaybe<Scalars['Boolean']>;
  /** Update single Blog document */
  update?: InputMaybe<BlogUpdateWithNestedWhereUniqueInput>;
  /** Upsert single Blog document */
  upsert?: InputMaybe<BlogUpsertWithNestedWhereUniqueInput>;
};

export type BlogUpdateWithNestedWhereUniqueInput = {
  /** Document to update */
  data: BlogUpdateInput;
  /** Unique document search */
  where: BlogWhereUniqueInput;
};

export type BlogUpsertInput = {
  /** Create document if it didn't exist */
  create: BlogCreateInput;
  /** Update document if it exists */
  update: BlogUpdateInput;
};

export type BlogUpsertWithNestedWhereUniqueInput = {
  /** Upsert data */
  data: BlogUpsertInput;
  /** Unique document search */
  where: BlogWhereUniqueInput;
};

/** This contains a set of filters that can be used to compare values internally */
export type BlogWhereComparatorInput = {
  /** This field can be used to request to check if the entry is outdated by internal comparison */
  outdated_to?: InputMaybe<Scalars['Boolean']>;
};

/** Identifies documents */
export type BlogWhereInput = {
  /** Logical AND on all given filters. */
  AND?: InputMaybe<Array<BlogWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: InputMaybe<Array<BlogWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: InputMaybe<Array<BlogWhereInput>>;
  /** Contains search across all appropriate fields. */
  _search?: InputMaybe<Scalars['String']>;
  audioBlog?: InputMaybe<AssetWhereInput>;
  /** Matches if the field array contains *all* items provided to the filter and order does match */
  authorQuery?: InputMaybe<Array<ContactQueries>>;
  /** Matches if the field array contains *all* items provided to the filter */
  authorQuery_contains_all?: InputMaybe<Array<ContactQueries>>;
  /** Matches if the field array does not contain any of the items provided to the filter */
  authorQuery_contains_none?: InputMaybe<Array<ContactQueries>>;
  /** Matches if the field array contains at least one item provided to the filter */
  authorQuery_contains_some?: InputMaybe<Array<ContactQueries>>;
  /** Matches if the field array does not contains *all* items provided to the filter or order does not match */
  authorQuery_not?: InputMaybe<Array<ContactQueries>>;
  blogCallToActionLink?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  blogCallToActionLink_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  blogCallToActionLink_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  blogCallToActionLink_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Any other value that exists and is not equal to the given value. */
  blogCallToActionLink_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  blogCallToActionLink_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  blogCallToActionLink_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  blogCallToActionLink_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  blogCallToActionLink_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  blogCallToActionLink_starts_with?: InputMaybe<Scalars['String']>;
  blogCallToActionText?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  blogCallToActionText_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  blogCallToActionText_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  blogCallToActionText_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Any other value that exists and is not equal to the given value. */
  blogCallToActionText_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  blogCallToActionText_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  blogCallToActionText_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  blogCallToActionText_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  blogCallToActionText_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  blogCallToActionText_starts_with?: InputMaybe<Scalars['String']>;
  blogCategory?: InputMaybe<BlogTags>;
  /** All values that are contained in given list. */
  blogCategory_in?: InputMaybe<Array<InputMaybe<BlogTags>>>;
  /** Any other value that exists and is not equal to the given value. */
  blogCategory_not?: InputMaybe<BlogTags>;
  /** All values that are not contained in given list. */
  blogCategory_not_in?: InputMaybe<Array<InputMaybe<BlogTags>>>;
  blogGallery_every?: InputMaybe<AssetWhereInput>;
  blogGallery_none?: InputMaybe<AssetWhereInput>;
  blogGallery_some?: InputMaybe<AssetWhereInput>;
  blogHtml?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  blogHtml_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  blogHtml_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  blogHtml_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Any other value that exists and is not equal to the given value. */
  blogHtml_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  blogHtml_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  blogHtml_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  blogHtml_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  blogHtml_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  blogHtml_starts_with?: InputMaybe<Scalars['String']>;
  /** All values containing the given json path. */
  blogJson_json_path_exists?: InputMaybe<Scalars['String']>;
  /**
   * Recursively tries to find the provided JSON scalar value inside the field.
   * It does use an exact match when comparing values.
   * If you pass `null` as value the filter will be ignored.
   * Note: This filter fails if you try to look for a non scalar JSON value!
   */
  blogJson_value_recursive?: InputMaybe<Scalars['Json']>;
  blogSlug?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  blogSlug_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  blogSlug_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  blogSlug_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Any other value that exists and is not equal to the given value. */
  blogSlug_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  blogSlug_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  blogSlug_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  blogSlug_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  blogSlug_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  blogSlug_starts_with?: InputMaybe<Scalars['String']>;
  createdAt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  createdAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  createdAt_gte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  createdAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  /** All values less than the given value. */
  createdAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  createdAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** Any other value that exists and is not equal to the given value. */
  createdAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not contained in given list. */
  createdAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  createdBy?: InputMaybe<UserWhereInput>;
  date?: InputMaybe<Scalars['Date']>;
  /** All values greater than the given value. */
  date_gt?: InputMaybe<Scalars['Date']>;
  /** All values greater than or equal the given value. */
  date_gte?: InputMaybe<Scalars['Date']>;
  /** All values that are contained in given list. */
  date_in?: InputMaybe<Array<InputMaybe<Scalars['Date']>>>;
  /** All values less than the given value. */
  date_lt?: InputMaybe<Scalars['Date']>;
  /** All values less than or equal the given value. */
  date_lte?: InputMaybe<Scalars['Date']>;
  /** Any other value that exists and is not equal to the given value. */
  date_not?: InputMaybe<Scalars['Date']>;
  /** All values that are not contained in given list. */
  date_not_in?: InputMaybe<Array<InputMaybe<Scalars['Date']>>>;
  documentInStages_every?: InputMaybe<BlogWhereStageInput>;
  documentInStages_none?: InputMaybe<BlogWhereStageInput>;
  documentInStages_some?: InputMaybe<BlogWhereStageInput>;
  excerpt?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  excerpt_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  excerpt_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  excerpt_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Any other value that exists and is not equal to the given value. */
  excerpt_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  excerpt_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  excerpt_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  excerpt_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  excerpt_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  excerpt_starts_with?: InputMaybe<Scalars['String']>;
  id?: InputMaybe<Scalars['ID']>;
  /** All values containing the given string. */
  id_contains?: InputMaybe<Scalars['ID']>;
  /** All values ending with the given string. */
  id_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are contained in given list. */
  id_in?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** Any other value that exists and is not equal to the given value. */
  id_not?: InputMaybe<Scalars['ID']>;
  /** All values not containing the given string. */
  id_not_contains?: InputMaybe<Scalars['ID']>;
  /** All values not ending with the given string */
  id_not_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are not contained in given list. */
  id_not_in?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** All values not starting with the given string. */
  id_not_starts_with?: InputMaybe<Scalars['ID']>;
  /** All values starting with the given string. */
  id_starts_with?: InputMaybe<Scalars['ID']>;
  image?: InputMaybe<AssetWhereInput>;
  publishedAt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  publishedAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  publishedAt_gte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  publishedAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  /** All values less than the given value. */
  publishedAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  publishedAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** Any other value that exists and is not equal to the given value. */
  publishedAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not contained in given list. */
  publishedAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  publishedBy?: InputMaybe<UserWhereInput>;
  scheduledIn_every?: InputMaybe<ScheduledOperationWhereInput>;
  scheduledIn_none?: InputMaybe<ScheduledOperationWhereInput>;
  scheduledIn_some?: InputMaybe<ScheduledOperationWhereInput>;
  title?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  title_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  title_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  title_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Any other value that exists and is not equal to the given value. */
  title_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  title_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  title_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  title_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  title_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  title_starts_with?: InputMaybe<Scalars['String']>;
  updatedAt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  updatedAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  updatedAt_gte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  updatedAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  /** All values less than the given value. */
  updatedAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  updatedAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** Any other value that exists and is not equal to the given value. */
  updatedAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not contained in given list. */
  updatedAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  updatedBy?: InputMaybe<UserWhereInput>;
  videoBox_every?: InputMaybe<VideoBoxWhereInput>;
  videoBox_none?: InputMaybe<VideoBoxWhereInput>;
  videoBox_some?: InputMaybe<VideoBoxWhereInput>;
};

/** The document in stages filter allows specifying a stage entry to cross compare the same document between different stages */
export type BlogWhereStageInput = {
  /** Logical AND on all given filters. */
  AND?: InputMaybe<Array<BlogWhereStageInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: InputMaybe<Array<BlogWhereStageInput>>;
  /** Logical OR on all given filters. */
  OR?: InputMaybe<Array<BlogWhereStageInput>>;
  /** This field contains fields which can be set as true or false to specify an internal comparison */
  compareWithParent?: InputMaybe<BlogWhereComparatorInput>;
  /** Specify the stage to compare with */
  stage?: InputMaybe<Stage>;
};

/** References Blog record uniquely */
export type BlogWhereUniqueInput = {
  blogSlug?: InputMaybe<Scalars['String']>;
  id?: InputMaybe<Scalars['ID']>;
};

export type CallToAction = Entity & {
  __typename?: 'CallToAction';
  contentAlign?: Maybe<ContentAlign>;
  ctaClass?: Maybe<Scalars['String']>;
  ctaLabel?: Maybe<Scalars['String']>;
  ctaLink?: Maybe<Scalars['String']>;
  ctaPrimary?: Maybe<Scalars['Boolean']>;
  /** The unique identifier */
  id: Scalars['ID'];
  /** System stage field */
  stage: Stage;
};

export type CallToActionConnectInput = {
  /** Allow to specify document position in list of connected documents, will default to appending at end of list */
  position?: InputMaybe<ConnectPositionInput>;
  /** Document to connect */
  where: CallToActionWhereUniqueInput;
};

/** A connection to a list of items. */
export type CallToActionConnection = {
  __typename?: 'CallToActionConnection';
  aggregate: Aggregate;
  /** A list of edges. */
  edges: Array<CallToActionEdge>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
};

export type CallToActionCreateInput = {
  contentAlign?: InputMaybe<ContentAlign>;
  ctaClass?: InputMaybe<Scalars['String']>;
  ctaLabel?: InputMaybe<Scalars['String']>;
  ctaLink?: InputMaybe<Scalars['String']>;
  ctaPrimary?: InputMaybe<Scalars['Boolean']>;
};

export type CallToActionCreateManyInlineInput = {
  /** Create and connect multiple existing CallToAction documents */
  create?: InputMaybe<Array<CallToActionCreateInput>>;
};

export type CallToActionCreateOneInlineInput = {
  /** Create and connect one CallToAction document */
  create?: InputMaybe<CallToActionCreateInput>;
};

export type CallToActionCreateWithPositionInput = {
  /** Document to create */
  data: CallToActionCreateInput;
  /** Position in the list of existing component instances, will default to appending at the end of list */
  position?: InputMaybe<ConnectPositionInput>;
};

/** An edge in a connection. */
export type CallToActionEdge = {
  __typename?: 'CallToActionEdge';
  /** A cursor for use in pagination. */
  cursor: Scalars['String'];
  /** The item at the end of the edge. */
  node: CallToAction;
};

/** Identifies documents */
export type CallToActionManyWhereInput = {
  /** Logical AND on all given filters. */
  AND?: InputMaybe<Array<CallToActionWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: InputMaybe<Array<CallToActionWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: InputMaybe<Array<CallToActionWhereInput>>;
  /** Contains search across all appropriate fields. */
  _search?: InputMaybe<Scalars['String']>;
  contentAlign?: InputMaybe<ContentAlign>;
  /** All values that are contained in given list. */
  contentAlign_in?: InputMaybe<Array<InputMaybe<ContentAlign>>>;
  /** Any other value that exists and is not equal to the given value. */
  contentAlign_not?: InputMaybe<ContentAlign>;
  /** All values that are not contained in given list. */
  contentAlign_not_in?: InputMaybe<Array<InputMaybe<ContentAlign>>>;
  ctaClass?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  ctaClass_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  ctaClass_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  ctaClass_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Any other value that exists and is not equal to the given value. */
  ctaClass_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  ctaClass_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  ctaClass_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  ctaClass_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  ctaClass_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  ctaClass_starts_with?: InputMaybe<Scalars['String']>;
  ctaLabel?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  ctaLabel_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  ctaLabel_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  ctaLabel_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Any other value that exists and is not equal to the given value. */
  ctaLabel_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  ctaLabel_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  ctaLabel_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  ctaLabel_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  ctaLabel_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  ctaLabel_starts_with?: InputMaybe<Scalars['String']>;
  ctaLink?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  ctaLink_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  ctaLink_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  ctaLink_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Any other value that exists and is not equal to the given value. */
  ctaLink_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  ctaLink_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  ctaLink_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  ctaLink_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  ctaLink_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  ctaLink_starts_with?: InputMaybe<Scalars['String']>;
  ctaPrimary?: InputMaybe<Scalars['Boolean']>;
  /** Any other value that exists and is not equal to the given value. */
  ctaPrimary_not?: InputMaybe<Scalars['Boolean']>;
  id?: InputMaybe<Scalars['ID']>;
  /** All values containing the given string. */
  id_contains?: InputMaybe<Scalars['ID']>;
  /** All values ending with the given string. */
  id_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are contained in given list. */
  id_in?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** Any other value that exists and is not equal to the given value. */
  id_not?: InputMaybe<Scalars['ID']>;
  /** All values not containing the given string. */
  id_not_contains?: InputMaybe<Scalars['ID']>;
  /** All values not ending with the given string */
  id_not_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are not contained in given list. */
  id_not_in?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** All values not starting with the given string. */
  id_not_starts_with?: InputMaybe<Scalars['ID']>;
  /** All values starting with the given string. */
  id_starts_with?: InputMaybe<Scalars['ID']>;
};

export enum CallToActionOrderByInput {
  ContentAlignAsc = 'contentAlign_ASC',
  ContentAlignDesc = 'contentAlign_DESC',
  CtaClassAsc = 'ctaClass_ASC',
  CtaClassDesc = 'ctaClass_DESC',
  CtaLabelAsc = 'ctaLabel_ASC',
  CtaLabelDesc = 'ctaLabel_DESC',
  CtaLinkAsc = 'ctaLink_ASC',
  CtaLinkDesc = 'ctaLink_DESC',
  CtaPrimaryAsc = 'ctaPrimary_ASC',
  CtaPrimaryDesc = 'ctaPrimary_DESC',
  IdAsc = 'id_ASC',
  IdDesc = 'id_DESC'
}

export type CallToActionParent = HeroMediaSlider | LayoutBlockColumn;

export type CallToActionParentConnectInput = {
  HeroMediaSlider?: InputMaybe<HeroMediaSliderConnectInput>;
  LayoutBlockColumn?: InputMaybe<LayoutBlockColumnConnectInput>;
};

export type CallToActionParentCreateInput = {
  HeroMediaSlider?: InputMaybe<HeroMediaSliderCreateInput>;
  LayoutBlockColumn?: InputMaybe<LayoutBlockColumnCreateInput>;
};

export type CallToActionParentCreateManyInlineInput = {
  /** Create and connect multiple existing CallToActionParent documents */
  create?: InputMaybe<Array<CallToActionParentCreateInput>>;
};

export type CallToActionParentCreateOneInlineInput = {
  /** Create and connect one CallToActionParent document */
  create?: InputMaybe<CallToActionParentCreateInput>;
};

export type CallToActionParentCreateWithPositionInput = {
  HeroMediaSlider?: InputMaybe<HeroMediaSliderCreateWithPositionInput>;
  LayoutBlockColumn?: InputMaybe<LayoutBlockColumnCreateWithPositionInput>;
};

export type CallToActionParentUpdateInput = {
  HeroMediaSlider?: InputMaybe<HeroMediaSliderUpdateInput>;
  LayoutBlockColumn?: InputMaybe<LayoutBlockColumnUpdateInput>;
};

export type CallToActionParentUpdateManyInlineInput = {
  /** Create and connect multiple CallToActionParent component instances */
  create?: InputMaybe<Array<CallToActionParentCreateWithPositionInput>>;
  /** Delete multiple CallToActionParent documents */
  delete?: InputMaybe<Array<CallToActionParentWhereUniqueInput>>;
  /** Update multiple CallToActionParent component instances */
  update?: InputMaybe<Array<CallToActionParentUpdateWithNestedWhereUniqueAndPositionInput>>;
  /** Upsert multiple CallToActionParent component instances */
  upsert?: InputMaybe<Array<CallToActionParentUpsertWithNestedWhereUniqueAndPositionInput>>;
};

export type CallToActionParentUpdateManyWithNestedWhereInput = {
  HeroMediaSlider?: InputMaybe<HeroMediaSliderUpdateManyWithNestedWhereInput>;
  LayoutBlockColumn?: InputMaybe<LayoutBlockColumnUpdateManyWithNestedWhereInput>;
};

export type CallToActionParentUpdateOneInlineInput = {
  /** Create and connect one CallToActionParent document */
  create?: InputMaybe<CallToActionParentCreateInput>;
  /** Delete currently connected CallToActionParent document */
  delete?: InputMaybe<Scalars['Boolean']>;
  /** Update single CallToActionParent document */
  update?: InputMaybe<CallToActionParentUpdateWithNestedWhereUniqueInput>;
  /** Upsert single CallToActionParent document */
  upsert?: InputMaybe<CallToActionParentUpsertWithNestedWhereUniqueInput>;
};

export type CallToActionParentUpdateWithNestedWhereUniqueAndPositionInput = {
  HeroMediaSlider?: InputMaybe<HeroMediaSliderUpdateWithNestedWhereUniqueAndPositionInput>;
  LayoutBlockColumn?: InputMaybe<LayoutBlockColumnUpdateWithNestedWhereUniqueAndPositionInput>;
};

export type CallToActionParentUpdateWithNestedWhereUniqueInput = {
  HeroMediaSlider?: InputMaybe<HeroMediaSliderUpdateWithNestedWhereUniqueInput>;
  LayoutBlockColumn?: InputMaybe<LayoutBlockColumnUpdateWithNestedWhereUniqueInput>;
};

export type CallToActionParentUpsertWithNestedWhereUniqueAndPositionInput = {
  HeroMediaSlider?: InputMaybe<HeroMediaSliderUpsertWithNestedWhereUniqueAndPositionInput>;
  LayoutBlockColumn?: InputMaybe<LayoutBlockColumnUpsertWithNestedWhereUniqueAndPositionInput>;
};

export type CallToActionParentUpsertWithNestedWhereUniqueInput = {
  HeroMediaSlider?: InputMaybe<HeroMediaSliderUpsertWithNestedWhereUniqueInput>;
  LayoutBlockColumn?: InputMaybe<LayoutBlockColumnUpsertWithNestedWhereUniqueInput>;
};

export type CallToActionParentWhereInput = {
  HeroMediaSlider?: InputMaybe<HeroMediaSliderWhereInput>;
  LayoutBlockColumn?: InputMaybe<LayoutBlockColumnWhereInput>;
};

export type CallToActionParentWhereUniqueInput = {
  HeroMediaSlider?: InputMaybe<HeroMediaSliderWhereUniqueInput>;
  LayoutBlockColumn?: InputMaybe<LayoutBlockColumnWhereUniqueInput>;
};

export type CallToActionUpdateInput = {
  contentAlign?: InputMaybe<ContentAlign>;
  ctaClass?: InputMaybe<Scalars['String']>;
  ctaLabel?: InputMaybe<Scalars['String']>;
  ctaLink?: InputMaybe<Scalars['String']>;
  ctaPrimary?: InputMaybe<Scalars['Boolean']>;
};

export type CallToActionUpdateManyInlineInput = {
  /** Create and connect multiple CallToAction component instances */
  create?: InputMaybe<Array<CallToActionCreateWithPositionInput>>;
  /** Delete multiple CallToAction documents */
  delete?: InputMaybe<Array<CallToActionWhereUniqueInput>>;
  /** Update multiple CallToAction component instances */
  update?: InputMaybe<Array<CallToActionUpdateWithNestedWhereUniqueAndPositionInput>>;
  /** Upsert multiple CallToAction component instances */
  upsert?: InputMaybe<Array<CallToActionUpsertWithNestedWhereUniqueAndPositionInput>>;
};

export type CallToActionUpdateManyInput = {
  contentAlign?: InputMaybe<ContentAlign>;
  ctaClass?: InputMaybe<Scalars['String']>;
  ctaLabel?: InputMaybe<Scalars['String']>;
  ctaLink?: InputMaybe<Scalars['String']>;
  ctaPrimary?: InputMaybe<Scalars['Boolean']>;
};

export type CallToActionUpdateManyWithNestedWhereInput = {
  /** Update many input */
  data: CallToActionUpdateManyInput;
  /** Document search */
  where: CallToActionWhereInput;
};

export type CallToActionUpdateOneInlineInput = {
  /** Create and connect one CallToAction document */
  create?: InputMaybe<CallToActionCreateInput>;
  /** Delete currently connected CallToAction document */
  delete?: InputMaybe<Scalars['Boolean']>;
  /** Update single CallToAction document */
  update?: InputMaybe<CallToActionUpdateWithNestedWhereUniqueInput>;
  /** Upsert single CallToAction document */
  upsert?: InputMaybe<CallToActionUpsertWithNestedWhereUniqueInput>;
};

export type CallToActionUpdateWithNestedWhereUniqueAndPositionInput = {
  /** Document to update */
  data?: InputMaybe<CallToActionUpdateInput>;
  /** Position in the list of existing component instances, will default to appending at the end of list */
  position?: InputMaybe<ConnectPositionInput>;
  /** Unique component instance search */
  where: CallToActionWhereUniqueInput;
};

export type CallToActionUpdateWithNestedWhereUniqueInput = {
  /** Document to update */
  data: CallToActionUpdateInput;
  /** Unique document search */
  where: CallToActionWhereUniqueInput;
};

export type CallToActionUpsertInput = {
  /** Create document if it didn't exist */
  create: CallToActionCreateInput;
  /** Update document if it exists */
  update: CallToActionUpdateInput;
};

export type CallToActionUpsertWithNestedWhereUniqueAndPositionInput = {
  /** Document to upsert */
  data?: InputMaybe<CallToActionUpsertInput>;
  /** Position in the list of existing component instances, will default to appending at the end of list */
  position?: InputMaybe<ConnectPositionInput>;
  /** Unique component instance search */
  where: CallToActionWhereUniqueInput;
};

export type CallToActionUpsertWithNestedWhereUniqueInput = {
  /** Upsert data */
  data: CallToActionUpsertInput;
  /** Unique document search */
  where: CallToActionWhereUniqueInput;
};

/** Identifies documents */
export type CallToActionWhereInput = {
  /** Logical AND on all given filters. */
  AND?: InputMaybe<Array<CallToActionWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: InputMaybe<Array<CallToActionWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: InputMaybe<Array<CallToActionWhereInput>>;
  /** Contains search across all appropriate fields. */
  _search?: InputMaybe<Scalars['String']>;
  contentAlign?: InputMaybe<ContentAlign>;
  /** All values that are contained in given list. */
  contentAlign_in?: InputMaybe<Array<InputMaybe<ContentAlign>>>;
  /** Any other value that exists and is not equal to the given value. */
  contentAlign_not?: InputMaybe<ContentAlign>;
  /** All values that are not contained in given list. */
  contentAlign_not_in?: InputMaybe<Array<InputMaybe<ContentAlign>>>;
  ctaClass?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  ctaClass_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  ctaClass_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  ctaClass_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Any other value that exists and is not equal to the given value. */
  ctaClass_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  ctaClass_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  ctaClass_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  ctaClass_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  ctaClass_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  ctaClass_starts_with?: InputMaybe<Scalars['String']>;
  ctaLabel?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  ctaLabel_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  ctaLabel_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  ctaLabel_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Any other value that exists and is not equal to the given value. */
  ctaLabel_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  ctaLabel_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  ctaLabel_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  ctaLabel_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  ctaLabel_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  ctaLabel_starts_with?: InputMaybe<Scalars['String']>;
  ctaLink?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  ctaLink_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  ctaLink_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  ctaLink_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Any other value that exists and is not equal to the given value. */
  ctaLink_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  ctaLink_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  ctaLink_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  ctaLink_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  ctaLink_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  ctaLink_starts_with?: InputMaybe<Scalars['String']>;
  ctaPrimary?: InputMaybe<Scalars['Boolean']>;
  /** Any other value that exists and is not equal to the given value. */
  ctaPrimary_not?: InputMaybe<Scalars['Boolean']>;
  id?: InputMaybe<Scalars['ID']>;
  /** All values containing the given string. */
  id_contains?: InputMaybe<Scalars['ID']>;
  /** All values ending with the given string. */
  id_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are contained in given list. */
  id_in?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** Any other value that exists and is not equal to the given value. */
  id_not?: InputMaybe<Scalars['ID']>;
  /** All values not containing the given string. */
  id_not_contains?: InputMaybe<Scalars['ID']>;
  /** All values not ending with the given string */
  id_not_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are not contained in given list. */
  id_not_in?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** All values not starting with the given string. */
  id_not_starts_with?: InputMaybe<Scalars['ID']>;
  /** All values starting with the given string. */
  id_starts_with?: InputMaybe<Scalars['ID']>;
};

/** References CallToAction record uniquely */
export type CallToActionWhereUniqueInput = {
  id?: InputMaybe<Scalars['ID']>;
};

/** Representing a color value comprising of HEX, RGBA and css color values */
export type Color = {
  __typename?: 'Color';
  css: Scalars['String'];
  hex: Scalars['Hex'];
  rgba: Rgba;
};

/** Accepts either HEX or RGBA color value. At least one of hex or rgba value should be passed. If both are passed RGBA is used. */
export type ColorInput = {
  hex?: InputMaybe<Scalars['Hex']>;
  rgba?: InputMaybe<RgbaInput>;
};

export type ConnectPositionInput = {
  /** Connect document after specified document */
  after?: InputMaybe<Scalars['ID']>;
  /** Connect document before specified document */
  before?: InputMaybe<Scalars['ID']>;
  /** Connect document at last position */
  end?: InputMaybe<Scalars['Boolean']>;
  /** Connect document at first position */
  start?: InputMaybe<Scalars['Boolean']>;
};

export type Contact = Entity & Node & {
  __typename?: 'Contact';
  contactAddress?: Maybe<Scalars['String']>;
  contactAvatar?: Maybe<Asset>;
  contactCalendly?: Maybe<Scalars['String']>;
  contactEmail?: Maybe<Scalars['String']>;
  contactGoogleAddressLink?: Maybe<Scalars['String']>;
  contactLinkedin?: Maybe<Scalars['String']>;
  contactName: Scalars['String'];
  contactPhone?: Maybe<Scalars['String']>;
  contactQuery: ContactQueries;
  contactTitle?: Maybe<Scalars['String']>;
  contactWhatsapp?: Maybe<Scalars['String']>;
  /** The time the document was created */
  createdAt: Scalars['DateTime'];
  /** User that created this document */
  createdBy?: Maybe<User>;
  /** Get the document in other stages */
  documentInStages: Array<Contact>;
  /** List of Contact versions */
  history: Array<Version>;
  /** The unique identifier */
  id: Scalars['ID'];
  /** The time the document was published. Null on documents in draft stage. */
  publishedAt?: Maybe<Scalars['DateTime']>;
  /** User that last published this document */
  publishedBy?: Maybe<User>;
  scheduledIn: Array<ScheduledOperation>;
  /** System stage field */
  stage: Stage;
  /** The time the document was updated */
  updatedAt: Scalars['DateTime'];
  /** User that last updated this document */
  updatedBy?: Maybe<User>;
};


export type ContactContactAvatarArgs = {
  forceParentLocale?: InputMaybe<Scalars['Boolean']>;
  locales?: InputMaybe<Array<Locale>>;
};


export type ContactCreatedByArgs = {
  forceParentLocale?: InputMaybe<Scalars['Boolean']>;
  locales?: InputMaybe<Array<Locale>>;
};


export type ContactDocumentInStagesArgs = {
  includeCurrent?: Scalars['Boolean'];
  inheritLocale?: Scalars['Boolean'];
  stages?: Array<Stage>;
};


export type ContactHistoryArgs = {
  limit?: Scalars['Int'];
  skip?: Scalars['Int'];
  stageOverride?: InputMaybe<Stage>;
};


export type ContactPublishedByArgs = {
  forceParentLocale?: InputMaybe<Scalars['Boolean']>;
  locales?: InputMaybe<Array<Locale>>;
};


export type ContactScheduledInArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  forceParentLocale?: InputMaybe<Scalars['Boolean']>;
  last?: InputMaybe<Scalars['Int']>;
  locales?: InputMaybe<Array<Locale>>;
  skip?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<ScheduledOperationWhereInput>;
};


export type ContactUpdatedByArgs = {
  forceParentLocale?: InputMaybe<Scalars['Boolean']>;
  locales?: InputMaybe<Array<Locale>>;
};

export type ContactConnectInput = {
  /** Allow to specify document position in list of connected documents, will default to appending at end of list */
  position?: InputMaybe<ConnectPositionInput>;
  /** Document to connect */
  where: ContactWhereUniqueInput;
};

/** A connection to a list of items. */
export type ContactConnection = {
  __typename?: 'ContactConnection';
  aggregate: Aggregate;
  /** A list of edges. */
  edges: Array<ContactEdge>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
};

export type ContactCreateInput = {
  contactAddress?: InputMaybe<Scalars['String']>;
  contactAvatar?: InputMaybe<AssetCreateOneInlineInput>;
  contactCalendly?: InputMaybe<Scalars['String']>;
  contactEmail?: InputMaybe<Scalars['String']>;
  contactGoogleAddressLink?: InputMaybe<Scalars['String']>;
  contactLinkedin?: InputMaybe<Scalars['String']>;
  contactName: Scalars['String'];
  contactPhone?: InputMaybe<Scalars['String']>;
  contactQuery: ContactQueries;
  contactTitle?: InputMaybe<Scalars['String']>;
  contactWhatsapp?: InputMaybe<Scalars['String']>;
  createdAt?: InputMaybe<Scalars['DateTime']>;
  updatedAt?: InputMaybe<Scalars['DateTime']>;
};

export type ContactCreateManyInlineInput = {
  /** Connect multiple existing Contact documents */
  connect?: InputMaybe<Array<ContactWhereUniqueInput>>;
  /** Create and connect multiple existing Contact documents */
  create?: InputMaybe<Array<ContactCreateInput>>;
};

export type ContactCreateOneInlineInput = {
  /** Connect one existing Contact document */
  connect?: InputMaybe<ContactWhereUniqueInput>;
  /** Create and connect one Contact document */
  create?: InputMaybe<ContactCreateInput>;
};

/** An edge in a connection. */
export type ContactEdge = {
  __typename?: 'ContactEdge';
  /** A cursor for use in pagination. */
  cursor: Scalars['String'];
  /** The item at the end of the edge. */
  node: Contact;
};

export type ContactForm = Entity & {
  __typename?: 'ContactForm';
  calendlyLink?: Maybe<Scalars['String']>;
  contactFormDescription?: Maybe<RichText>;
  contactFormTitle?: Maybe<Scalars['String']>;
  cssClass?: Maybe<Scalars['String']>;
  hubspotFormId?: Maybe<Scalars['String']>;
  hubspotPortalId?: Maybe<Scalars['String']>;
  /** The unique identifier */
  id: Scalars['ID'];
  jotformUrl?: Maybe<Scalars['String']>;
  netlifyContactForm?: Maybe<Scalars['Boolean']>;
  netlifyFormFields: Array<NetlifyFormFields>;
  /** System stage field */
  stage: Stage;
};

export type ContactFormConnectInput = {
  /** Allow to specify document position in list of connected documents, will default to appending at end of list */
  position?: InputMaybe<ConnectPositionInput>;
  /** Document to connect */
  where: ContactFormWhereUniqueInput;
};

/** A connection to a list of items. */
export type ContactFormConnection = {
  __typename?: 'ContactFormConnection';
  aggregate: Aggregate;
  /** A list of edges. */
  edges: Array<ContactFormEdge>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
};

export type ContactFormCreateInput = {
  calendlyLink?: InputMaybe<Scalars['String']>;
  contactFormDescription?: InputMaybe<Scalars['RichTextAST']>;
  contactFormTitle?: InputMaybe<Scalars['String']>;
  cssClass?: InputMaybe<Scalars['String']>;
  hubspotFormId?: InputMaybe<Scalars['String']>;
  hubspotPortalId?: InputMaybe<Scalars['String']>;
  jotformUrl?: InputMaybe<Scalars['String']>;
  netlifyContactForm?: InputMaybe<Scalars['Boolean']>;
  netlifyFormFields?: InputMaybe<Array<NetlifyFormFields>>;
};

export type ContactFormCreateManyInlineInput = {
  /** Create and connect multiple existing ContactForm documents */
  create?: InputMaybe<Array<ContactFormCreateInput>>;
};

export type ContactFormCreateOneInlineInput = {
  /** Create and connect one ContactForm document */
  create?: InputMaybe<ContactFormCreateInput>;
};

export type ContactFormCreateWithPositionInput = {
  /** Document to create */
  data: ContactFormCreateInput;
  /** Position in the list of existing component instances, will default to appending at the end of list */
  position?: InputMaybe<ConnectPositionInput>;
};

/** An edge in a connection. */
export type ContactFormEdge = {
  __typename?: 'ContactFormEdge';
  /** A cursor for use in pagination. */
  cursor: Scalars['String'];
  /** The item at the end of the edge. */
  node: ContactForm;
};

/** Identifies documents */
export type ContactFormManyWhereInput = {
  /** Logical AND on all given filters. */
  AND?: InputMaybe<Array<ContactFormWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: InputMaybe<Array<ContactFormWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: InputMaybe<Array<ContactFormWhereInput>>;
  /** Contains search across all appropriate fields. */
  _search?: InputMaybe<Scalars['String']>;
  calendlyLink?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  calendlyLink_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  calendlyLink_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  calendlyLink_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Any other value that exists and is not equal to the given value. */
  calendlyLink_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  calendlyLink_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  calendlyLink_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  calendlyLink_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  calendlyLink_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  calendlyLink_starts_with?: InputMaybe<Scalars['String']>;
  contactFormTitle?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  contactFormTitle_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  contactFormTitle_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  contactFormTitle_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Any other value that exists and is not equal to the given value. */
  contactFormTitle_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  contactFormTitle_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  contactFormTitle_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  contactFormTitle_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  contactFormTitle_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  contactFormTitle_starts_with?: InputMaybe<Scalars['String']>;
  cssClass?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  cssClass_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  cssClass_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  cssClass_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Any other value that exists and is not equal to the given value. */
  cssClass_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  cssClass_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  cssClass_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  cssClass_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  cssClass_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  cssClass_starts_with?: InputMaybe<Scalars['String']>;
  hubspotFormId?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  hubspotFormId_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  hubspotFormId_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  hubspotFormId_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Any other value that exists and is not equal to the given value. */
  hubspotFormId_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  hubspotFormId_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  hubspotFormId_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  hubspotFormId_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  hubspotFormId_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  hubspotFormId_starts_with?: InputMaybe<Scalars['String']>;
  hubspotPortalId?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  hubspotPortalId_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  hubspotPortalId_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  hubspotPortalId_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Any other value that exists and is not equal to the given value. */
  hubspotPortalId_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  hubspotPortalId_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  hubspotPortalId_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  hubspotPortalId_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  hubspotPortalId_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  hubspotPortalId_starts_with?: InputMaybe<Scalars['String']>;
  id?: InputMaybe<Scalars['ID']>;
  /** All values containing the given string. */
  id_contains?: InputMaybe<Scalars['ID']>;
  /** All values ending with the given string. */
  id_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are contained in given list. */
  id_in?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** Any other value that exists and is not equal to the given value. */
  id_not?: InputMaybe<Scalars['ID']>;
  /** All values not containing the given string. */
  id_not_contains?: InputMaybe<Scalars['ID']>;
  /** All values not ending with the given string */
  id_not_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are not contained in given list. */
  id_not_in?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** All values not starting with the given string. */
  id_not_starts_with?: InputMaybe<Scalars['ID']>;
  /** All values starting with the given string. */
  id_starts_with?: InputMaybe<Scalars['ID']>;
  jotformUrl?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  jotformUrl_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  jotformUrl_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  jotformUrl_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Any other value that exists and is not equal to the given value. */
  jotformUrl_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  jotformUrl_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  jotformUrl_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  jotformUrl_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  jotformUrl_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  jotformUrl_starts_with?: InputMaybe<Scalars['String']>;
  netlifyContactForm?: InputMaybe<Scalars['Boolean']>;
  /** Any other value that exists and is not equal to the given value. */
  netlifyContactForm_not?: InputMaybe<Scalars['Boolean']>;
  /** Matches if the field array contains *all* items provided to the filter and order does match */
  netlifyFormFields?: InputMaybe<Array<NetlifyFormFields>>;
  /** Matches if the field array contains *all* items provided to the filter */
  netlifyFormFields_contains_all?: InputMaybe<Array<NetlifyFormFields>>;
  /** Matches if the field array does not contain any of the items provided to the filter */
  netlifyFormFields_contains_none?: InputMaybe<Array<NetlifyFormFields>>;
  /** Matches if the field array contains at least one item provided to the filter */
  netlifyFormFields_contains_some?: InputMaybe<Array<NetlifyFormFields>>;
  /** Matches if the field array does not contains *all* items provided to the filter or order does not match */
  netlifyFormFields_not?: InputMaybe<Array<NetlifyFormFields>>;
};

export enum ContactFormOrderByInput {
  CalendlyLinkAsc = 'calendlyLink_ASC',
  CalendlyLinkDesc = 'calendlyLink_DESC',
  ContactFormTitleAsc = 'contactFormTitle_ASC',
  ContactFormTitleDesc = 'contactFormTitle_DESC',
  CssClassAsc = 'cssClass_ASC',
  CssClassDesc = 'cssClass_DESC',
  HubspotFormIdAsc = 'hubspotFormId_ASC',
  HubspotFormIdDesc = 'hubspotFormId_DESC',
  HubspotPortalIdAsc = 'hubspotPortalId_ASC',
  HubspotPortalIdDesc = 'hubspotPortalId_DESC',
  IdAsc = 'id_ASC',
  IdDesc = 'id_DESC',
  JotformUrlAsc = 'jotformUrl_ASC',
  JotformUrlDesc = 'jotformUrl_DESC',
  NetlifyContactFormAsc = 'netlifyContactForm_ASC',
  NetlifyContactFormDesc = 'netlifyContactForm_DESC',
  NetlifyFormFieldsAsc = 'netlifyFormFields_ASC',
  NetlifyFormFieldsDesc = 'netlifyFormFields_DESC'
}

export type ContactFormParent = LayoutBlockColumn;

export type ContactFormParentConnectInput = {
  LayoutBlockColumn?: InputMaybe<LayoutBlockColumnConnectInput>;
};

export type ContactFormParentCreateInput = {
  LayoutBlockColumn?: InputMaybe<LayoutBlockColumnCreateInput>;
};

export type ContactFormParentCreateManyInlineInput = {
  /** Create and connect multiple existing ContactFormParent documents */
  create?: InputMaybe<Array<ContactFormParentCreateInput>>;
};

export type ContactFormParentCreateOneInlineInput = {
  /** Create and connect one ContactFormParent document */
  create?: InputMaybe<ContactFormParentCreateInput>;
};

export type ContactFormParentCreateWithPositionInput = {
  LayoutBlockColumn?: InputMaybe<LayoutBlockColumnCreateWithPositionInput>;
};

export type ContactFormParentUpdateInput = {
  LayoutBlockColumn?: InputMaybe<LayoutBlockColumnUpdateInput>;
};

export type ContactFormParentUpdateManyInlineInput = {
  /** Create and connect multiple ContactFormParent component instances */
  create?: InputMaybe<Array<ContactFormParentCreateWithPositionInput>>;
  /** Delete multiple ContactFormParent documents */
  delete?: InputMaybe<Array<ContactFormParentWhereUniqueInput>>;
  /** Update multiple ContactFormParent component instances */
  update?: InputMaybe<Array<ContactFormParentUpdateWithNestedWhereUniqueAndPositionInput>>;
  /** Upsert multiple ContactFormParent component instances */
  upsert?: InputMaybe<Array<ContactFormParentUpsertWithNestedWhereUniqueAndPositionInput>>;
};

export type ContactFormParentUpdateManyWithNestedWhereInput = {
  LayoutBlockColumn?: InputMaybe<LayoutBlockColumnUpdateManyWithNestedWhereInput>;
};

export type ContactFormParentUpdateOneInlineInput = {
  /** Create and connect one ContactFormParent document */
  create?: InputMaybe<ContactFormParentCreateInput>;
  /** Delete currently connected ContactFormParent document */
  delete?: InputMaybe<Scalars['Boolean']>;
  /** Update single ContactFormParent document */
  update?: InputMaybe<ContactFormParentUpdateWithNestedWhereUniqueInput>;
  /** Upsert single ContactFormParent document */
  upsert?: InputMaybe<ContactFormParentUpsertWithNestedWhereUniqueInput>;
};

export type ContactFormParentUpdateWithNestedWhereUniqueAndPositionInput = {
  LayoutBlockColumn?: InputMaybe<LayoutBlockColumnUpdateWithNestedWhereUniqueAndPositionInput>;
};

export type ContactFormParentUpdateWithNestedWhereUniqueInput = {
  LayoutBlockColumn?: InputMaybe<LayoutBlockColumnUpdateWithNestedWhereUniqueInput>;
};

export type ContactFormParentUpsertWithNestedWhereUniqueAndPositionInput = {
  LayoutBlockColumn?: InputMaybe<LayoutBlockColumnUpsertWithNestedWhereUniqueAndPositionInput>;
};

export type ContactFormParentUpsertWithNestedWhereUniqueInput = {
  LayoutBlockColumn?: InputMaybe<LayoutBlockColumnUpsertWithNestedWhereUniqueInput>;
};

export type ContactFormParentWhereInput = {
  LayoutBlockColumn?: InputMaybe<LayoutBlockColumnWhereInput>;
};

export type ContactFormParentWhereUniqueInput = {
  LayoutBlockColumn?: InputMaybe<LayoutBlockColumnWhereUniqueInput>;
};

export type ContactFormUpdateInput = {
  calendlyLink?: InputMaybe<Scalars['String']>;
  contactFormDescription?: InputMaybe<Scalars['RichTextAST']>;
  contactFormTitle?: InputMaybe<Scalars['String']>;
  cssClass?: InputMaybe<Scalars['String']>;
  hubspotFormId?: InputMaybe<Scalars['String']>;
  hubspotPortalId?: InputMaybe<Scalars['String']>;
  jotformUrl?: InputMaybe<Scalars['String']>;
  netlifyContactForm?: InputMaybe<Scalars['Boolean']>;
  netlifyFormFields?: InputMaybe<Array<NetlifyFormFields>>;
};

export type ContactFormUpdateManyInlineInput = {
  /** Create and connect multiple ContactForm component instances */
  create?: InputMaybe<Array<ContactFormCreateWithPositionInput>>;
  /** Delete multiple ContactForm documents */
  delete?: InputMaybe<Array<ContactFormWhereUniqueInput>>;
  /** Update multiple ContactForm component instances */
  update?: InputMaybe<Array<ContactFormUpdateWithNestedWhereUniqueAndPositionInput>>;
  /** Upsert multiple ContactForm component instances */
  upsert?: InputMaybe<Array<ContactFormUpsertWithNestedWhereUniqueAndPositionInput>>;
};

export type ContactFormUpdateManyInput = {
  calendlyLink?: InputMaybe<Scalars['String']>;
  contactFormDescription?: InputMaybe<Scalars['RichTextAST']>;
  contactFormTitle?: InputMaybe<Scalars['String']>;
  cssClass?: InputMaybe<Scalars['String']>;
  hubspotFormId?: InputMaybe<Scalars['String']>;
  hubspotPortalId?: InputMaybe<Scalars['String']>;
  jotformUrl?: InputMaybe<Scalars['String']>;
  netlifyContactForm?: InputMaybe<Scalars['Boolean']>;
  netlifyFormFields?: InputMaybe<Array<NetlifyFormFields>>;
};

export type ContactFormUpdateManyWithNestedWhereInput = {
  /** Update many input */
  data: ContactFormUpdateManyInput;
  /** Document search */
  where: ContactFormWhereInput;
};

export type ContactFormUpdateOneInlineInput = {
  /** Create and connect one ContactForm document */
  create?: InputMaybe<ContactFormCreateInput>;
  /** Delete currently connected ContactForm document */
  delete?: InputMaybe<Scalars['Boolean']>;
  /** Update single ContactForm document */
  update?: InputMaybe<ContactFormUpdateWithNestedWhereUniqueInput>;
  /** Upsert single ContactForm document */
  upsert?: InputMaybe<ContactFormUpsertWithNestedWhereUniqueInput>;
};

export type ContactFormUpdateWithNestedWhereUniqueAndPositionInput = {
  /** Document to update */
  data?: InputMaybe<ContactFormUpdateInput>;
  /** Position in the list of existing component instances, will default to appending at the end of list */
  position?: InputMaybe<ConnectPositionInput>;
  /** Unique component instance search */
  where: ContactFormWhereUniqueInput;
};

export type ContactFormUpdateWithNestedWhereUniqueInput = {
  /** Document to update */
  data: ContactFormUpdateInput;
  /** Unique document search */
  where: ContactFormWhereUniqueInput;
};

export type ContactFormUpsertInput = {
  /** Create document if it didn't exist */
  create: ContactFormCreateInput;
  /** Update document if it exists */
  update: ContactFormUpdateInput;
};

export type ContactFormUpsertWithNestedWhereUniqueAndPositionInput = {
  /** Document to upsert */
  data?: InputMaybe<ContactFormUpsertInput>;
  /** Position in the list of existing component instances, will default to appending at the end of list */
  position?: InputMaybe<ConnectPositionInput>;
  /** Unique component instance search */
  where: ContactFormWhereUniqueInput;
};

export type ContactFormUpsertWithNestedWhereUniqueInput = {
  /** Upsert data */
  data: ContactFormUpsertInput;
  /** Unique document search */
  where: ContactFormWhereUniqueInput;
};

/** Identifies documents */
export type ContactFormWhereInput = {
  /** Logical AND on all given filters. */
  AND?: InputMaybe<Array<ContactFormWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: InputMaybe<Array<ContactFormWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: InputMaybe<Array<ContactFormWhereInput>>;
  /** Contains search across all appropriate fields. */
  _search?: InputMaybe<Scalars['String']>;
  calendlyLink?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  calendlyLink_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  calendlyLink_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  calendlyLink_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Any other value that exists and is not equal to the given value. */
  calendlyLink_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  calendlyLink_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  calendlyLink_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  calendlyLink_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  calendlyLink_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  calendlyLink_starts_with?: InputMaybe<Scalars['String']>;
  contactFormTitle?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  contactFormTitle_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  contactFormTitle_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  contactFormTitle_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Any other value that exists and is not equal to the given value. */
  contactFormTitle_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  contactFormTitle_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  contactFormTitle_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  contactFormTitle_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  contactFormTitle_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  contactFormTitle_starts_with?: InputMaybe<Scalars['String']>;
  cssClass?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  cssClass_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  cssClass_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  cssClass_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Any other value that exists and is not equal to the given value. */
  cssClass_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  cssClass_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  cssClass_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  cssClass_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  cssClass_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  cssClass_starts_with?: InputMaybe<Scalars['String']>;
  hubspotFormId?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  hubspotFormId_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  hubspotFormId_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  hubspotFormId_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Any other value that exists and is not equal to the given value. */
  hubspotFormId_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  hubspotFormId_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  hubspotFormId_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  hubspotFormId_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  hubspotFormId_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  hubspotFormId_starts_with?: InputMaybe<Scalars['String']>;
  hubspotPortalId?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  hubspotPortalId_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  hubspotPortalId_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  hubspotPortalId_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Any other value that exists and is not equal to the given value. */
  hubspotPortalId_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  hubspotPortalId_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  hubspotPortalId_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  hubspotPortalId_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  hubspotPortalId_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  hubspotPortalId_starts_with?: InputMaybe<Scalars['String']>;
  id?: InputMaybe<Scalars['ID']>;
  /** All values containing the given string. */
  id_contains?: InputMaybe<Scalars['ID']>;
  /** All values ending with the given string. */
  id_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are contained in given list. */
  id_in?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** Any other value that exists and is not equal to the given value. */
  id_not?: InputMaybe<Scalars['ID']>;
  /** All values not containing the given string. */
  id_not_contains?: InputMaybe<Scalars['ID']>;
  /** All values not ending with the given string */
  id_not_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are not contained in given list. */
  id_not_in?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** All values not starting with the given string. */
  id_not_starts_with?: InputMaybe<Scalars['ID']>;
  /** All values starting with the given string. */
  id_starts_with?: InputMaybe<Scalars['ID']>;
  jotformUrl?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  jotformUrl_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  jotformUrl_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  jotformUrl_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Any other value that exists and is not equal to the given value. */
  jotformUrl_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  jotformUrl_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  jotformUrl_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  jotformUrl_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  jotformUrl_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  jotformUrl_starts_with?: InputMaybe<Scalars['String']>;
  netlifyContactForm?: InputMaybe<Scalars['Boolean']>;
  /** Any other value that exists and is not equal to the given value. */
  netlifyContactForm_not?: InputMaybe<Scalars['Boolean']>;
  /** Matches if the field array contains *all* items provided to the filter and order does match */
  netlifyFormFields?: InputMaybe<Array<NetlifyFormFields>>;
  /** Matches if the field array contains *all* items provided to the filter */
  netlifyFormFields_contains_all?: InputMaybe<Array<NetlifyFormFields>>;
  /** Matches if the field array does not contain any of the items provided to the filter */
  netlifyFormFields_contains_none?: InputMaybe<Array<NetlifyFormFields>>;
  /** Matches if the field array contains at least one item provided to the filter */
  netlifyFormFields_contains_some?: InputMaybe<Array<NetlifyFormFields>>;
  /** Matches if the field array does not contains *all* items provided to the filter or order does not match */
  netlifyFormFields_not?: InputMaybe<Array<NetlifyFormFields>>;
};

/** References ContactForm record uniquely */
export type ContactFormWhereUniqueInput = {
  id?: InputMaybe<Scalars['ID']>;
};

/** Identifies documents */
export type ContactManyWhereInput = {
  /** Logical AND on all given filters. */
  AND?: InputMaybe<Array<ContactWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: InputMaybe<Array<ContactWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: InputMaybe<Array<ContactWhereInput>>;
  /** Contains search across all appropriate fields. */
  _search?: InputMaybe<Scalars['String']>;
  contactAddress?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  contactAddress_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  contactAddress_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  contactAddress_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Any other value that exists and is not equal to the given value. */
  contactAddress_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  contactAddress_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  contactAddress_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  contactAddress_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  contactAddress_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  contactAddress_starts_with?: InputMaybe<Scalars['String']>;
  contactAvatar?: InputMaybe<AssetWhereInput>;
  contactCalendly?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  contactCalendly_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  contactCalendly_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  contactCalendly_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Any other value that exists and is not equal to the given value. */
  contactCalendly_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  contactCalendly_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  contactCalendly_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  contactCalendly_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  contactCalendly_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  contactCalendly_starts_with?: InputMaybe<Scalars['String']>;
  contactEmail?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  contactEmail_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  contactEmail_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  contactEmail_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Any other value that exists and is not equal to the given value. */
  contactEmail_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  contactEmail_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  contactEmail_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  contactEmail_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  contactEmail_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  contactEmail_starts_with?: InputMaybe<Scalars['String']>;
  contactGoogleAddressLink?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  contactGoogleAddressLink_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  contactGoogleAddressLink_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  contactGoogleAddressLink_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Any other value that exists and is not equal to the given value. */
  contactGoogleAddressLink_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  contactGoogleAddressLink_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  contactGoogleAddressLink_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  contactGoogleAddressLink_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  contactGoogleAddressLink_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  contactGoogleAddressLink_starts_with?: InputMaybe<Scalars['String']>;
  contactLinkedin?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  contactLinkedin_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  contactLinkedin_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  contactLinkedin_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Any other value that exists and is not equal to the given value. */
  contactLinkedin_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  contactLinkedin_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  contactLinkedin_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  contactLinkedin_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  contactLinkedin_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  contactLinkedin_starts_with?: InputMaybe<Scalars['String']>;
  contactName?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  contactName_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  contactName_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  contactName_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Any other value that exists and is not equal to the given value. */
  contactName_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  contactName_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  contactName_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  contactName_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  contactName_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  contactName_starts_with?: InputMaybe<Scalars['String']>;
  contactPhone?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  contactPhone_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  contactPhone_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  contactPhone_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Any other value that exists and is not equal to the given value. */
  contactPhone_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  contactPhone_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  contactPhone_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  contactPhone_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  contactPhone_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  contactPhone_starts_with?: InputMaybe<Scalars['String']>;
  contactQuery?: InputMaybe<ContactQueries>;
  /** All values that are contained in given list. */
  contactQuery_in?: InputMaybe<Array<InputMaybe<ContactQueries>>>;
  /** Any other value that exists and is not equal to the given value. */
  contactQuery_not?: InputMaybe<ContactQueries>;
  /** All values that are not contained in given list. */
  contactQuery_not_in?: InputMaybe<Array<InputMaybe<ContactQueries>>>;
  contactTitle?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  contactTitle_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  contactTitle_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  contactTitle_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Any other value that exists and is not equal to the given value. */
  contactTitle_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  contactTitle_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  contactTitle_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  contactTitle_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  contactTitle_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  contactTitle_starts_with?: InputMaybe<Scalars['String']>;
  contactWhatsapp?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  contactWhatsapp_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  contactWhatsapp_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  contactWhatsapp_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Any other value that exists and is not equal to the given value. */
  contactWhatsapp_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  contactWhatsapp_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  contactWhatsapp_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  contactWhatsapp_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  contactWhatsapp_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  contactWhatsapp_starts_with?: InputMaybe<Scalars['String']>;
  createdAt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  createdAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  createdAt_gte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  createdAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  /** All values less than the given value. */
  createdAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  createdAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** Any other value that exists and is not equal to the given value. */
  createdAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not contained in given list. */
  createdAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  createdBy?: InputMaybe<UserWhereInput>;
  documentInStages_every?: InputMaybe<ContactWhereStageInput>;
  documentInStages_none?: InputMaybe<ContactWhereStageInput>;
  documentInStages_some?: InputMaybe<ContactWhereStageInput>;
  id?: InputMaybe<Scalars['ID']>;
  /** All values containing the given string. */
  id_contains?: InputMaybe<Scalars['ID']>;
  /** All values ending with the given string. */
  id_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are contained in given list. */
  id_in?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** Any other value that exists and is not equal to the given value. */
  id_not?: InputMaybe<Scalars['ID']>;
  /** All values not containing the given string. */
  id_not_contains?: InputMaybe<Scalars['ID']>;
  /** All values not ending with the given string */
  id_not_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are not contained in given list. */
  id_not_in?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** All values not starting with the given string. */
  id_not_starts_with?: InputMaybe<Scalars['ID']>;
  /** All values starting with the given string. */
  id_starts_with?: InputMaybe<Scalars['ID']>;
  publishedAt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  publishedAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  publishedAt_gte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  publishedAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  /** All values less than the given value. */
  publishedAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  publishedAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** Any other value that exists and is not equal to the given value. */
  publishedAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not contained in given list. */
  publishedAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  publishedBy?: InputMaybe<UserWhereInput>;
  scheduledIn_every?: InputMaybe<ScheduledOperationWhereInput>;
  scheduledIn_none?: InputMaybe<ScheduledOperationWhereInput>;
  scheduledIn_some?: InputMaybe<ScheduledOperationWhereInput>;
  updatedAt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  updatedAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  updatedAt_gte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  updatedAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  /** All values less than the given value. */
  updatedAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  updatedAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** Any other value that exists and is not equal to the given value. */
  updatedAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not contained in given list. */
  updatedAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  updatedBy?: InputMaybe<UserWhereInput>;
};

export enum ContactOrderByInput {
  ContactAddressAsc = 'contactAddress_ASC',
  ContactAddressDesc = 'contactAddress_DESC',
  ContactCalendlyAsc = 'contactCalendly_ASC',
  ContactCalendlyDesc = 'contactCalendly_DESC',
  ContactEmailAsc = 'contactEmail_ASC',
  ContactEmailDesc = 'contactEmail_DESC',
  ContactGoogleAddressLinkAsc = 'contactGoogleAddressLink_ASC',
  ContactGoogleAddressLinkDesc = 'contactGoogleAddressLink_DESC',
  ContactLinkedinAsc = 'contactLinkedin_ASC',
  ContactLinkedinDesc = 'contactLinkedin_DESC',
  ContactNameAsc = 'contactName_ASC',
  ContactNameDesc = 'contactName_DESC',
  ContactPhoneAsc = 'contactPhone_ASC',
  ContactPhoneDesc = 'contactPhone_DESC',
  ContactQueryAsc = 'contactQuery_ASC',
  ContactQueryDesc = 'contactQuery_DESC',
  ContactTitleAsc = 'contactTitle_ASC',
  ContactTitleDesc = 'contactTitle_DESC',
  ContactWhatsappAsc = 'contactWhatsapp_ASC',
  ContactWhatsappDesc = 'contactWhatsapp_DESC',
  CreatedAtAsc = 'createdAt_ASC',
  CreatedAtDesc = 'createdAt_DESC',
  IdAsc = 'id_ASC',
  IdDesc = 'id_DESC',
  PublishedAtAsc = 'publishedAt_ASC',
  PublishedAtDesc = 'publishedAt_DESC',
  UpdatedAtAsc = 'updatedAt_ASC',
  UpdatedAtDesc = 'updatedAt_DESC'
}

export enum ContactQueries {
  Academia = 'academia',
  AlfredoS = 'alfredoS',
  Azteca = 'azteca',
  Carlos = 'carlos',
  DanielP = 'danielP',
  FranciscoB = 'franciscoB',
  NormaD = 'normaD',
  PacoB = 'pacoB',
  SaulR = 'saulR',
  TonyM = 'tonyM',
  VictorM = 'victorM'
}

export type ContactUpdateInput = {
  contactAddress?: InputMaybe<Scalars['String']>;
  contactAvatar?: InputMaybe<AssetUpdateOneInlineInput>;
  contactCalendly?: InputMaybe<Scalars['String']>;
  contactEmail?: InputMaybe<Scalars['String']>;
  contactGoogleAddressLink?: InputMaybe<Scalars['String']>;
  contactLinkedin?: InputMaybe<Scalars['String']>;
  contactName?: InputMaybe<Scalars['String']>;
  contactPhone?: InputMaybe<Scalars['String']>;
  contactQuery?: InputMaybe<ContactQueries>;
  contactTitle?: InputMaybe<Scalars['String']>;
  contactWhatsapp?: InputMaybe<Scalars['String']>;
};

export type ContactUpdateManyInlineInput = {
  /** Connect multiple existing Contact documents */
  connect?: InputMaybe<Array<ContactConnectInput>>;
  /** Create and connect multiple Contact documents */
  create?: InputMaybe<Array<ContactCreateInput>>;
  /** Delete multiple Contact documents */
  delete?: InputMaybe<Array<ContactWhereUniqueInput>>;
  /** Disconnect multiple Contact documents */
  disconnect?: InputMaybe<Array<ContactWhereUniqueInput>>;
  /** Override currently-connected documents with multiple existing Contact documents */
  set?: InputMaybe<Array<ContactWhereUniqueInput>>;
  /** Update multiple Contact documents */
  update?: InputMaybe<Array<ContactUpdateWithNestedWhereUniqueInput>>;
  /** Upsert multiple Contact documents */
  upsert?: InputMaybe<Array<ContactUpsertWithNestedWhereUniqueInput>>;
};

export type ContactUpdateManyInput = {
  contactAddress?: InputMaybe<Scalars['String']>;
  contactCalendly?: InputMaybe<Scalars['String']>;
  contactEmail?: InputMaybe<Scalars['String']>;
  contactGoogleAddressLink?: InputMaybe<Scalars['String']>;
  contactLinkedin?: InputMaybe<Scalars['String']>;
  contactName?: InputMaybe<Scalars['String']>;
  contactPhone?: InputMaybe<Scalars['String']>;
  contactQuery?: InputMaybe<ContactQueries>;
  contactTitle?: InputMaybe<Scalars['String']>;
  contactWhatsapp?: InputMaybe<Scalars['String']>;
};

export type ContactUpdateManyWithNestedWhereInput = {
  /** Update many input */
  data: ContactUpdateManyInput;
  /** Document search */
  where: ContactWhereInput;
};

export type ContactUpdateOneInlineInput = {
  /** Connect existing Contact document */
  connect?: InputMaybe<ContactWhereUniqueInput>;
  /** Create and connect one Contact document */
  create?: InputMaybe<ContactCreateInput>;
  /** Delete currently connected Contact document */
  delete?: InputMaybe<Scalars['Boolean']>;
  /** Disconnect currently connected Contact document */
  disconnect?: InputMaybe<Scalars['Boolean']>;
  /** Update single Contact document */
  update?: InputMaybe<ContactUpdateWithNestedWhereUniqueInput>;
  /** Upsert single Contact document */
  upsert?: InputMaybe<ContactUpsertWithNestedWhereUniqueInput>;
};

export type ContactUpdateWithNestedWhereUniqueInput = {
  /** Document to update */
  data: ContactUpdateInput;
  /** Unique document search */
  where: ContactWhereUniqueInput;
};

export type ContactUpsertInput = {
  /** Create document if it didn't exist */
  create: ContactCreateInput;
  /** Update document if it exists */
  update: ContactUpdateInput;
};

export type ContactUpsertWithNestedWhereUniqueInput = {
  /** Upsert data */
  data: ContactUpsertInput;
  /** Unique document search */
  where: ContactWhereUniqueInput;
};

/** This contains a set of filters that can be used to compare values internally */
export type ContactWhereComparatorInput = {
  /** This field can be used to request to check if the entry is outdated by internal comparison */
  outdated_to?: InputMaybe<Scalars['Boolean']>;
};

/** Identifies documents */
export type ContactWhereInput = {
  /** Logical AND on all given filters. */
  AND?: InputMaybe<Array<ContactWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: InputMaybe<Array<ContactWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: InputMaybe<Array<ContactWhereInput>>;
  /** Contains search across all appropriate fields. */
  _search?: InputMaybe<Scalars['String']>;
  contactAddress?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  contactAddress_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  contactAddress_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  contactAddress_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Any other value that exists and is not equal to the given value. */
  contactAddress_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  contactAddress_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  contactAddress_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  contactAddress_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  contactAddress_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  contactAddress_starts_with?: InputMaybe<Scalars['String']>;
  contactAvatar?: InputMaybe<AssetWhereInput>;
  contactCalendly?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  contactCalendly_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  contactCalendly_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  contactCalendly_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Any other value that exists and is not equal to the given value. */
  contactCalendly_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  contactCalendly_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  contactCalendly_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  contactCalendly_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  contactCalendly_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  contactCalendly_starts_with?: InputMaybe<Scalars['String']>;
  contactEmail?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  contactEmail_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  contactEmail_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  contactEmail_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Any other value that exists and is not equal to the given value. */
  contactEmail_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  contactEmail_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  contactEmail_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  contactEmail_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  contactEmail_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  contactEmail_starts_with?: InputMaybe<Scalars['String']>;
  contactGoogleAddressLink?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  contactGoogleAddressLink_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  contactGoogleAddressLink_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  contactGoogleAddressLink_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Any other value that exists and is not equal to the given value. */
  contactGoogleAddressLink_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  contactGoogleAddressLink_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  contactGoogleAddressLink_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  contactGoogleAddressLink_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  contactGoogleAddressLink_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  contactGoogleAddressLink_starts_with?: InputMaybe<Scalars['String']>;
  contactLinkedin?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  contactLinkedin_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  contactLinkedin_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  contactLinkedin_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Any other value that exists and is not equal to the given value. */
  contactLinkedin_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  contactLinkedin_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  contactLinkedin_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  contactLinkedin_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  contactLinkedin_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  contactLinkedin_starts_with?: InputMaybe<Scalars['String']>;
  contactName?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  contactName_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  contactName_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  contactName_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Any other value that exists and is not equal to the given value. */
  contactName_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  contactName_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  contactName_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  contactName_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  contactName_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  contactName_starts_with?: InputMaybe<Scalars['String']>;
  contactPhone?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  contactPhone_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  contactPhone_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  contactPhone_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Any other value that exists and is not equal to the given value. */
  contactPhone_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  contactPhone_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  contactPhone_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  contactPhone_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  contactPhone_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  contactPhone_starts_with?: InputMaybe<Scalars['String']>;
  contactQuery?: InputMaybe<ContactQueries>;
  /** All values that are contained in given list. */
  contactQuery_in?: InputMaybe<Array<InputMaybe<ContactQueries>>>;
  /** Any other value that exists and is not equal to the given value. */
  contactQuery_not?: InputMaybe<ContactQueries>;
  /** All values that are not contained in given list. */
  contactQuery_not_in?: InputMaybe<Array<InputMaybe<ContactQueries>>>;
  contactTitle?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  contactTitle_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  contactTitle_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  contactTitle_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Any other value that exists and is not equal to the given value. */
  contactTitle_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  contactTitle_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  contactTitle_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  contactTitle_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  contactTitle_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  contactTitle_starts_with?: InputMaybe<Scalars['String']>;
  contactWhatsapp?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  contactWhatsapp_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  contactWhatsapp_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  contactWhatsapp_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Any other value that exists and is not equal to the given value. */
  contactWhatsapp_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  contactWhatsapp_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  contactWhatsapp_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  contactWhatsapp_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  contactWhatsapp_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  contactWhatsapp_starts_with?: InputMaybe<Scalars['String']>;
  createdAt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  createdAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  createdAt_gte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  createdAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  /** All values less than the given value. */
  createdAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  createdAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** Any other value that exists and is not equal to the given value. */
  createdAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not contained in given list. */
  createdAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  createdBy?: InputMaybe<UserWhereInput>;
  documentInStages_every?: InputMaybe<ContactWhereStageInput>;
  documentInStages_none?: InputMaybe<ContactWhereStageInput>;
  documentInStages_some?: InputMaybe<ContactWhereStageInput>;
  id?: InputMaybe<Scalars['ID']>;
  /** All values containing the given string. */
  id_contains?: InputMaybe<Scalars['ID']>;
  /** All values ending with the given string. */
  id_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are contained in given list. */
  id_in?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** Any other value that exists and is not equal to the given value. */
  id_not?: InputMaybe<Scalars['ID']>;
  /** All values not containing the given string. */
  id_not_contains?: InputMaybe<Scalars['ID']>;
  /** All values not ending with the given string */
  id_not_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are not contained in given list. */
  id_not_in?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** All values not starting with the given string. */
  id_not_starts_with?: InputMaybe<Scalars['ID']>;
  /** All values starting with the given string. */
  id_starts_with?: InputMaybe<Scalars['ID']>;
  publishedAt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  publishedAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  publishedAt_gte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  publishedAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  /** All values less than the given value. */
  publishedAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  publishedAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** Any other value that exists and is not equal to the given value. */
  publishedAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not contained in given list. */
  publishedAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  publishedBy?: InputMaybe<UserWhereInput>;
  scheduledIn_every?: InputMaybe<ScheduledOperationWhereInput>;
  scheduledIn_none?: InputMaybe<ScheduledOperationWhereInput>;
  scheduledIn_some?: InputMaybe<ScheduledOperationWhereInput>;
  updatedAt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  updatedAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  updatedAt_gte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  updatedAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  /** All values less than the given value. */
  updatedAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  updatedAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** Any other value that exists and is not equal to the given value. */
  updatedAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not contained in given list. */
  updatedAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  updatedBy?: InputMaybe<UserWhereInput>;
};

/** The document in stages filter allows specifying a stage entry to cross compare the same document between different stages */
export type ContactWhereStageInput = {
  /** Logical AND on all given filters. */
  AND?: InputMaybe<Array<ContactWhereStageInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: InputMaybe<Array<ContactWhereStageInput>>;
  /** Logical OR on all given filters. */
  OR?: InputMaybe<Array<ContactWhereStageInput>>;
  /** This field contains fields which can be set as true or false to specify an internal comparison */
  compareWithParent?: InputMaybe<ContactWhereComparatorInput>;
  /** Specify the stage to compare with */
  stage?: InputMaybe<Stage>;
};

/** References Contact record uniquely */
export type ContactWhereUniqueInput = {
  id?: InputMaybe<Scalars['ID']>;
};

export enum ContentAlign {
  Card = 'card',
  Center = 'center',
  Justify = 'justify',
  Left = 'left',
  Right = 'right'
}

export type ContentTag = Entity & {
  __typename?: 'ContentTag';
  albumDisplayType?: Maybe<AlbumQueryDisplay>;
  blogCategory?: Maybe<BlogTags>;
  blogSectionTitle?: Maybe<Scalars['String']>;
  contactType: Array<ContactQueries>;
  eventDisplayLayout?: Maybe<EventDisplayType>;
  eventShowType?: Maybe<EventShowType>;
  /** The unique identifier */
  id: Scalars['ID'];
  logoTableLayout?: Maybe<GalleryLayout>;
  logoTableType?: Maybe<LogoTableItem>;
  parentPageType?: Maybe<ParentPage>;
  productType?: Maybe<ProductType>;
  profileLayoutStyle?: Maybe<ProfileLayoutStyle>;
  profileSectionTitle?: Maybe<Scalars['String']>;
  profileType?: Maybe<ProfilesSelect>;
  /** System stage field */
  stage: Stage;
  testimonialType?: Maybe<TestimonialType>;
};

export type ContentTagConnectInput = {
  /** Allow to specify document position in list of connected documents, will default to appending at end of list */
  position?: InputMaybe<ConnectPositionInput>;
  /** Document to connect */
  where: ContentTagWhereUniqueInput;
};

/** A connection to a list of items. */
export type ContentTagConnection = {
  __typename?: 'ContentTagConnection';
  aggregate: Aggregate;
  /** A list of edges. */
  edges: Array<ContentTagEdge>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
};

export type ContentTagCreateInput = {
  albumDisplayType?: InputMaybe<AlbumQueryDisplay>;
  blogCategory?: InputMaybe<BlogTags>;
  blogSectionTitle?: InputMaybe<Scalars['String']>;
  contactType?: InputMaybe<Array<ContactQueries>>;
  eventDisplayLayout?: InputMaybe<EventDisplayType>;
  eventShowType?: InputMaybe<EventShowType>;
  logoTableLayout?: InputMaybe<GalleryLayout>;
  logoTableType?: InputMaybe<LogoTableItem>;
  parentPageType?: InputMaybe<ParentPage>;
  productType?: InputMaybe<ProductType>;
  profileLayoutStyle?: InputMaybe<ProfileLayoutStyle>;
  profileSectionTitle?: InputMaybe<Scalars['String']>;
  profileType?: InputMaybe<ProfilesSelect>;
  testimonialType?: InputMaybe<TestimonialType>;
};

export type ContentTagCreateManyInlineInput = {
  /** Create and connect multiple existing ContentTag documents */
  create?: InputMaybe<Array<ContentTagCreateInput>>;
};

export type ContentTagCreateOneInlineInput = {
  /** Create and connect one ContentTag document */
  create?: InputMaybe<ContentTagCreateInput>;
};

export type ContentTagCreateWithPositionInput = {
  /** Document to create */
  data: ContentTagCreateInput;
  /** Position in the list of existing component instances, will default to appending at the end of list */
  position?: InputMaybe<ConnectPositionInput>;
};

/** An edge in a connection. */
export type ContentTagEdge = {
  __typename?: 'ContentTagEdge';
  /** A cursor for use in pagination. */
  cursor: Scalars['String'];
  /** The item at the end of the edge. */
  node: ContentTag;
};

/** Identifies documents */
export type ContentTagManyWhereInput = {
  /** Logical AND on all given filters. */
  AND?: InputMaybe<Array<ContentTagWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: InputMaybe<Array<ContentTagWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: InputMaybe<Array<ContentTagWhereInput>>;
  /** Contains search across all appropriate fields. */
  _search?: InputMaybe<Scalars['String']>;
  albumDisplayType?: InputMaybe<AlbumQueryDisplay>;
  /** All values that are contained in given list. */
  albumDisplayType_in?: InputMaybe<Array<InputMaybe<AlbumQueryDisplay>>>;
  /** Any other value that exists and is not equal to the given value. */
  albumDisplayType_not?: InputMaybe<AlbumQueryDisplay>;
  /** All values that are not contained in given list. */
  albumDisplayType_not_in?: InputMaybe<Array<InputMaybe<AlbumQueryDisplay>>>;
  blogCategory?: InputMaybe<BlogTags>;
  /** All values that are contained in given list. */
  blogCategory_in?: InputMaybe<Array<InputMaybe<BlogTags>>>;
  /** Any other value that exists and is not equal to the given value. */
  blogCategory_not?: InputMaybe<BlogTags>;
  /** All values that are not contained in given list. */
  blogCategory_not_in?: InputMaybe<Array<InputMaybe<BlogTags>>>;
  blogSectionTitle?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  blogSectionTitle_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  blogSectionTitle_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  blogSectionTitle_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Any other value that exists and is not equal to the given value. */
  blogSectionTitle_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  blogSectionTitle_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  blogSectionTitle_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  blogSectionTitle_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  blogSectionTitle_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  blogSectionTitle_starts_with?: InputMaybe<Scalars['String']>;
  /** Matches if the field array contains *all* items provided to the filter and order does match */
  contactType?: InputMaybe<Array<ContactQueries>>;
  /** Matches if the field array contains *all* items provided to the filter */
  contactType_contains_all?: InputMaybe<Array<ContactQueries>>;
  /** Matches if the field array does not contain any of the items provided to the filter */
  contactType_contains_none?: InputMaybe<Array<ContactQueries>>;
  /** Matches if the field array contains at least one item provided to the filter */
  contactType_contains_some?: InputMaybe<Array<ContactQueries>>;
  /** Matches if the field array does not contains *all* items provided to the filter or order does not match */
  contactType_not?: InputMaybe<Array<ContactQueries>>;
  eventDisplayLayout?: InputMaybe<EventDisplayType>;
  /** All values that are contained in given list. */
  eventDisplayLayout_in?: InputMaybe<Array<InputMaybe<EventDisplayType>>>;
  /** Any other value that exists and is not equal to the given value. */
  eventDisplayLayout_not?: InputMaybe<EventDisplayType>;
  /** All values that are not contained in given list. */
  eventDisplayLayout_not_in?: InputMaybe<Array<InputMaybe<EventDisplayType>>>;
  eventShowType?: InputMaybe<EventShowType>;
  /** All values that are contained in given list. */
  eventShowType_in?: InputMaybe<Array<InputMaybe<EventShowType>>>;
  /** Any other value that exists and is not equal to the given value. */
  eventShowType_not?: InputMaybe<EventShowType>;
  /** All values that are not contained in given list. */
  eventShowType_not_in?: InputMaybe<Array<InputMaybe<EventShowType>>>;
  id?: InputMaybe<Scalars['ID']>;
  /** All values containing the given string. */
  id_contains?: InputMaybe<Scalars['ID']>;
  /** All values ending with the given string. */
  id_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are contained in given list. */
  id_in?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** Any other value that exists and is not equal to the given value. */
  id_not?: InputMaybe<Scalars['ID']>;
  /** All values not containing the given string. */
  id_not_contains?: InputMaybe<Scalars['ID']>;
  /** All values not ending with the given string */
  id_not_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are not contained in given list. */
  id_not_in?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** All values not starting with the given string. */
  id_not_starts_with?: InputMaybe<Scalars['ID']>;
  /** All values starting with the given string. */
  id_starts_with?: InputMaybe<Scalars['ID']>;
  logoTableLayout?: InputMaybe<GalleryLayout>;
  /** All values that are contained in given list. */
  logoTableLayout_in?: InputMaybe<Array<InputMaybe<GalleryLayout>>>;
  /** Any other value that exists and is not equal to the given value. */
  logoTableLayout_not?: InputMaybe<GalleryLayout>;
  /** All values that are not contained in given list. */
  logoTableLayout_not_in?: InputMaybe<Array<InputMaybe<GalleryLayout>>>;
  logoTableType?: InputMaybe<LogoTableItem>;
  /** All values that are contained in given list. */
  logoTableType_in?: InputMaybe<Array<InputMaybe<LogoTableItem>>>;
  /** Any other value that exists and is not equal to the given value. */
  logoTableType_not?: InputMaybe<LogoTableItem>;
  /** All values that are not contained in given list. */
  logoTableType_not_in?: InputMaybe<Array<InputMaybe<LogoTableItem>>>;
  parentPageType?: InputMaybe<ParentPage>;
  /** All values that are contained in given list. */
  parentPageType_in?: InputMaybe<Array<InputMaybe<ParentPage>>>;
  /** Any other value that exists and is not equal to the given value. */
  parentPageType_not?: InputMaybe<ParentPage>;
  /** All values that are not contained in given list. */
  parentPageType_not_in?: InputMaybe<Array<InputMaybe<ParentPage>>>;
  productType?: InputMaybe<ProductType>;
  /** All values that are contained in given list. */
  productType_in?: InputMaybe<Array<InputMaybe<ProductType>>>;
  /** Any other value that exists and is not equal to the given value. */
  productType_not?: InputMaybe<ProductType>;
  /** All values that are not contained in given list. */
  productType_not_in?: InputMaybe<Array<InputMaybe<ProductType>>>;
  profileLayoutStyle?: InputMaybe<ProfileLayoutStyle>;
  /** All values that are contained in given list. */
  profileLayoutStyle_in?: InputMaybe<Array<InputMaybe<ProfileLayoutStyle>>>;
  /** Any other value that exists and is not equal to the given value. */
  profileLayoutStyle_not?: InputMaybe<ProfileLayoutStyle>;
  /** All values that are not contained in given list. */
  profileLayoutStyle_not_in?: InputMaybe<Array<InputMaybe<ProfileLayoutStyle>>>;
  profileSectionTitle?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  profileSectionTitle_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  profileSectionTitle_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  profileSectionTitle_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Any other value that exists and is not equal to the given value. */
  profileSectionTitle_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  profileSectionTitle_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  profileSectionTitle_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  profileSectionTitle_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  profileSectionTitle_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  profileSectionTitle_starts_with?: InputMaybe<Scalars['String']>;
  profileType?: InputMaybe<ProfilesSelect>;
  /** All values that are contained in given list. */
  profileType_in?: InputMaybe<Array<InputMaybe<ProfilesSelect>>>;
  /** Any other value that exists and is not equal to the given value. */
  profileType_not?: InputMaybe<ProfilesSelect>;
  /** All values that are not contained in given list. */
  profileType_not_in?: InputMaybe<Array<InputMaybe<ProfilesSelect>>>;
  testimonialType?: InputMaybe<TestimonialType>;
  /** All values that are contained in given list. */
  testimonialType_in?: InputMaybe<Array<InputMaybe<TestimonialType>>>;
  /** Any other value that exists and is not equal to the given value. */
  testimonialType_not?: InputMaybe<TestimonialType>;
  /** All values that are not contained in given list. */
  testimonialType_not_in?: InputMaybe<Array<InputMaybe<TestimonialType>>>;
};

export enum ContentTagOrderByInput {
  AlbumDisplayTypeAsc = 'albumDisplayType_ASC',
  AlbumDisplayTypeDesc = 'albumDisplayType_DESC',
  BlogCategoryAsc = 'blogCategory_ASC',
  BlogCategoryDesc = 'blogCategory_DESC',
  BlogSectionTitleAsc = 'blogSectionTitle_ASC',
  BlogSectionTitleDesc = 'blogSectionTitle_DESC',
  ContactTypeAsc = 'contactType_ASC',
  ContactTypeDesc = 'contactType_DESC',
  EventDisplayLayoutAsc = 'eventDisplayLayout_ASC',
  EventDisplayLayoutDesc = 'eventDisplayLayout_DESC',
  EventShowTypeAsc = 'eventShowType_ASC',
  EventShowTypeDesc = 'eventShowType_DESC',
  IdAsc = 'id_ASC',
  IdDesc = 'id_DESC',
  LogoTableLayoutAsc = 'logoTableLayout_ASC',
  LogoTableLayoutDesc = 'logoTableLayout_DESC',
  LogoTableTypeAsc = 'logoTableType_ASC',
  LogoTableTypeDesc = 'logoTableType_DESC',
  ParentPageTypeAsc = 'parentPageType_ASC',
  ParentPageTypeDesc = 'parentPageType_DESC',
  ProductTypeAsc = 'productType_ASC',
  ProductTypeDesc = 'productType_DESC',
  ProfileLayoutStyleAsc = 'profileLayoutStyle_ASC',
  ProfileLayoutStyleDesc = 'profileLayoutStyle_DESC',
  ProfileSectionTitleAsc = 'profileSectionTitle_ASC',
  ProfileSectionTitleDesc = 'profileSectionTitle_DESC',
  ProfileTypeAsc = 'profileType_ASC',
  ProfileTypeDesc = 'profileType_DESC',
  TestimonialTypeAsc = 'testimonialType_ASC',
  TestimonialTypeDesc = 'testimonialType_DESC'
}

export type ContentTagParent = LayoutBlockColumn;

export type ContentTagParentConnectInput = {
  LayoutBlockColumn?: InputMaybe<LayoutBlockColumnConnectInput>;
};

export type ContentTagParentCreateInput = {
  LayoutBlockColumn?: InputMaybe<LayoutBlockColumnCreateInput>;
};

export type ContentTagParentCreateManyInlineInput = {
  /** Create and connect multiple existing ContentTagParent documents */
  create?: InputMaybe<Array<ContentTagParentCreateInput>>;
};

export type ContentTagParentCreateOneInlineInput = {
  /** Create and connect one ContentTagParent document */
  create?: InputMaybe<ContentTagParentCreateInput>;
};

export type ContentTagParentCreateWithPositionInput = {
  LayoutBlockColumn?: InputMaybe<LayoutBlockColumnCreateWithPositionInput>;
};

export type ContentTagParentUpdateInput = {
  LayoutBlockColumn?: InputMaybe<LayoutBlockColumnUpdateInput>;
};

export type ContentTagParentUpdateManyInlineInput = {
  /** Create and connect multiple ContentTagParent component instances */
  create?: InputMaybe<Array<ContentTagParentCreateWithPositionInput>>;
  /** Delete multiple ContentTagParent documents */
  delete?: InputMaybe<Array<ContentTagParentWhereUniqueInput>>;
  /** Update multiple ContentTagParent component instances */
  update?: InputMaybe<Array<ContentTagParentUpdateWithNestedWhereUniqueAndPositionInput>>;
  /** Upsert multiple ContentTagParent component instances */
  upsert?: InputMaybe<Array<ContentTagParentUpsertWithNestedWhereUniqueAndPositionInput>>;
};

export type ContentTagParentUpdateManyWithNestedWhereInput = {
  LayoutBlockColumn?: InputMaybe<LayoutBlockColumnUpdateManyWithNestedWhereInput>;
};

export type ContentTagParentUpdateOneInlineInput = {
  /** Create and connect one ContentTagParent document */
  create?: InputMaybe<ContentTagParentCreateInput>;
  /** Delete currently connected ContentTagParent document */
  delete?: InputMaybe<Scalars['Boolean']>;
  /** Update single ContentTagParent document */
  update?: InputMaybe<ContentTagParentUpdateWithNestedWhereUniqueInput>;
  /** Upsert single ContentTagParent document */
  upsert?: InputMaybe<ContentTagParentUpsertWithNestedWhereUniqueInput>;
};

export type ContentTagParentUpdateWithNestedWhereUniqueAndPositionInput = {
  LayoutBlockColumn?: InputMaybe<LayoutBlockColumnUpdateWithNestedWhereUniqueAndPositionInput>;
};

export type ContentTagParentUpdateWithNestedWhereUniqueInput = {
  LayoutBlockColumn?: InputMaybe<LayoutBlockColumnUpdateWithNestedWhereUniqueInput>;
};

export type ContentTagParentUpsertWithNestedWhereUniqueAndPositionInput = {
  LayoutBlockColumn?: InputMaybe<LayoutBlockColumnUpsertWithNestedWhereUniqueAndPositionInput>;
};

export type ContentTagParentUpsertWithNestedWhereUniqueInput = {
  LayoutBlockColumn?: InputMaybe<LayoutBlockColumnUpsertWithNestedWhereUniqueInput>;
};

export type ContentTagParentWhereInput = {
  LayoutBlockColumn?: InputMaybe<LayoutBlockColumnWhereInput>;
};

export type ContentTagParentWhereUniqueInput = {
  LayoutBlockColumn?: InputMaybe<LayoutBlockColumnWhereUniqueInput>;
};

export type ContentTagUpdateInput = {
  albumDisplayType?: InputMaybe<AlbumQueryDisplay>;
  blogCategory?: InputMaybe<BlogTags>;
  blogSectionTitle?: InputMaybe<Scalars['String']>;
  contactType?: InputMaybe<Array<ContactQueries>>;
  eventDisplayLayout?: InputMaybe<EventDisplayType>;
  eventShowType?: InputMaybe<EventShowType>;
  logoTableLayout?: InputMaybe<GalleryLayout>;
  logoTableType?: InputMaybe<LogoTableItem>;
  parentPageType?: InputMaybe<ParentPage>;
  productType?: InputMaybe<ProductType>;
  profileLayoutStyle?: InputMaybe<ProfileLayoutStyle>;
  profileSectionTitle?: InputMaybe<Scalars['String']>;
  profileType?: InputMaybe<ProfilesSelect>;
  testimonialType?: InputMaybe<TestimonialType>;
};

export type ContentTagUpdateManyInlineInput = {
  /** Create and connect multiple ContentTag component instances */
  create?: InputMaybe<Array<ContentTagCreateWithPositionInput>>;
  /** Delete multiple ContentTag documents */
  delete?: InputMaybe<Array<ContentTagWhereUniqueInput>>;
  /** Update multiple ContentTag component instances */
  update?: InputMaybe<Array<ContentTagUpdateWithNestedWhereUniqueAndPositionInput>>;
  /** Upsert multiple ContentTag component instances */
  upsert?: InputMaybe<Array<ContentTagUpsertWithNestedWhereUniqueAndPositionInput>>;
};

export type ContentTagUpdateManyInput = {
  albumDisplayType?: InputMaybe<AlbumQueryDisplay>;
  blogCategory?: InputMaybe<BlogTags>;
  blogSectionTitle?: InputMaybe<Scalars['String']>;
  contactType?: InputMaybe<Array<ContactQueries>>;
  eventDisplayLayout?: InputMaybe<EventDisplayType>;
  eventShowType?: InputMaybe<EventShowType>;
  logoTableLayout?: InputMaybe<GalleryLayout>;
  logoTableType?: InputMaybe<LogoTableItem>;
  parentPageType?: InputMaybe<ParentPage>;
  productType?: InputMaybe<ProductType>;
  profileLayoutStyle?: InputMaybe<ProfileLayoutStyle>;
  profileSectionTitle?: InputMaybe<Scalars['String']>;
  profileType?: InputMaybe<ProfilesSelect>;
  testimonialType?: InputMaybe<TestimonialType>;
};

export type ContentTagUpdateManyWithNestedWhereInput = {
  /** Update many input */
  data: ContentTagUpdateManyInput;
  /** Document search */
  where: ContentTagWhereInput;
};

export type ContentTagUpdateOneInlineInput = {
  /** Create and connect one ContentTag document */
  create?: InputMaybe<ContentTagCreateInput>;
  /** Delete currently connected ContentTag document */
  delete?: InputMaybe<Scalars['Boolean']>;
  /** Update single ContentTag document */
  update?: InputMaybe<ContentTagUpdateWithNestedWhereUniqueInput>;
  /** Upsert single ContentTag document */
  upsert?: InputMaybe<ContentTagUpsertWithNestedWhereUniqueInput>;
};

export type ContentTagUpdateWithNestedWhereUniqueAndPositionInput = {
  /** Document to update */
  data?: InputMaybe<ContentTagUpdateInput>;
  /** Position in the list of existing component instances, will default to appending at the end of list */
  position?: InputMaybe<ConnectPositionInput>;
  /** Unique component instance search */
  where: ContentTagWhereUniqueInput;
};

export type ContentTagUpdateWithNestedWhereUniqueInput = {
  /** Document to update */
  data: ContentTagUpdateInput;
  /** Unique document search */
  where: ContentTagWhereUniqueInput;
};

export type ContentTagUpsertInput = {
  /** Create document if it didn't exist */
  create: ContentTagCreateInput;
  /** Update document if it exists */
  update: ContentTagUpdateInput;
};

export type ContentTagUpsertWithNestedWhereUniqueAndPositionInput = {
  /** Document to upsert */
  data?: InputMaybe<ContentTagUpsertInput>;
  /** Position in the list of existing component instances, will default to appending at the end of list */
  position?: InputMaybe<ConnectPositionInput>;
  /** Unique component instance search */
  where: ContentTagWhereUniqueInput;
};

export type ContentTagUpsertWithNestedWhereUniqueInput = {
  /** Upsert data */
  data: ContentTagUpsertInput;
  /** Unique document search */
  where: ContentTagWhereUniqueInput;
};

/** Identifies documents */
export type ContentTagWhereInput = {
  /** Logical AND on all given filters. */
  AND?: InputMaybe<Array<ContentTagWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: InputMaybe<Array<ContentTagWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: InputMaybe<Array<ContentTagWhereInput>>;
  /** Contains search across all appropriate fields. */
  _search?: InputMaybe<Scalars['String']>;
  albumDisplayType?: InputMaybe<AlbumQueryDisplay>;
  /** All values that are contained in given list. */
  albumDisplayType_in?: InputMaybe<Array<InputMaybe<AlbumQueryDisplay>>>;
  /** Any other value that exists and is not equal to the given value. */
  albumDisplayType_not?: InputMaybe<AlbumQueryDisplay>;
  /** All values that are not contained in given list. */
  albumDisplayType_not_in?: InputMaybe<Array<InputMaybe<AlbumQueryDisplay>>>;
  blogCategory?: InputMaybe<BlogTags>;
  /** All values that are contained in given list. */
  blogCategory_in?: InputMaybe<Array<InputMaybe<BlogTags>>>;
  /** Any other value that exists and is not equal to the given value. */
  blogCategory_not?: InputMaybe<BlogTags>;
  /** All values that are not contained in given list. */
  blogCategory_not_in?: InputMaybe<Array<InputMaybe<BlogTags>>>;
  blogSectionTitle?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  blogSectionTitle_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  blogSectionTitle_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  blogSectionTitle_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Any other value that exists and is not equal to the given value. */
  blogSectionTitle_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  blogSectionTitle_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  blogSectionTitle_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  blogSectionTitle_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  blogSectionTitle_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  blogSectionTitle_starts_with?: InputMaybe<Scalars['String']>;
  /** Matches if the field array contains *all* items provided to the filter and order does match */
  contactType?: InputMaybe<Array<ContactQueries>>;
  /** Matches if the field array contains *all* items provided to the filter */
  contactType_contains_all?: InputMaybe<Array<ContactQueries>>;
  /** Matches if the field array does not contain any of the items provided to the filter */
  contactType_contains_none?: InputMaybe<Array<ContactQueries>>;
  /** Matches if the field array contains at least one item provided to the filter */
  contactType_contains_some?: InputMaybe<Array<ContactQueries>>;
  /** Matches if the field array does not contains *all* items provided to the filter or order does not match */
  contactType_not?: InputMaybe<Array<ContactQueries>>;
  eventDisplayLayout?: InputMaybe<EventDisplayType>;
  /** All values that are contained in given list. */
  eventDisplayLayout_in?: InputMaybe<Array<InputMaybe<EventDisplayType>>>;
  /** Any other value that exists and is not equal to the given value. */
  eventDisplayLayout_not?: InputMaybe<EventDisplayType>;
  /** All values that are not contained in given list. */
  eventDisplayLayout_not_in?: InputMaybe<Array<InputMaybe<EventDisplayType>>>;
  eventShowType?: InputMaybe<EventShowType>;
  /** All values that are contained in given list. */
  eventShowType_in?: InputMaybe<Array<InputMaybe<EventShowType>>>;
  /** Any other value that exists and is not equal to the given value. */
  eventShowType_not?: InputMaybe<EventShowType>;
  /** All values that are not contained in given list. */
  eventShowType_not_in?: InputMaybe<Array<InputMaybe<EventShowType>>>;
  id?: InputMaybe<Scalars['ID']>;
  /** All values containing the given string. */
  id_contains?: InputMaybe<Scalars['ID']>;
  /** All values ending with the given string. */
  id_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are contained in given list. */
  id_in?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** Any other value that exists and is not equal to the given value. */
  id_not?: InputMaybe<Scalars['ID']>;
  /** All values not containing the given string. */
  id_not_contains?: InputMaybe<Scalars['ID']>;
  /** All values not ending with the given string */
  id_not_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are not contained in given list. */
  id_not_in?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** All values not starting with the given string. */
  id_not_starts_with?: InputMaybe<Scalars['ID']>;
  /** All values starting with the given string. */
  id_starts_with?: InputMaybe<Scalars['ID']>;
  logoTableLayout?: InputMaybe<GalleryLayout>;
  /** All values that are contained in given list. */
  logoTableLayout_in?: InputMaybe<Array<InputMaybe<GalleryLayout>>>;
  /** Any other value that exists and is not equal to the given value. */
  logoTableLayout_not?: InputMaybe<GalleryLayout>;
  /** All values that are not contained in given list. */
  logoTableLayout_not_in?: InputMaybe<Array<InputMaybe<GalleryLayout>>>;
  logoTableType?: InputMaybe<LogoTableItem>;
  /** All values that are contained in given list. */
  logoTableType_in?: InputMaybe<Array<InputMaybe<LogoTableItem>>>;
  /** Any other value that exists and is not equal to the given value. */
  logoTableType_not?: InputMaybe<LogoTableItem>;
  /** All values that are not contained in given list. */
  logoTableType_not_in?: InputMaybe<Array<InputMaybe<LogoTableItem>>>;
  parentPageType?: InputMaybe<ParentPage>;
  /** All values that are contained in given list. */
  parentPageType_in?: InputMaybe<Array<InputMaybe<ParentPage>>>;
  /** Any other value that exists and is not equal to the given value. */
  parentPageType_not?: InputMaybe<ParentPage>;
  /** All values that are not contained in given list. */
  parentPageType_not_in?: InputMaybe<Array<InputMaybe<ParentPage>>>;
  productType?: InputMaybe<ProductType>;
  /** All values that are contained in given list. */
  productType_in?: InputMaybe<Array<InputMaybe<ProductType>>>;
  /** Any other value that exists and is not equal to the given value. */
  productType_not?: InputMaybe<ProductType>;
  /** All values that are not contained in given list. */
  productType_not_in?: InputMaybe<Array<InputMaybe<ProductType>>>;
  profileLayoutStyle?: InputMaybe<ProfileLayoutStyle>;
  /** All values that are contained in given list. */
  profileLayoutStyle_in?: InputMaybe<Array<InputMaybe<ProfileLayoutStyle>>>;
  /** Any other value that exists and is not equal to the given value. */
  profileLayoutStyle_not?: InputMaybe<ProfileLayoutStyle>;
  /** All values that are not contained in given list. */
  profileLayoutStyle_not_in?: InputMaybe<Array<InputMaybe<ProfileLayoutStyle>>>;
  profileSectionTitle?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  profileSectionTitle_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  profileSectionTitle_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  profileSectionTitle_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Any other value that exists and is not equal to the given value. */
  profileSectionTitle_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  profileSectionTitle_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  profileSectionTitle_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  profileSectionTitle_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  profileSectionTitle_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  profileSectionTitle_starts_with?: InputMaybe<Scalars['String']>;
  profileType?: InputMaybe<ProfilesSelect>;
  /** All values that are contained in given list. */
  profileType_in?: InputMaybe<Array<InputMaybe<ProfilesSelect>>>;
  /** Any other value that exists and is not equal to the given value. */
  profileType_not?: InputMaybe<ProfilesSelect>;
  /** All values that are not contained in given list. */
  profileType_not_in?: InputMaybe<Array<InputMaybe<ProfilesSelect>>>;
  testimonialType?: InputMaybe<TestimonialType>;
  /** All values that are contained in given list. */
  testimonialType_in?: InputMaybe<Array<InputMaybe<TestimonialType>>>;
  /** Any other value that exists and is not equal to the given value. */
  testimonialType_not?: InputMaybe<TestimonialType>;
  /** All values that are not contained in given list. */
  testimonialType_not_in?: InputMaybe<Array<InputMaybe<TestimonialType>>>;
};

/** References ContentTag record uniquely */
export type ContentTagWhereUniqueInput = {
  id?: InputMaybe<Scalars['ID']>;
};

export enum DocumentFileTypes {
  Doc = 'doc',
  Docx = 'docx',
  Html = 'html',
  Jpg = 'jpg',
  Odp = 'odp',
  Ods = 'ods',
  Odt = 'odt',
  Pdf = 'pdf',
  Png = 'png',
  Ppt = 'ppt',
  Pptx = 'pptx',
  Svg = 'svg',
  Txt = 'txt',
  Webp = 'webp',
  Xls = 'xls',
  Xlsx = 'xlsx'
}

export type DocumentOutputInput = {
  /**
   * Transforms a document into a desired file type.
   * See this matrix for format support:
   *
   * PDF:	jpg, odp, ods, odt, png, svg, txt, and webp
   * DOC:	docx, html, jpg, odt, pdf, png, svg, txt, and webp
   * DOCX:	doc, html, jpg, odt, pdf, png, svg, txt, and webp
   * ODT:	doc, docx, html, jpg, pdf, png, svg, txt, and webp
   * XLS:	jpg, pdf, ods, png, svg, xlsx, and webp
   * XLSX:	jpg, pdf, ods, png, svg, xls, and webp
   * ODS:	jpg, pdf, png, xls, svg, xlsx, and webp
   * PPT:	jpg, odp, pdf, png, svg, pptx, and webp
   * PPTX:	jpg, odp, pdf, png, svg, ppt, and webp
   * ODP:	jpg, pdf, png, ppt, svg, pptx, and webp
   * BMP:	jpg, odp, ods, odt, pdf, png, svg, and webp
   * GIF:	jpg, odp, ods, odt, pdf, png, svg, and webp
   * JPG:	jpg, odp, ods, odt, pdf, png, svg, and webp
   * PNG:	jpg, odp, ods, odt, pdf, png, svg, and webp
   * WEBP:	jpg, odp, ods, odt, pdf, png, svg, and webp
   * TIFF:	jpg, odp, ods, odt, pdf, png, svg, and webp
   * AI:	    jpg, odp, ods, odt, pdf, png, svg, and webp
   * PSD:	jpg, odp, ods, odt, pdf, png, svg, and webp
   * SVG:	jpg, odp, ods, odt, pdf, png, and webp
   * HTML:	jpg, odt, pdf, svg, txt, and webp
   * TXT:	jpg, html, odt, pdf, svg, and webp
   */
  format?: InputMaybe<DocumentFileTypes>;
};

/** Transformations for Documents */
export type DocumentTransformationInput = {
  /** Changes the output for the file. */
  output?: InputMaybe<DocumentOutputInput>;
};

export type DocumentVersion = {
  __typename?: 'DocumentVersion';
  createdAt: Scalars['DateTime'];
  data?: Maybe<Scalars['Json']>;
  id: Scalars['ID'];
  revision: Scalars['Int'];
  stage: Stage;
};

export type Element = Entity & {
  __typename?: 'Element';
  bandsInTownKey?: Maybe<Scalars['String']>;
  displayInstagramSectionUsername?: Maybe<Scalars['String']>;
  elementJson?: Maybe<Scalars['Json']>;
  gallery: Array<Asset>;
  galleryLayout?: Maybe<GalleryLayout>;
  htmlText?: Maybe<Scalars['String']>;
  htmlTextCssClass?: Maybe<Scalars['String']>;
  iFrameCode?: Maybe<Scalars['String']>;
  iFrameTitle?: Maybe<Scalars['String']>;
  /** The unique identifier */
  id: Scalars['ID'];
  image?: Maybe<Asset>;
  imageCssClass?: Maybe<Scalars['String']>;
  mapLatLong?: Maybe<Location>;
  parallaxImage?: Maybe<Asset>;
  /** System stage field */
  stage: Stage;
  standOutText?: Maybe<Scalars['String']>;
  stripePricingTableId?: Maybe<Scalars['String']>;
  stripePublishableKey?: Maybe<Scalars['String']>;
};


export type ElementGalleryArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  forceParentLocale?: InputMaybe<Scalars['Boolean']>;
  last?: InputMaybe<Scalars['Int']>;
  locales?: InputMaybe<Array<Locale>>;
  orderBy?: InputMaybe<AssetOrderByInput>;
  skip?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<AssetWhereInput>;
};


export type ElementImageArgs = {
  forceParentLocale?: InputMaybe<Scalars['Boolean']>;
  locales?: InputMaybe<Array<Locale>>;
};


export type ElementParallaxImageArgs = {
  forceParentLocale?: InputMaybe<Scalars['Boolean']>;
  locales?: InputMaybe<Array<Locale>>;
};

export type ElementConnectInput = {
  /** Allow to specify document position in list of connected documents, will default to appending at end of list */
  position?: InputMaybe<ConnectPositionInput>;
  /** Document to connect */
  where: ElementWhereUniqueInput;
};

/** A connection to a list of items. */
export type ElementConnection = {
  __typename?: 'ElementConnection';
  aggregate: Aggregate;
  /** A list of edges. */
  edges: Array<ElementEdge>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
};

export type ElementCreateInput = {
  bandsInTownKey?: InputMaybe<Scalars['String']>;
  displayInstagramSectionUsername?: InputMaybe<Scalars['String']>;
  elementJson?: InputMaybe<Scalars['Json']>;
  gallery?: InputMaybe<AssetCreateManyInlineInput>;
  galleryLayout?: InputMaybe<GalleryLayout>;
  htmlText?: InputMaybe<Scalars['String']>;
  htmlTextCssClass?: InputMaybe<Scalars['String']>;
  iFrameCode?: InputMaybe<Scalars['String']>;
  iFrameTitle?: InputMaybe<Scalars['String']>;
  image?: InputMaybe<AssetCreateOneInlineInput>;
  imageCssClass?: InputMaybe<Scalars['String']>;
  mapLatLong?: InputMaybe<LocationInput>;
  parallaxImage?: InputMaybe<AssetCreateOneInlineInput>;
  standOutText?: InputMaybe<Scalars['String']>;
  stripePricingTableId?: InputMaybe<Scalars['String']>;
  stripePublishableKey?: InputMaybe<Scalars['String']>;
};

export type ElementCreateManyInlineInput = {
  /** Create and connect multiple existing Element documents */
  create?: InputMaybe<Array<ElementCreateInput>>;
};

export type ElementCreateOneInlineInput = {
  /** Create and connect one Element document */
  create?: InputMaybe<ElementCreateInput>;
};

export type ElementCreateWithPositionInput = {
  /** Document to create */
  data: ElementCreateInput;
  /** Position in the list of existing component instances, will default to appending at the end of list */
  position?: InputMaybe<ConnectPositionInput>;
};

/** An edge in a connection. */
export type ElementEdge = {
  __typename?: 'ElementEdge';
  /** A cursor for use in pagination. */
  cursor: Scalars['String'];
  /** The item at the end of the edge. */
  node: Element;
};

/** Identifies documents */
export type ElementManyWhereInput = {
  /** Logical AND on all given filters. */
  AND?: InputMaybe<Array<ElementWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: InputMaybe<Array<ElementWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: InputMaybe<Array<ElementWhereInput>>;
  /** Contains search across all appropriate fields. */
  _search?: InputMaybe<Scalars['String']>;
  bandsInTownKey?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  bandsInTownKey_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  bandsInTownKey_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  bandsInTownKey_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Any other value that exists and is not equal to the given value. */
  bandsInTownKey_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  bandsInTownKey_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  bandsInTownKey_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  bandsInTownKey_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  bandsInTownKey_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  bandsInTownKey_starts_with?: InputMaybe<Scalars['String']>;
  displayInstagramSectionUsername?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  displayInstagramSectionUsername_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  displayInstagramSectionUsername_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  displayInstagramSectionUsername_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Any other value that exists and is not equal to the given value. */
  displayInstagramSectionUsername_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  displayInstagramSectionUsername_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  displayInstagramSectionUsername_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  displayInstagramSectionUsername_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  displayInstagramSectionUsername_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  displayInstagramSectionUsername_starts_with?: InputMaybe<Scalars['String']>;
  /** All values containing the given json path. */
  elementJson_json_path_exists?: InputMaybe<Scalars['String']>;
  /**
   * Recursively tries to find the provided JSON scalar value inside the field.
   * It does use an exact match when comparing values.
   * If you pass `null` as value the filter will be ignored.
   * Note: This filter fails if you try to look for a non scalar JSON value!
   */
  elementJson_value_recursive?: InputMaybe<Scalars['Json']>;
  galleryLayout?: InputMaybe<GalleryLayout>;
  /** All values that are contained in given list. */
  galleryLayout_in?: InputMaybe<Array<InputMaybe<GalleryLayout>>>;
  /** Any other value that exists and is not equal to the given value. */
  galleryLayout_not?: InputMaybe<GalleryLayout>;
  /** All values that are not contained in given list. */
  galleryLayout_not_in?: InputMaybe<Array<InputMaybe<GalleryLayout>>>;
  gallery_every?: InputMaybe<AssetWhereInput>;
  gallery_none?: InputMaybe<AssetWhereInput>;
  gallery_some?: InputMaybe<AssetWhereInput>;
  htmlText?: InputMaybe<Scalars['String']>;
  htmlTextCssClass?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  htmlTextCssClass_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  htmlTextCssClass_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  htmlTextCssClass_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Any other value that exists and is not equal to the given value. */
  htmlTextCssClass_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  htmlTextCssClass_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  htmlTextCssClass_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  htmlTextCssClass_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  htmlTextCssClass_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  htmlTextCssClass_starts_with?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  htmlText_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  htmlText_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  htmlText_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Any other value that exists and is not equal to the given value. */
  htmlText_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  htmlText_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  htmlText_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  htmlText_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  htmlText_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  htmlText_starts_with?: InputMaybe<Scalars['String']>;
  iFrameCode?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  iFrameCode_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  iFrameCode_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  iFrameCode_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Any other value that exists and is not equal to the given value. */
  iFrameCode_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  iFrameCode_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  iFrameCode_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  iFrameCode_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  iFrameCode_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  iFrameCode_starts_with?: InputMaybe<Scalars['String']>;
  iFrameTitle?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  iFrameTitle_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  iFrameTitle_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  iFrameTitle_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Any other value that exists and is not equal to the given value. */
  iFrameTitle_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  iFrameTitle_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  iFrameTitle_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  iFrameTitle_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  iFrameTitle_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  iFrameTitle_starts_with?: InputMaybe<Scalars['String']>;
  id?: InputMaybe<Scalars['ID']>;
  /** All values containing the given string. */
  id_contains?: InputMaybe<Scalars['ID']>;
  /** All values ending with the given string. */
  id_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are contained in given list. */
  id_in?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** Any other value that exists and is not equal to the given value. */
  id_not?: InputMaybe<Scalars['ID']>;
  /** All values not containing the given string. */
  id_not_contains?: InputMaybe<Scalars['ID']>;
  /** All values not ending with the given string */
  id_not_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are not contained in given list. */
  id_not_in?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** All values not starting with the given string. */
  id_not_starts_with?: InputMaybe<Scalars['ID']>;
  /** All values starting with the given string. */
  id_starts_with?: InputMaybe<Scalars['ID']>;
  image?: InputMaybe<AssetWhereInput>;
  imageCssClass?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  imageCssClass_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  imageCssClass_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  imageCssClass_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Any other value that exists and is not equal to the given value. */
  imageCssClass_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  imageCssClass_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  imageCssClass_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  imageCssClass_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  imageCssClass_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  imageCssClass_starts_with?: InputMaybe<Scalars['String']>;
  parallaxImage?: InputMaybe<AssetWhereInput>;
  standOutText?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  standOutText_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  standOutText_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  standOutText_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Any other value that exists and is not equal to the given value. */
  standOutText_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  standOutText_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  standOutText_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  standOutText_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  standOutText_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  standOutText_starts_with?: InputMaybe<Scalars['String']>;
  stripePricingTableId?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  stripePricingTableId_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  stripePricingTableId_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  stripePricingTableId_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Any other value that exists and is not equal to the given value. */
  stripePricingTableId_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  stripePricingTableId_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  stripePricingTableId_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  stripePricingTableId_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  stripePricingTableId_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  stripePricingTableId_starts_with?: InputMaybe<Scalars['String']>;
  stripePublishableKey?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  stripePublishableKey_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  stripePublishableKey_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  stripePublishableKey_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Any other value that exists and is not equal to the given value. */
  stripePublishableKey_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  stripePublishableKey_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  stripePublishableKey_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  stripePublishableKey_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  stripePublishableKey_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  stripePublishableKey_starts_with?: InputMaybe<Scalars['String']>;
};

export enum ElementOrderByInput {
  BandsInTownKeyAsc = 'bandsInTownKey_ASC',
  BandsInTownKeyDesc = 'bandsInTownKey_DESC',
  DisplayInstagramSectionUsernameAsc = 'displayInstagramSectionUsername_ASC',
  DisplayInstagramSectionUsernameDesc = 'displayInstagramSectionUsername_DESC',
  GalleryLayoutAsc = 'galleryLayout_ASC',
  GalleryLayoutDesc = 'galleryLayout_DESC',
  HtmlTextCssClassAsc = 'htmlTextCssClass_ASC',
  HtmlTextCssClassDesc = 'htmlTextCssClass_DESC',
  HtmlTextAsc = 'htmlText_ASC',
  HtmlTextDesc = 'htmlText_DESC',
  IFrameCodeAsc = 'iFrameCode_ASC',
  IFrameCodeDesc = 'iFrameCode_DESC',
  IFrameTitleAsc = 'iFrameTitle_ASC',
  IFrameTitleDesc = 'iFrameTitle_DESC',
  IdAsc = 'id_ASC',
  IdDesc = 'id_DESC',
  ImageCssClassAsc = 'imageCssClass_ASC',
  ImageCssClassDesc = 'imageCssClass_DESC',
  StandOutTextAsc = 'standOutText_ASC',
  StandOutTextDesc = 'standOutText_DESC',
  StripePricingTableIdAsc = 'stripePricingTableId_ASC',
  StripePricingTableIdDesc = 'stripePricingTableId_DESC',
  StripePublishableKeyAsc = 'stripePublishableKey_ASC',
  StripePublishableKeyDesc = 'stripePublishableKey_DESC'
}

export type ElementParent = LayoutBlockColumn;

export type ElementParentConnectInput = {
  LayoutBlockColumn?: InputMaybe<LayoutBlockColumnConnectInput>;
};

export type ElementParentCreateInput = {
  LayoutBlockColumn?: InputMaybe<LayoutBlockColumnCreateInput>;
};

export type ElementParentCreateManyInlineInput = {
  /** Create and connect multiple existing ElementParent documents */
  create?: InputMaybe<Array<ElementParentCreateInput>>;
};

export type ElementParentCreateOneInlineInput = {
  /** Create and connect one ElementParent document */
  create?: InputMaybe<ElementParentCreateInput>;
};

export type ElementParentCreateWithPositionInput = {
  LayoutBlockColumn?: InputMaybe<LayoutBlockColumnCreateWithPositionInput>;
};

export type ElementParentUpdateInput = {
  LayoutBlockColumn?: InputMaybe<LayoutBlockColumnUpdateInput>;
};

export type ElementParentUpdateManyInlineInput = {
  /** Create and connect multiple ElementParent component instances */
  create?: InputMaybe<Array<ElementParentCreateWithPositionInput>>;
  /** Delete multiple ElementParent documents */
  delete?: InputMaybe<Array<ElementParentWhereUniqueInput>>;
  /** Update multiple ElementParent component instances */
  update?: InputMaybe<Array<ElementParentUpdateWithNestedWhereUniqueAndPositionInput>>;
  /** Upsert multiple ElementParent component instances */
  upsert?: InputMaybe<Array<ElementParentUpsertWithNestedWhereUniqueAndPositionInput>>;
};

export type ElementParentUpdateManyWithNestedWhereInput = {
  LayoutBlockColumn?: InputMaybe<LayoutBlockColumnUpdateManyWithNestedWhereInput>;
};

export type ElementParentUpdateOneInlineInput = {
  /** Create and connect one ElementParent document */
  create?: InputMaybe<ElementParentCreateInput>;
  /** Delete currently connected ElementParent document */
  delete?: InputMaybe<Scalars['Boolean']>;
  /** Update single ElementParent document */
  update?: InputMaybe<ElementParentUpdateWithNestedWhereUniqueInput>;
  /** Upsert single ElementParent document */
  upsert?: InputMaybe<ElementParentUpsertWithNestedWhereUniqueInput>;
};

export type ElementParentUpdateWithNestedWhereUniqueAndPositionInput = {
  LayoutBlockColumn?: InputMaybe<LayoutBlockColumnUpdateWithNestedWhereUniqueAndPositionInput>;
};

export type ElementParentUpdateWithNestedWhereUniqueInput = {
  LayoutBlockColumn?: InputMaybe<LayoutBlockColumnUpdateWithNestedWhereUniqueInput>;
};

export type ElementParentUpsertWithNestedWhereUniqueAndPositionInput = {
  LayoutBlockColumn?: InputMaybe<LayoutBlockColumnUpsertWithNestedWhereUniqueAndPositionInput>;
};

export type ElementParentUpsertWithNestedWhereUniqueInput = {
  LayoutBlockColumn?: InputMaybe<LayoutBlockColumnUpsertWithNestedWhereUniqueInput>;
};

export type ElementParentWhereInput = {
  LayoutBlockColumn?: InputMaybe<LayoutBlockColumnWhereInput>;
};

export type ElementParentWhereUniqueInput = {
  LayoutBlockColumn?: InputMaybe<LayoutBlockColumnWhereUniqueInput>;
};

export type ElementUpdateInput = {
  bandsInTownKey?: InputMaybe<Scalars['String']>;
  displayInstagramSectionUsername?: InputMaybe<Scalars['String']>;
  elementJson?: InputMaybe<Scalars['Json']>;
  gallery?: InputMaybe<AssetUpdateManyInlineInput>;
  galleryLayout?: InputMaybe<GalleryLayout>;
  htmlText?: InputMaybe<Scalars['String']>;
  htmlTextCssClass?: InputMaybe<Scalars['String']>;
  iFrameCode?: InputMaybe<Scalars['String']>;
  iFrameTitle?: InputMaybe<Scalars['String']>;
  image?: InputMaybe<AssetUpdateOneInlineInput>;
  imageCssClass?: InputMaybe<Scalars['String']>;
  mapLatLong?: InputMaybe<LocationInput>;
  parallaxImage?: InputMaybe<AssetUpdateOneInlineInput>;
  standOutText?: InputMaybe<Scalars['String']>;
  stripePricingTableId?: InputMaybe<Scalars['String']>;
  stripePublishableKey?: InputMaybe<Scalars['String']>;
};

export type ElementUpdateManyInlineInput = {
  /** Create and connect multiple Element component instances */
  create?: InputMaybe<Array<ElementCreateWithPositionInput>>;
  /** Delete multiple Element documents */
  delete?: InputMaybe<Array<ElementWhereUniqueInput>>;
  /** Update multiple Element component instances */
  update?: InputMaybe<Array<ElementUpdateWithNestedWhereUniqueAndPositionInput>>;
  /** Upsert multiple Element component instances */
  upsert?: InputMaybe<Array<ElementUpsertWithNestedWhereUniqueAndPositionInput>>;
};

export type ElementUpdateManyInput = {
  bandsInTownKey?: InputMaybe<Scalars['String']>;
  displayInstagramSectionUsername?: InputMaybe<Scalars['String']>;
  elementJson?: InputMaybe<Scalars['Json']>;
  galleryLayout?: InputMaybe<GalleryLayout>;
  htmlText?: InputMaybe<Scalars['String']>;
  htmlTextCssClass?: InputMaybe<Scalars['String']>;
  iFrameCode?: InputMaybe<Scalars['String']>;
  iFrameTitle?: InputMaybe<Scalars['String']>;
  imageCssClass?: InputMaybe<Scalars['String']>;
  mapLatLong?: InputMaybe<LocationInput>;
  standOutText?: InputMaybe<Scalars['String']>;
  stripePricingTableId?: InputMaybe<Scalars['String']>;
  stripePublishableKey?: InputMaybe<Scalars['String']>;
};

export type ElementUpdateManyWithNestedWhereInput = {
  /** Update many input */
  data: ElementUpdateManyInput;
  /** Document search */
  where: ElementWhereInput;
};

export type ElementUpdateOneInlineInput = {
  /** Create and connect one Element document */
  create?: InputMaybe<ElementCreateInput>;
  /** Delete currently connected Element document */
  delete?: InputMaybe<Scalars['Boolean']>;
  /** Update single Element document */
  update?: InputMaybe<ElementUpdateWithNestedWhereUniqueInput>;
  /** Upsert single Element document */
  upsert?: InputMaybe<ElementUpsertWithNestedWhereUniqueInput>;
};

export type ElementUpdateWithNestedWhereUniqueAndPositionInput = {
  /** Document to update */
  data?: InputMaybe<ElementUpdateInput>;
  /** Position in the list of existing component instances, will default to appending at the end of list */
  position?: InputMaybe<ConnectPositionInput>;
  /** Unique component instance search */
  where: ElementWhereUniqueInput;
};

export type ElementUpdateWithNestedWhereUniqueInput = {
  /** Document to update */
  data: ElementUpdateInput;
  /** Unique document search */
  where: ElementWhereUniqueInput;
};

export type ElementUpsertInput = {
  /** Create document if it didn't exist */
  create: ElementCreateInput;
  /** Update document if it exists */
  update: ElementUpdateInput;
};

export type ElementUpsertWithNestedWhereUniqueAndPositionInput = {
  /** Document to upsert */
  data?: InputMaybe<ElementUpsertInput>;
  /** Position in the list of existing component instances, will default to appending at the end of list */
  position?: InputMaybe<ConnectPositionInput>;
  /** Unique component instance search */
  where: ElementWhereUniqueInput;
};

export type ElementUpsertWithNestedWhereUniqueInput = {
  /** Upsert data */
  data: ElementUpsertInput;
  /** Unique document search */
  where: ElementWhereUniqueInput;
};

/** Identifies documents */
export type ElementWhereInput = {
  /** Logical AND on all given filters. */
  AND?: InputMaybe<Array<ElementWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: InputMaybe<Array<ElementWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: InputMaybe<Array<ElementWhereInput>>;
  /** Contains search across all appropriate fields. */
  _search?: InputMaybe<Scalars['String']>;
  bandsInTownKey?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  bandsInTownKey_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  bandsInTownKey_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  bandsInTownKey_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Any other value that exists and is not equal to the given value. */
  bandsInTownKey_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  bandsInTownKey_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  bandsInTownKey_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  bandsInTownKey_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  bandsInTownKey_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  bandsInTownKey_starts_with?: InputMaybe<Scalars['String']>;
  displayInstagramSectionUsername?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  displayInstagramSectionUsername_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  displayInstagramSectionUsername_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  displayInstagramSectionUsername_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Any other value that exists and is not equal to the given value. */
  displayInstagramSectionUsername_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  displayInstagramSectionUsername_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  displayInstagramSectionUsername_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  displayInstagramSectionUsername_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  displayInstagramSectionUsername_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  displayInstagramSectionUsername_starts_with?: InputMaybe<Scalars['String']>;
  /** All values containing the given json path. */
  elementJson_json_path_exists?: InputMaybe<Scalars['String']>;
  /**
   * Recursively tries to find the provided JSON scalar value inside the field.
   * It does use an exact match when comparing values.
   * If you pass `null` as value the filter will be ignored.
   * Note: This filter fails if you try to look for a non scalar JSON value!
   */
  elementJson_value_recursive?: InputMaybe<Scalars['Json']>;
  galleryLayout?: InputMaybe<GalleryLayout>;
  /** All values that are contained in given list. */
  galleryLayout_in?: InputMaybe<Array<InputMaybe<GalleryLayout>>>;
  /** Any other value that exists and is not equal to the given value. */
  galleryLayout_not?: InputMaybe<GalleryLayout>;
  /** All values that are not contained in given list. */
  galleryLayout_not_in?: InputMaybe<Array<InputMaybe<GalleryLayout>>>;
  gallery_every?: InputMaybe<AssetWhereInput>;
  gallery_none?: InputMaybe<AssetWhereInput>;
  gallery_some?: InputMaybe<AssetWhereInput>;
  htmlText?: InputMaybe<Scalars['String']>;
  htmlTextCssClass?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  htmlTextCssClass_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  htmlTextCssClass_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  htmlTextCssClass_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Any other value that exists and is not equal to the given value. */
  htmlTextCssClass_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  htmlTextCssClass_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  htmlTextCssClass_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  htmlTextCssClass_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  htmlTextCssClass_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  htmlTextCssClass_starts_with?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  htmlText_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  htmlText_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  htmlText_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Any other value that exists and is not equal to the given value. */
  htmlText_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  htmlText_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  htmlText_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  htmlText_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  htmlText_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  htmlText_starts_with?: InputMaybe<Scalars['String']>;
  iFrameCode?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  iFrameCode_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  iFrameCode_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  iFrameCode_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Any other value that exists and is not equal to the given value. */
  iFrameCode_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  iFrameCode_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  iFrameCode_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  iFrameCode_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  iFrameCode_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  iFrameCode_starts_with?: InputMaybe<Scalars['String']>;
  iFrameTitle?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  iFrameTitle_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  iFrameTitle_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  iFrameTitle_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Any other value that exists and is not equal to the given value. */
  iFrameTitle_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  iFrameTitle_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  iFrameTitle_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  iFrameTitle_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  iFrameTitle_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  iFrameTitle_starts_with?: InputMaybe<Scalars['String']>;
  id?: InputMaybe<Scalars['ID']>;
  /** All values containing the given string. */
  id_contains?: InputMaybe<Scalars['ID']>;
  /** All values ending with the given string. */
  id_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are contained in given list. */
  id_in?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** Any other value that exists and is not equal to the given value. */
  id_not?: InputMaybe<Scalars['ID']>;
  /** All values not containing the given string. */
  id_not_contains?: InputMaybe<Scalars['ID']>;
  /** All values not ending with the given string */
  id_not_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are not contained in given list. */
  id_not_in?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** All values not starting with the given string. */
  id_not_starts_with?: InputMaybe<Scalars['ID']>;
  /** All values starting with the given string. */
  id_starts_with?: InputMaybe<Scalars['ID']>;
  image?: InputMaybe<AssetWhereInput>;
  imageCssClass?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  imageCssClass_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  imageCssClass_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  imageCssClass_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Any other value that exists and is not equal to the given value. */
  imageCssClass_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  imageCssClass_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  imageCssClass_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  imageCssClass_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  imageCssClass_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  imageCssClass_starts_with?: InputMaybe<Scalars['String']>;
  parallaxImage?: InputMaybe<AssetWhereInput>;
  standOutText?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  standOutText_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  standOutText_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  standOutText_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Any other value that exists and is not equal to the given value. */
  standOutText_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  standOutText_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  standOutText_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  standOutText_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  standOutText_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  standOutText_starts_with?: InputMaybe<Scalars['String']>;
  stripePricingTableId?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  stripePricingTableId_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  stripePricingTableId_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  stripePricingTableId_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Any other value that exists and is not equal to the given value. */
  stripePricingTableId_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  stripePricingTableId_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  stripePricingTableId_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  stripePricingTableId_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  stripePricingTableId_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  stripePricingTableId_starts_with?: InputMaybe<Scalars['String']>;
  stripePublishableKey?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  stripePublishableKey_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  stripePublishableKey_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  stripePublishableKey_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Any other value that exists and is not equal to the given value. */
  stripePublishableKey_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  stripePublishableKey_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  stripePublishableKey_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  stripePublishableKey_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  stripePublishableKey_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  stripePublishableKey_starts_with?: InputMaybe<Scalars['String']>;
};

/** References Element record uniquely */
export type ElementWhereUniqueInput = {
  id?: InputMaybe<Scalars['ID']>;
};

/** An object with an ID */
export type Entity = {
  /** The id of the object. */
  id: Scalars['ID'];
  /** The Stage of an object */
  stage: Stage;
};

/** This enumeration holds all typenames that implement the Entity interface. Components and models implement the Entity interface. */
export enum EntityTypeName {
  Accordion = 'Accordion',
  Album = 'Album',
  /** Asset system model */
  Asset = 'Asset',
  /** Blog Enteries */
  Blog = 'Blog',
  CallToAction = 'CallToAction',
  Contact = 'Contact',
  ContactForm = 'ContactForm',
  ContentTag = 'ContentTag',
  Element = 'Element',
  Event = 'Event',
  FooterColumn = 'FooterColumn',
  GridBox = 'GridBox',
  HeroMediaSlider = 'HeroMediaSlider',
  LayoutBlock = 'LayoutBlock',
  LayoutBlockColumn = 'LayoutBlockColumn',
  LogoTable = 'LogoTable',
  LoopText = 'LoopText',
  LoopTextItem = 'LoopTextItem',
  Navigation = 'Navigation',
  NavigationItem = 'NavigationItem',
  Page = 'Page',
  Popup = 'Popup',
  Product = 'Product',
  Profile = 'Profile',
  RootColor = 'RootColor',
  /** Scheduled Operation system model */
  ScheduledOperation = 'ScheduledOperation',
  /** Scheduled Release system model */
  ScheduledRelease = 'ScheduledRelease',
  SiteLibrary = 'SiteLibrary',
  Testimonial = 'Testimonial',
  TextContent = 'TextContent',
  /** User system model */
  User = 'User',
  VideoBox = 'VideoBox'
}

/** Allows to specify input to query models and components directly */
export type EntityWhereInput = {
  /** The ID of an object */
  id: Scalars['ID'];
  stage: Stage;
  /** The Type name of an object */
  typename: EntityTypeName;
};

export type Event = Entity & Node & {
  __typename?: 'Event';
  /** The time the document was created */
  createdAt: Scalars['DateTime'];
  /** User that created this document */
  createdBy?: Maybe<User>;
  /** Get the document in other stages */
  documentInStages: Array<Event>;
  eventAddress?: Maybe<Scalars['String']>;
  eventAddressGoogleMapLink?: Maybe<Scalars['String']>;
  eventCityState?: Maybe<Scalars['String']>;
  eventDescription?: Maybe<RichText>;
  eventEndDateTime?: Maybe<Scalars['DateTime']>;
  eventFeatured?: Maybe<Scalars['Boolean']>;
  eventFlyer?: Maybe<Asset>;
  eventGallery: Array<Asset>;
  eventIFrame?: Maybe<Scalars['String']>;
  eventLinkButtonText?: Maybe<Scalars['String']>;
  eventShortDescription?: Maybe<Scalars['String']>;
  eventShowType?: Maybe<EventShowType>;
  eventSlug?: Maybe<Scalars['String']>;
  eventStartDateTime?: Maybe<Scalars['DateTime']>;
  eventTicketLinkDestination?: Maybe<Scalars['String']>;
  eventTitle?: Maybe<Scalars['String']>;
  eventVenueName?: Maybe<Scalars['String']>;
  /** List of Event versions */
  history: Array<Version>;
  /** The unique identifier */
  id: Scalars['ID'];
  /** The time the document was published. Null on documents in draft stage. */
  publishedAt?: Maybe<Scalars['DateTime']>;
  /** User that last published this document */
  publishedBy?: Maybe<User>;
  scheduledIn: Array<ScheduledOperation>;
  /** System stage field */
  stage: Stage;
  /** The time the document was updated */
  updatedAt: Scalars['DateTime'];
  /** User that last updated this document */
  updatedBy?: Maybe<User>;
  videoBox: Array<VideoBox>;
};


export type EventCreatedByArgs = {
  forceParentLocale?: InputMaybe<Scalars['Boolean']>;
  locales?: InputMaybe<Array<Locale>>;
};


export type EventDocumentInStagesArgs = {
  includeCurrent?: Scalars['Boolean'];
  inheritLocale?: Scalars['Boolean'];
  stages?: Array<Stage>;
};


export type EventEventFlyerArgs = {
  forceParentLocale?: InputMaybe<Scalars['Boolean']>;
  locales?: InputMaybe<Array<Locale>>;
};


export type EventEventGalleryArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  forceParentLocale?: InputMaybe<Scalars['Boolean']>;
  last?: InputMaybe<Scalars['Int']>;
  locales?: InputMaybe<Array<Locale>>;
  orderBy?: InputMaybe<AssetOrderByInput>;
  skip?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<AssetWhereInput>;
};


export type EventHistoryArgs = {
  limit?: Scalars['Int'];
  skip?: Scalars['Int'];
  stageOverride?: InputMaybe<Stage>;
};


export type EventPublishedByArgs = {
  forceParentLocale?: InputMaybe<Scalars['Boolean']>;
  locales?: InputMaybe<Array<Locale>>;
};


export type EventScheduledInArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  forceParentLocale?: InputMaybe<Scalars['Boolean']>;
  last?: InputMaybe<Scalars['Int']>;
  locales?: InputMaybe<Array<Locale>>;
  skip?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<ScheduledOperationWhereInput>;
};


export type EventUpdatedByArgs = {
  forceParentLocale?: InputMaybe<Scalars['Boolean']>;
  locales?: InputMaybe<Array<Locale>>;
};


export type EventVideoBoxArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  forceParentLocale?: InputMaybe<Scalars['Boolean']>;
  last?: InputMaybe<Scalars['Int']>;
  locales?: InputMaybe<Array<Locale>>;
  orderBy?: InputMaybe<VideoBoxOrderByInput>;
  skip?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<VideoBoxWhereInput>;
};

export type EventConnectInput = {
  /** Allow to specify document position in list of connected documents, will default to appending at end of list */
  position?: InputMaybe<ConnectPositionInput>;
  /** Document to connect */
  where: EventWhereUniqueInput;
};

/** A connection to a list of items. */
export type EventConnection = {
  __typename?: 'EventConnection';
  aggregate: Aggregate;
  /** A list of edges. */
  edges: Array<EventEdge>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
};

export type EventCreateInput = {
  createdAt?: InputMaybe<Scalars['DateTime']>;
  eventAddress?: InputMaybe<Scalars['String']>;
  eventAddressGoogleMapLink?: InputMaybe<Scalars['String']>;
  eventCityState?: InputMaybe<Scalars['String']>;
  eventDescription?: InputMaybe<Scalars['RichTextAST']>;
  eventEndDateTime?: InputMaybe<Scalars['DateTime']>;
  eventFeatured?: InputMaybe<Scalars['Boolean']>;
  eventFlyer?: InputMaybe<AssetCreateOneInlineInput>;
  eventGallery?: InputMaybe<AssetCreateManyInlineInput>;
  eventIFrame?: InputMaybe<Scalars['String']>;
  eventLinkButtonText?: InputMaybe<Scalars['String']>;
  eventShortDescription?: InputMaybe<Scalars['String']>;
  eventShowType?: InputMaybe<EventShowType>;
  eventSlug?: InputMaybe<Scalars['String']>;
  eventStartDateTime?: InputMaybe<Scalars['DateTime']>;
  eventTicketLinkDestination?: InputMaybe<Scalars['String']>;
  eventTitle?: InputMaybe<Scalars['String']>;
  eventVenueName?: InputMaybe<Scalars['String']>;
  updatedAt?: InputMaybe<Scalars['DateTime']>;
  videoBox?: InputMaybe<VideoBoxCreateManyInlineInput>;
};

export type EventCreateManyInlineInput = {
  /** Connect multiple existing Event documents */
  connect?: InputMaybe<Array<EventWhereUniqueInput>>;
  /** Create and connect multiple existing Event documents */
  create?: InputMaybe<Array<EventCreateInput>>;
};

export type EventCreateOneInlineInput = {
  /** Connect one existing Event document */
  connect?: InputMaybe<EventWhereUniqueInput>;
  /** Create and connect one Event document */
  create?: InputMaybe<EventCreateInput>;
};

export enum EventDisplayType {
  Grid = 'Grid',
  None = 'None',
  Slider = 'Slider'
}

/** An edge in a connection. */
export type EventEdge = {
  __typename?: 'EventEdge';
  /** A cursor for use in pagination. */
  cursor: Scalars['String'];
  /** The item at the end of the edge. */
  node: Event;
};

/** Identifies documents */
export type EventManyWhereInput = {
  /** Logical AND on all given filters. */
  AND?: InputMaybe<Array<EventWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: InputMaybe<Array<EventWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: InputMaybe<Array<EventWhereInput>>;
  /** Contains search across all appropriate fields. */
  _search?: InputMaybe<Scalars['String']>;
  createdAt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  createdAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  createdAt_gte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  createdAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  /** All values less than the given value. */
  createdAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  createdAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** Any other value that exists and is not equal to the given value. */
  createdAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not contained in given list. */
  createdAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  createdBy?: InputMaybe<UserWhereInput>;
  documentInStages_every?: InputMaybe<EventWhereStageInput>;
  documentInStages_none?: InputMaybe<EventWhereStageInput>;
  documentInStages_some?: InputMaybe<EventWhereStageInput>;
  eventAddress?: InputMaybe<Scalars['String']>;
  eventAddressGoogleMapLink?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  eventAddressGoogleMapLink_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  eventAddressGoogleMapLink_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  eventAddressGoogleMapLink_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Any other value that exists and is not equal to the given value. */
  eventAddressGoogleMapLink_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  eventAddressGoogleMapLink_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  eventAddressGoogleMapLink_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  eventAddressGoogleMapLink_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  eventAddressGoogleMapLink_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  eventAddressGoogleMapLink_starts_with?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  eventAddress_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  eventAddress_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  eventAddress_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Any other value that exists and is not equal to the given value. */
  eventAddress_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  eventAddress_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  eventAddress_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  eventAddress_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  eventAddress_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  eventAddress_starts_with?: InputMaybe<Scalars['String']>;
  eventCityState?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  eventCityState_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  eventCityState_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  eventCityState_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Any other value that exists and is not equal to the given value. */
  eventCityState_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  eventCityState_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  eventCityState_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  eventCityState_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  eventCityState_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  eventCityState_starts_with?: InputMaybe<Scalars['String']>;
  eventEndDateTime?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  eventEndDateTime_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  eventEndDateTime_gte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  eventEndDateTime_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  /** All values less than the given value. */
  eventEndDateTime_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  eventEndDateTime_lte?: InputMaybe<Scalars['DateTime']>;
  /** Any other value that exists and is not equal to the given value. */
  eventEndDateTime_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not contained in given list. */
  eventEndDateTime_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  eventFeatured?: InputMaybe<Scalars['Boolean']>;
  /** Any other value that exists and is not equal to the given value. */
  eventFeatured_not?: InputMaybe<Scalars['Boolean']>;
  eventFlyer?: InputMaybe<AssetWhereInput>;
  eventGallery_every?: InputMaybe<AssetWhereInput>;
  eventGallery_none?: InputMaybe<AssetWhereInput>;
  eventGallery_some?: InputMaybe<AssetWhereInput>;
  eventIFrame?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  eventIFrame_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  eventIFrame_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  eventIFrame_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Any other value that exists and is not equal to the given value. */
  eventIFrame_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  eventIFrame_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  eventIFrame_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  eventIFrame_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  eventIFrame_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  eventIFrame_starts_with?: InputMaybe<Scalars['String']>;
  eventLinkButtonText?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  eventLinkButtonText_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  eventLinkButtonText_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  eventLinkButtonText_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Any other value that exists and is not equal to the given value. */
  eventLinkButtonText_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  eventLinkButtonText_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  eventLinkButtonText_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  eventLinkButtonText_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  eventLinkButtonText_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  eventLinkButtonText_starts_with?: InputMaybe<Scalars['String']>;
  eventShortDescription?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  eventShortDescription_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  eventShortDescription_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  eventShortDescription_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Any other value that exists and is not equal to the given value. */
  eventShortDescription_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  eventShortDescription_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  eventShortDescription_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  eventShortDescription_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  eventShortDescription_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  eventShortDescription_starts_with?: InputMaybe<Scalars['String']>;
  eventShowType?: InputMaybe<EventShowType>;
  /** All values that are contained in given list. */
  eventShowType_in?: InputMaybe<Array<InputMaybe<EventShowType>>>;
  /** Any other value that exists and is not equal to the given value. */
  eventShowType_not?: InputMaybe<EventShowType>;
  /** All values that are not contained in given list. */
  eventShowType_not_in?: InputMaybe<Array<InputMaybe<EventShowType>>>;
  eventSlug?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  eventSlug_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  eventSlug_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  eventSlug_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Any other value that exists and is not equal to the given value. */
  eventSlug_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  eventSlug_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  eventSlug_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  eventSlug_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  eventSlug_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  eventSlug_starts_with?: InputMaybe<Scalars['String']>;
  eventStartDateTime?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  eventStartDateTime_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  eventStartDateTime_gte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  eventStartDateTime_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  /** All values less than the given value. */
  eventStartDateTime_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  eventStartDateTime_lte?: InputMaybe<Scalars['DateTime']>;
  /** Any other value that exists and is not equal to the given value. */
  eventStartDateTime_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not contained in given list. */
  eventStartDateTime_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  eventTicketLinkDestination?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  eventTicketLinkDestination_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  eventTicketLinkDestination_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  eventTicketLinkDestination_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Any other value that exists and is not equal to the given value. */
  eventTicketLinkDestination_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  eventTicketLinkDestination_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  eventTicketLinkDestination_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  eventTicketLinkDestination_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  eventTicketLinkDestination_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  eventTicketLinkDestination_starts_with?: InputMaybe<Scalars['String']>;
  eventTitle?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  eventTitle_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  eventTitle_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  eventTitle_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Any other value that exists and is not equal to the given value. */
  eventTitle_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  eventTitle_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  eventTitle_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  eventTitle_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  eventTitle_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  eventTitle_starts_with?: InputMaybe<Scalars['String']>;
  eventVenueName?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  eventVenueName_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  eventVenueName_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  eventVenueName_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Any other value that exists and is not equal to the given value. */
  eventVenueName_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  eventVenueName_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  eventVenueName_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  eventVenueName_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  eventVenueName_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  eventVenueName_starts_with?: InputMaybe<Scalars['String']>;
  id?: InputMaybe<Scalars['ID']>;
  /** All values containing the given string. */
  id_contains?: InputMaybe<Scalars['ID']>;
  /** All values ending with the given string. */
  id_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are contained in given list. */
  id_in?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** Any other value that exists and is not equal to the given value. */
  id_not?: InputMaybe<Scalars['ID']>;
  /** All values not containing the given string. */
  id_not_contains?: InputMaybe<Scalars['ID']>;
  /** All values not ending with the given string */
  id_not_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are not contained in given list. */
  id_not_in?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** All values not starting with the given string. */
  id_not_starts_with?: InputMaybe<Scalars['ID']>;
  /** All values starting with the given string. */
  id_starts_with?: InputMaybe<Scalars['ID']>;
  publishedAt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  publishedAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  publishedAt_gte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  publishedAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  /** All values less than the given value. */
  publishedAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  publishedAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** Any other value that exists and is not equal to the given value. */
  publishedAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not contained in given list. */
  publishedAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  publishedBy?: InputMaybe<UserWhereInput>;
  scheduledIn_every?: InputMaybe<ScheduledOperationWhereInput>;
  scheduledIn_none?: InputMaybe<ScheduledOperationWhereInput>;
  scheduledIn_some?: InputMaybe<ScheduledOperationWhereInput>;
  updatedAt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  updatedAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  updatedAt_gte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  updatedAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  /** All values less than the given value. */
  updatedAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  updatedAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** Any other value that exists and is not equal to the given value. */
  updatedAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not contained in given list. */
  updatedAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  updatedBy?: InputMaybe<UserWhereInput>;
  videoBox_every?: InputMaybe<VideoBoxWhereInput>;
  videoBox_none?: InputMaybe<VideoBoxWhereInput>;
  videoBox_some?: InputMaybe<VideoBoxWhereInput>;
};

export enum EventOrderByInput {
  CreatedAtAsc = 'createdAt_ASC',
  CreatedAtDesc = 'createdAt_DESC',
  EventAddressGoogleMapLinkAsc = 'eventAddressGoogleMapLink_ASC',
  EventAddressGoogleMapLinkDesc = 'eventAddressGoogleMapLink_DESC',
  EventAddressAsc = 'eventAddress_ASC',
  EventAddressDesc = 'eventAddress_DESC',
  EventCityStateAsc = 'eventCityState_ASC',
  EventCityStateDesc = 'eventCityState_DESC',
  EventEndDateTimeAsc = 'eventEndDateTime_ASC',
  EventEndDateTimeDesc = 'eventEndDateTime_DESC',
  EventFeaturedAsc = 'eventFeatured_ASC',
  EventFeaturedDesc = 'eventFeatured_DESC',
  EventIFrameAsc = 'eventIFrame_ASC',
  EventIFrameDesc = 'eventIFrame_DESC',
  EventLinkButtonTextAsc = 'eventLinkButtonText_ASC',
  EventLinkButtonTextDesc = 'eventLinkButtonText_DESC',
  EventShortDescriptionAsc = 'eventShortDescription_ASC',
  EventShortDescriptionDesc = 'eventShortDescription_DESC',
  EventShowTypeAsc = 'eventShowType_ASC',
  EventShowTypeDesc = 'eventShowType_DESC',
  EventSlugAsc = 'eventSlug_ASC',
  EventSlugDesc = 'eventSlug_DESC',
  EventStartDateTimeAsc = 'eventStartDateTime_ASC',
  EventStartDateTimeDesc = 'eventStartDateTime_DESC',
  EventTicketLinkDestinationAsc = 'eventTicketLinkDestination_ASC',
  EventTicketLinkDestinationDesc = 'eventTicketLinkDestination_DESC',
  EventTitleAsc = 'eventTitle_ASC',
  EventTitleDesc = 'eventTitle_DESC',
  EventVenueNameAsc = 'eventVenueName_ASC',
  EventVenueNameDesc = 'eventVenueName_DESC',
  IdAsc = 'id_ASC',
  IdDesc = 'id_DESC',
  PublishedAtAsc = 'publishedAt_ASC',
  PublishedAtDesc = 'publishedAt_DESC',
  UpdatedAtAsc = 'updatedAt_ASC',
  UpdatedAtDesc = 'updatedAt_DESC'
}

export enum EventShowType {
  Default = 'default'
}

export type EventUpdateInput = {
  eventAddress?: InputMaybe<Scalars['String']>;
  eventAddressGoogleMapLink?: InputMaybe<Scalars['String']>;
  eventCityState?: InputMaybe<Scalars['String']>;
  eventDescription?: InputMaybe<Scalars['RichTextAST']>;
  eventEndDateTime?: InputMaybe<Scalars['DateTime']>;
  eventFeatured?: InputMaybe<Scalars['Boolean']>;
  eventFlyer?: InputMaybe<AssetUpdateOneInlineInput>;
  eventGallery?: InputMaybe<AssetUpdateManyInlineInput>;
  eventIFrame?: InputMaybe<Scalars['String']>;
  eventLinkButtonText?: InputMaybe<Scalars['String']>;
  eventShortDescription?: InputMaybe<Scalars['String']>;
  eventShowType?: InputMaybe<EventShowType>;
  eventSlug?: InputMaybe<Scalars['String']>;
  eventStartDateTime?: InputMaybe<Scalars['DateTime']>;
  eventTicketLinkDestination?: InputMaybe<Scalars['String']>;
  eventTitle?: InputMaybe<Scalars['String']>;
  eventVenueName?: InputMaybe<Scalars['String']>;
  videoBox?: InputMaybe<VideoBoxUpdateManyInlineInput>;
};

export type EventUpdateManyInlineInput = {
  /** Connect multiple existing Event documents */
  connect?: InputMaybe<Array<EventConnectInput>>;
  /** Create and connect multiple Event documents */
  create?: InputMaybe<Array<EventCreateInput>>;
  /** Delete multiple Event documents */
  delete?: InputMaybe<Array<EventWhereUniqueInput>>;
  /** Disconnect multiple Event documents */
  disconnect?: InputMaybe<Array<EventWhereUniqueInput>>;
  /** Override currently-connected documents with multiple existing Event documents */
  set?: InputMaybe<Array<EventWhereUniqueInput>>;
  /** Update multiple Event documents */
  update?: InputMaybe<Array<EventUpdateWithNestedWhereUniqueInput>>;
  /** Upsert multiple Event documents */
  upsert?: InputMaybe<Array<EventUpsertWithNestedWhereUniqueInput>>;
};

export type EventUpdateManyInput = {
  eventAddress?: InputMaybe<Scalars['String']>;
  eventAddressGoogleMapLink?: InputMaybe<Scalars['String']>;
  eventCityState?: InputMaybe<Scalars['String']>;
  eventDescription?: InputMaybe<Scalars['RichTextAST']>;
  eventEndDateTime?: InputMaybe<Scalars['DateTime']>;
  eventFeatured?: InputMaybe<Scalars['Boolean']>;
  eventIFrame?: InputMaybe<Scalars['String']>;
  eventLinkButtonText?: InputMaybe<Scalars['String']>;
  eventShortDescription?: InputMaybe<Scalars['String']>;
  eventShowType?: InputMaybe<EventShowType>;
  eventStartDateTime?: InputMaybe<Scalars['DateTime']>;
  eventTicketLinkDestination?: InputMaybe<Scalars['String']>;
  eventTitle?: InputMaybe<Scalars['String']>;
  eventVenueName?: InputMaybe<Scalars['String']>;
};

export type EventUpdateManyWithNestedWhereInput = {
  /** Update many input */
  data: EventUpdateManyInput;
  /** Document search */
  where: EventWhereInput;
};

export type EventUpdateOneInlineInput = {
  /** Connect existing Event document */
  connect?: InputMaybe<EventWhereUniqueInput>;
  /** Create and connect one Event document */
  create?: InputMaybe<EventCreateInput>;
  /** Delete currently connected Event document */
  delete?: InputMaybe<Scalars['Boolean']>;
  /** Disconnect currently connected Event document */
  disconnect?: InputMaybe<Scalars['Boolean']>;
  /** Update single Event document */
  update?: InputMaybe<EventUpdateWithNestedWhereUniqueInput>;
  /** Upsert single Event document */
  upsert?: InputMaybe<EventUpsertWithNestedWhereUniqueInput>;
};

export type EventUpdateWithNestedWhereUniqueInput = {
  /** Document to update */
  data: EventUpdateInput;
  /** Unique document search */
  where: EventWhereUniqueInput;
};

export type EventUpsertInput = {
  /** Create document if it didn't exist */
  create: EventCreateInput;
  /** Update document if it exists */
  update: EventUpdateInput;
};

export type EventUpsertWithNestedWhereUniqueInput = {
  /** Upsert data */
  data: EventUpsertInput;
  /** Unique document search */
  where: EventWhereUniqueInput;
};

/** This contains a set of filters that can be used to compare values internally */
export type EventWhereComparatorInput = {
  /** This field can be used to request to check if the entry is outdated by internal comparison */
  outdated_to?: InputMaybe<Scalars['Boolean']>;
};

/** Identifies documents */
export type EventWhereInput = {
  /** Logical AND on all given filters. */
  AND?: InputMaybe<Array<EventWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: InputMaybe<Array<EventWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: InputMaybe<Array<EventWhereInput>>;
  /** Contains search across all appropriate fields. */
  _search?: InputMaybe<Scalars['String']>;
  createdAt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  createdAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  createdAt_gte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  createdAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  /** All values less than the given value. */
  createdAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  createdAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** Any other value that exists and is not equal to the given value. */
  createdAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not contained in given list. */
  createdAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  createdBy?: InputMaybe<UserWhereInput>;
  documentInStages_every?: InputMaybe<EventWhereStageInput>;
  documentInStages_none?: InputMaybe<EventWhereStageInput>;
  documentInStages_some?: InputMaybe<EventWhereStageInput>;
  eventAddress?: InputMaybe<Scalars['String']>;
  eventAddressGoogleMapLink?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  eventAddressGoogleMapLink_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  eventAddressGoogleMapLink_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  eventAddressGoogleMapLink_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Any other value that exists and is not equal to the given value. */
  eventAddressGoogleMapLink_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  eventAddressGoogleMapLink_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  eventAddressGoogleMapLink_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  eventAddressGoogleMapLink_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  eventAddressGoogleMapLink_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  eventAddressGoogleMapLink_starts_with?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  eventAddress_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  eventAddress_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  eventAddress_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Any other value that exists and is not equal to the given value. */
  eventAddress_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  eventAddress_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  eventAddress_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  eventAddress_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  eventAddress_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  eventAddress_starts_with?: InputMaybe<Scalars['String']>;
  eventCityState?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  eventCityState_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  eventCityState_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  eventCityState_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Any other value that exists and is not equal to the given value. */
  eventCityState_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  eventCityState_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  eventCityState_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  eventCityState_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  eventCityState_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  eventCityState_starts_with?: InputMaybe<Scalars['String']>;
  eventEndDateTime?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  eventEndDateTime_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  eventEndDateTime_gte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  eventEndDateTime_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  /** All values less than the given value. */
  eventEndDateTime_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  eventEndDateTime_lte?: InputMaybe<Scalars['DateTime']>;
  /** Any other value that exists and is not equal to the given value. */
  eventEndDateTime_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not contained in given list. */
  eventEndDateTime_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  eventFeatured?: InputMaybe<Scalars['Boolean']>;
  /** Any other value that exists and is not equal to the given value. */
  eventFeatured_not?: InputMaybe<Scalars['Boolean']>;
  eventFlyer?: InputMaybe<AssetWhereInput>;
  eventGallery_every?: InputMaybe<AssetWhereInput>;
  eventGallery_none?: InputMaybe<AssetWhereInput>;
  eventGallery_some?: InputMaybe<AssetWhereInput>;
  eventIFrame?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  eventIFrame_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  eventIFrame_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  eventIFrame_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Any other value that exists and is not equal to the given value. */
  eventIFrame_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  eventIFrame_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  eventIFrame_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  eventIFrame_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  eventIFrame_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  eventIFrame_starts_with?: InputMaybe<Scalars['String']>;
  eventLinkButtonText?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  eventLinkButtonText_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  eventLinkButtonText_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  eventLinkButtonText_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Any other value that exists and is not equal to the given value. */
  eventLinkButtonText_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  eventLinkButtonText_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  eventLinkButtonText_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  eventLinkButtonText_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  eventLinkButtonText_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  eventLinkButtonText_starts_with?: InputMaybe<Scalars['String']>;
  eventShortDescription?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  eventShortDescription_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  eventShortDescription_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  eventShortDescription_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Any other value that exists and is not equal to the given value. */
  eventShortDescription_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  eventShortDescription_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  eventShortDescription_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  eventShortDescription_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  eventShortDescription_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  eventShortDescription_starts_with?: InputMaybe<Scalars['String']>;
  eventShowType?: InputMaybe<EventShowType>;
  /** All values that are contained in given list. */
  eventShowType_in?: InputMaybe<Array<InputMaybe<EventShowType>>>;
  /** Any other value that exists and is not equal to the given value. */
  eventShowType_not?: InputMaybe<EventShowType>;
  /** All values that are not contained in given list. */
  eventShowType_not_in?: InputMaybe<Array<InputMaybe<EventShowType>>>;
  eventSlug?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  eventSlug_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  eventSlug_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  eventSlug_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Any other value that exists and is not equal to the given value. */
  eventSlug_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  eventSlug_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  eventSlug_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  eventSlug_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  eventSlug_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  eventSlug_starts_with?: InputMaybe<Scalars['String']>;
  eventStartDateTime?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  eventStartDateTime_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  eventStartDateTime_gte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  eventStartDateTime_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  /** All values less than the given value. */
  eventStartDateTime_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  eventStartDateTime_lte?: InputMaybe<Scalars['DateTime']>;
  /** Any other value that exists and is not equal to the given value. */
  eventStartDateTime_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not contained in given list. */
  eventStartDateTime_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  eventTicketLinkDestination?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  eventTicketLinkDestination_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  eventTicketLinkDestination_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  eventTicketLinkDestination_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Any other value that exists and is not equal to the given value. */
  eventTicketLinkDestination_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  eventTicketLinkDestination_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  eventTicketLinkDestination_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  eventTicketLinkDestination_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  eventTicketLinkDestination_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  eventTicketLinkDestination_starts_with?: InputMaybe<Scalars['String']>;
  eventTitle?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  eventTitle_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  eventTitle_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  eventTitle_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Any other value that exists and is not equal to the given value. */
  eventTitle_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  eventTitle_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  eventTitle_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  eventTitle_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  eventTitle_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  eventTitle_starts_with?: InputMaybe<Scalars['String']>;
  eventVenueName?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  eventVenueName_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  eventVenueName_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  eventVenueName_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Any other value that exists and is not equal to the given value. */
  eventVenueName_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  eventVenueName_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  eventVenueName_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  eventVenueName_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  eventVenueName_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  eventVenueName_starts_with?: InputMaybe<Scalars['String']>;
  id?: InputMaybe<Scalars['ID']>;
  /** All values containing the given string. */
  id_contains?: InputMaybe<Scalars['ID']>;
  /** All values ending with the given string. */
  id_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are contained in given list. */
  id_in?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** Any other value that exists and is not equal to the given value. */
  id_not?: InputMaybe<Scalars['ID']>;
  /** All values not containing the given string. */
  id_not_contains?: InputMaybe<Scalars['ID']>;
  /** All values not ending with the given string */
  id_not_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are not contained in given list. */
  id_not_in?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** All values not starting with the given string. */
  id_not_starts_with?: InputMaybe<Scalars['ID']>;
  /** All values starting with the given string. */
  id_starts_with?: InputMaybe<Scalars['ID']>;
  publishedAt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  publishedAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  publishedAt_gte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  publishedAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  /** All values less than the given value. */
  publishedAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  publishedAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** Any other value that exists and is not equal to the given value. */
  publishedAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not contained in given list. */
  publishedAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  publishedBy?: InputMaybe<UserWhereInput>;
  scheduledIn_every?: InputMaybe<ScheduledOperationWhereInput>;
  scheduledIn_none?: InputMaybe<ScheduledOperationWhereInput>;
  scheduledIn_some?: InputMaybe<ScheduledOperationWhereInput>;
  updatedAt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  updatedAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  updatedAt_gte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  updatedAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  /** All values less than the given value. */
  updatedAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  updatedAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** Any other value that exists and is not equal to the given value. */
  updatedAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not contained in given list. */
  updatedAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  updatedBy?: InputMaybe<UserWhereInput>;
  videoBox_every?: InputMaybe<VideoBoxWhereInput>;
  videoBox_none?: InputMaybe<VideoBoxWhereInput>;
  videoBox_some?: InputMaybe<VideoBoxWhereInput>;
};

/** The document in stages filter allows specifying a stage entry to cross compare the same document between different stages */
export type EventWhereStageInput = {
  /** Logical AND on all given filters. */
  AND?: InputMaybe<Array<EventWhereStageInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: InputMaybe<Array<EventWhereStageInput>>;
  /** Logical OR on all given filters. */
  OR?: InputMaybe<Array<EventWhereStageInput>>;
  /** This field contains fields which can be set as true or false to specify an internal comparison */
  compareWithParent?: InputMaybe<EventWhereComparatorInput>;
  /** Specify the stage to compare with */
  stage?: InputMaybe<Stage>;
};

/** References Event record uniquely */
export type EventWhereUniqueInput = {
  eventSlug?: InputMaybe<Scalars['String']>;
  id?: InputMaybe<Scalars['ID']>;
};

export enum FontFamily {
  Arial = 'arial'
}

export type FooterColumn = Entity & {
  __typename?: 'FooterColumn';
  footerColumnCssWrapper?: Maybe<Scalars['String']>;
  footerIframe?: Maybe<Scalars['String']>;
  footerImage?: Maybe<Asset>;
  footerLink: Array<NavigationItem>;
  footerText?: Maybe<RichText>;
  footerTitle?: Maybe<Scalars['String']>;
  /** The unique identifier */
  id: Scalars['ID'];
  recentBlogByCategory?: Maybe<BlogTags>;
  /** System stage field */
  stage: Stage;
  wideColumn?: Maybe<Scalars['Boolean']>;
};


export type FooterColumnFooterImageArgs = {
  forceParentLocale?: InputMaybe<Scalars['Boolean']>;
  locales?: InputMaybe<Array<Locale>>;
};


export type FooterColumnFooterLinkArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  forceParentLocale?: InputMaybe<Scalars['Boolean']>;
  last?: InputMaybe<Scalars['Int']>;
  locales?: InputMaybe<Array<Locale>>;
  orderBy?: InputMaybe<NavigationItemOrderByInput>;
  skip?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<NavigationItemWhereInput>;
};

export type FooterColumnConnectInput = {
  /** Allow to specify document position in list of connected documents, will default to appending at end of list */
  position?: InputMaybe<ConnectPositionInput>;
  /** Document to connect */
  where: FooterColumnWhereUniqueInput;
};

/** A connection to a list of items. */
export type FooterColumnConnection = {
  __typename?: 'FooterColumnConnection';
  aggregate: Aggregate;
  /** A list of edges. */
  edges: Array<FooterColumnEdge>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
};

export type FooterColumnCreateInput = {
  footerColumnCssWrapper?: InputMaybe<Scalars['String']>;
  footerIframe?: InputMaybe<Scalars['String']>;
  footerImage?: InputMaybe<AssetCreateOneInlineInput>;
  footerLink?: InputMaybe<NavigationItemCreateManyInlineInput>;
  footerText?: InputMaybe<Scalars['RichTextAST']>;
  footerTitle?: InputMaybe<Scalars['String']>;
  recentBlogByCategory?: InputMaybe<BlogTags>;
  wideColumn?: InputMaybe<Scalars['Boolean']>;
};

export type FooterColumnCreateManyInlineInput = {
  /** Create and connect multiple existing FooterColumn documents */
  create?: InputMaybe<Array<FooterColumnCreateInput>>;
};

export type FooterColumnCreateOneInlineInput = {
  /** Create and connect one FooterColumn document */
  create?: InputMaybe<FooterColumnCreateInput>;
};

export type FooterColumnCreateWithPositionInput = {
  /** Document to create */
  data: FooterColumnCreateInput;
  /** Position in the list of existing component instances, will default to appending at the end of list */
  position?: InputMaybe<ConnectPositionInput>;
};

/** An edge in a connection. */
export type FooterColumnEdge = {
  __typename?: 'FooterColumnEdge';
  /** A cursor for use in pagination. */
  cursor: Scalars['String'];
  /** The item at the end of the edge. */
  node: FooterColumn;
};

/** Identifies documents */
export type FooterColumnManyWhereInput = {
  /** Logical AND on all given filters. */
  AND?: InputMaybe<Array<FooterColumnWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: InputMaybe<Array<FooterColumnWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: InputMaybe<Array<FooterColumnWhereInput>>;
  /** Contains search across all appropriate fields. */
  _search?: InputMaybe<Scalars['String']>;
  footerColumnCssWrapper?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  footerColumnCssWrapper_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  footerColumnCssWrapper_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  footerColumnCssWrapper_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Any other value that exists and is not equal to the given value. */
  footerColumnCssWrapper_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  footerColumnCssWrapper_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  footerColumnCssWrapper_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  footerColumnCssWrapper_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  footerColumnCssWrapper_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  footerColumnCssWrapper_starts_with?: InputMaybe<Scalars['String']>;
  footerIframe?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  footerIframe_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  footerIframe_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  footerIframe_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Any other value that exists and is not equal to the given value. */
  footerIframe_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  footerIframe_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  footerIframe_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  footerIframe_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  footerIframe_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  footerIframe_starts_with?: InputMaybe<Scalars['String']>;
  footerImage?: InputMaybe<AssetWhereInput>;
  footerLink_every?: InputMaybe<NavigationItemWhereInput>;
  footerLink_none?: InputMaybe<NavigationItemWhereInput>;
  footerLink_some?: InputMaybe<NavigationItemWhereInput>;
  footerTitle?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  footerTitle_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  footerTitle_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  footerTitle_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Any other value that exists and is not equal to the given value. */
  footerTitle_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  footerTitle_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  footerTitle_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  footerTitle_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  footerTitle_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  footerTitle_starts_with?: InputMaybe<Scalars['String']>;
  id?: InputMaybe<Scalars['ID']>;
  /** All values containing the given string. */
  id_contains?: InputMaybe<Scalars['ID']>;
  /** All values ending with the given string. */
  id_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are contained in given list. */
  id_in?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** Any other value that exists and is not equal to the given value. */
  id_not?: InputMaybe<Scalars['ID']>;
  /** All values not containing the given string. */
  id_not_contains?: InputMaybe<Scalars['ID']>;
  /** All values not ending with the given string */
  id_not_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are not contained in given list. */
  id_not_in?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** All values not starting with the given string. */
  id_not_starts_with?: InputMaybe<Scalars['ID']>;
  /** All values starting with the given string. */
  id_starts_with?: InputMaybe<Scalars['ID']>;
  recentBlogByCategory?: InputMaybe<BlogTags>;
  /** All values that are contained in given list. */
  recentBlogByCategory_in?: InputMaybe<Array<InputMaybe<BlogTags>>>;
  /** Any other value that exists and is not equal to the given value. */
  recentBlogByCategory_not?: InputMaybe<BlogTags>;
  /** All values that are not contained in given list. */
  recentBlogByCategory_not_in?: InputMaybe<Array<InputMaybe<BlogTags>>>;
  wideColumn?: InputMaybe<Scalars['Boolean']>;
  /** Any other value that exists and is not equal to the given value. */
  wideColumn_not?: InputMaybe<Scalars['Boolean']>;
};

export enum FooterColumnOrderByInput {
  FooterColumnCssWrapperAsc = 'footerColumnCssWrapper_ASC',
  FooterColumnCssWrapperDesc = 'footerColumnCssWrapper_DESC',
  FooterIframeAsc = 'footerIframe_ASC',
  FooterIframeDesc = 'footerIframe_DESC',
  FooterTitleAsc = 'footerTitle_ASC',
  FooterTitleDesc = 'footerTitle_DESC',
  IdAsc = 'id_ASC',
  IdDesc = 'id_DESC',
  RecentBlogByCategoryAsc = 'recentBlogByCategory_ASC',
  RecentBlogByCategoryDesc = 'recentBlogByCategory_DESC',
  WideColumnAsc = 'wideColumn_ASC',
  WideColumnDesc = 'wideColumn_DESC'
}

export type FooterColumnParent = Navigation;

export type FooterColumnParentConnectInput = {
  Navigation?: InputMaybe<NavigationConnectInput>;
};

export type FooterColumnParentCreateInput = {
  Navigation?: InputMaybe<NavigationCreateInput>;
};

export type FooterColumnParentCreateManyInlineInput = {
  /** Connect multiple existing FooterColumnParent documents */
  connect?: InputMaybe<Array<FooterColumnParentWhereUniqueInput>>;
  /** Create and connect multiple existing FooterColumnParent documents */
  create?: InputMaybe<Array<FooterColumnParentCreateInput>>;
};

export type FooterColumnParentCreateOneInlineInput = {
  /** Connect one existing FooterColumnParent document */
  connect?: InputMaybe<FooterColumnParentWhereUniqueInput>;
  /** Create and connect one FooterColumnParent document */
  create?: InputMaybe<FooterColumnParentCreateInput>;
};

export type FooterColumnParentUpdateInput = {
  Navigation?: InputMaybe<NavigationUpdateInput>;
};

export type FooterColumnParentUpdateManyInlineInput = {
  /** Connect multiple existing FooterColumnParent documents */
  connect?: InputMaybe<Array<FooterColumnParentConnectInput>>;
  /** Create and connect multiple FooterColumnParent documents */
  create?: InputMaybe<Array<FooterColumnParentCreateInput>>;
  /** Delete multiple FooterColumnParent documents */
  delete?: InputMaybe<Array<FooterColumnParentWhereUniqueInput>>;
  /** Disconnect multiple FooterColumnParent documents */
  disconnect?: InputMaybe<Array<FooterColumnParentWhereUniqueInput>>;
  /** Override currently-connected documents with multiple existing FooterColumnParent documents */
  set?: InputMaybe<Array<FooterColumnParentWhereUniqueInput>>;
  /** Update multiple FooterColumnParent documents */
  update?: InputMaybe<Array<FooterColumnParentUpdateWithNestedWhereUniqueInput>>;
  /** Upsert multiple FooterColumnParent documents */
  upsert?: InputMaybe<Array<FooterColumnParentUpsertWithNestedWhereUniqueInput>>;
};

export type FooterColumnParentUpdateManyWithNestedWhereInput = {
  Navigation?: InputMaybe<NavigationUpdateManyWithNestedWhereInput>;
};

export type FooterColumnParentUpdateOneInlineInput = {
  /** Connect existing FooterColumnParent document */
  connect?: InputMaybe<FooterColumnParentWhereUniqueInput>;
  /** Create and connect one FooterColumnParent document */
  create?: InputMaybe<FooterColumnParentCreateInput>;
  /** Delete currently connected FooterColumnParent document */
  delete?: InputMaybe<Scalars['Boolean']>;
  /** Disconnect currently connected FooterColumnParent document */
  disconnect?: InputMaybe<Scalars['Boolean']>;
  /** Update single FooterColumnParent document */
  update?: InputMaybe<FooterColumnParentUpdateWithNestedWhereUniqueInput>;
  /** Upsert single FooterColumnParent document */
  upsert?: InputMaybe<FooterColumnParentUpsertWithNestedWhereUniqueInput>;
};

export type FooterColumnParentUpdateWithNestedWhereUniqueInput = {
  Navigation?: InputMaybe<NavigationUpdateWithNestedWhereUniqueInput>;
};

export type FooterColumnParentUpsertWithNestedWhereUniqueInput = {
  Navigation?: InputMaybe<NavigationUpsertWithNestedWhereUniqueInput>;
};

export type FooterColumnParentWhereInput = {
  Navigation?: InputMaybe<NavigationWhereInput>;
};

export type FooterColumnParentWhereUniqueInput = {
  Navigation?: InputMaybe<NavigationWhereUniqueInput>;
};

export type FooterColumnUpdateInput = {
  footerColumnCssWrapper?: InputMaybe<Scalars['String']>;
  footerIframe?: InputMaybe<Scalars['String']>;
  footerImage?: InputMaybe<AssetUpdateOneInlineInput>;
  footerLink?: InputMaybe<NavigationItemUpdateManyInlineInput>;
  footerText?: InputMaybe<Scalars['RichTextAST']>;
  footerTitle?: InputMaybe<Scalars['String']>;
  recentBlogByCategory?: InputMaybe<BlogTags>;
  wideColumn?: InputMaybe<Scalars['Boolean']>;
};

export type FooterColumnUpdateManyInlineInput = {
  /** Create and connect multiple FooterColumn component instances */
  create?: InputMaybe<Array<FooterColumnCreateWithPositionInput>>;
  /** Delete multiple FooterColumn documents */
  delete?: InputMaybe<Array<FooterColumnWhereUniqueInput>>;
  /** Update multiple FooterColumn component instances */
  update?: InputMaybe<Array<FooterColumnUpdateWithNestedWhereUniqueAndPositionInput>>;
  /** Upsert multiple FooterColumn component instances */
  upsert?: InputMaybe<Array<FooterColumnUpsertWithNestedWhereUniqueAndPositionInput>>;
};

export type FooterColumnUpdateManyInput = {
  footerColumnCssWrapper?: InputMaybe<Scalars['String']>;
  footerIframe?: InputMaybe<Scalars['String']>;
  footerText?: InputMaybe<Scalars['RichTextAST']>;
  footerTitle?: InputMaybe<Scalars['String']>;
  recentBlogByCategory?: InputMaybe<BlogTags>;
  wideColumn?: InputMaybe<Scalars['Boolean']>;
};

export type FooterColumnUpdateManyWithNestedWhereInput = {
  /** Update many input */
  data: FooterColumnUpdateManyInput;
  /** Document search */
  where: FooterColumnWhereInput;
};

export type FooterColumnUpdateOneInlineInput = {
  /** Create and connect one FooterColumn document */
  create?: InputMaybe<FooterColumnCreateInput>;
  /** Delete currently connected FooterColumn document */
  delete?: InputMaybe<Scalars['Boolean']>;
  /** Update single FooterColumn document */
  update?: InputMaybe<FooterColumnUpdateWithNestedWhereUniqueInput>;
  /** Upsert single FooterColumn document */
  upsert?: InputMaybe<FooterColumnUpsertWithNestedWhereUniqueInput>;
};

export type FooterColumnUpdateWithNestedWhereUniqueAndPositionInput = {
  /** Document to update */
  data?: InputMaybe<FooterColumnUpdateInput>;
  /** Position in the list of existing component instances, will default to appending at the end of list */
  position?: InputMaybe<ConnectPositionInput>;
  /** Unique component instance search */
  where: FooterColumnWhereUniqueInput;
};

export type FooterColumnUpdateWithNestedWhereUniqueInput = {
  /** Document to update */
  data: FooterColumnUpdateInput;
  /** Unique document search */
  where: FooterColumnWhereUniqueInput;
};

export type FooterColumnUpsertInput = {
  /** Create document if it didn't exist */
  create: FooterColumnCreateInput;
  /** Update document if it exists */
  update: FooterColumnUpdateInput;
};

export type FooterColumnUpsertWithNestedWhereUniqueAndPositionInput = {
  /** Document to upsert */
  data?: InputMaybe<FooterColumnUpsertInput>;
  /** Position in the list of existing component instances, will default to appending at the end of list */
  position?: InputMaybe<ConnectPositionInput>;
  /** Unique component instance search */
  where: FooterColumnWhereUniqueInput;
};

export type FooterColumnUpsertWithNestedWhereUniqueInput = {
  /** Upsert data */
  data: FooterColumnUpsertInput;
  /** Unique document search */
  where: FooterColumnWhereUniqueInput;
};

/** Identifies documents */
export type FooterColumnWhereInput = {
  /** Logical AND on all given filters. */
  AND?: InputMaybe<Array<FooterColumnWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: InputMaybe<Array<FooterColumnWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: InputMaybe<Array<FooterColumnWhereInput>>;
  /** Contains search across all appropriate fields. */
  _search?: InputMaybe<Scalars['String']>;
  footerColumnCssWrapper?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  footerColumnCssWrapper_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  footerColumnCssWrapper_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  footerColumnCssWrapper_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Any other value that exists and is not equal to the given value. */
  footerColumnCssWrapper_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  footerColumnCssWrapper_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  footerColumnCssWrapper_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  footerColumnCssWrapper_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  footerColumnCssWrapper_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  footerColumnCssWrapper_starts_with?: InputMaybe<Scalars['String']>;
  footerIframe?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  footerIframe_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  footerIframe_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  footerIframe_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Any other value that exists and is not equal to the given value. */
  footerIframe_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  footerIframe_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  footerIframe_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  footerIframe_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  footerIframe_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  footerIframe_starts_with?: InputMaybe<Scalars['String']>;
  footerImage?: InputMaybe<AssetWhereInput>;
  footerLink_every?: InputMaybe<NavigationItemWhereInput>;
  footerLink_none?: InputMaybe<NavigationItemWhereInput>;
  footerLink_some?: InputMaybe<NavigationItemWhereInput>;
  footerTitle?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  footerTitle_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  footerTitle_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  footerTitle_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Any other value that exists and is not equal to the given value. */
  footerTitle_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  footerTitle_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  footerTitle_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  footerTitle_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  footerTitle_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  footerTitle_starts_with?: InputMaybe<Scalars['String']>;
  id?: InputMaybe<Scalars['ID']>;
  /** All values containing the given string. */
  id_contains?: InputMaybe<Scalars['ID']>;
  /** All values ending with the given string. */
  id_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are contained in given list. */
  id_in?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** Any other value that exists and is not equal to the given value. */
  id_not?: InputMaybe<Scalars['ID']>;
  /** All values not containing the given string. */
  id_not_contains?: InputMaybe<Scalars['ID']>;
  /** All values not ending with the given string */
  id_not_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are not contained in given list. */
  id_not_in?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** All values not starting with the given string. */
  id_not_starts_with?: InputMaybe<Scalars['ID']>;
  /** All values starting with the given string. */
  id_starts_with?: InputMaybe<Scalars['ID']>;
  recentBlogByCategory?: InputMaybe<BlogTags>;
  /** All values that are contained in given list. */
  recentBlogByCategory_in?: InputMaybe<Array<InputMaybe<BlogTags>>>;
  /** Any other value that exists and is not equal to the given value. */
  recentBlogByCategory_not?: InputMaybe<BlogTags>;
  /** All values that are not contained in given list. */
  recentBlogByCategory_not_in?: InputMaybe<Array<InputMaybe<BlogTags>>>;
  wideColumn?: InputMaybe<Scalars['Boolean']>;
  /** Any other value that exists and is not equal to the given value. */
  wideColumn_not?: InputMaybe<Scalars['Boolean']>;
};

/** References FooterColumn record uniquely */
export type FooterColumnWhereUniqueInput = {
  id?: InputMaybe<Scalars['ID']>;
};

export enum GalleryLayout {
  Grid = 'grid',
  Infinite = 'infinite',
  Lightbox = 'lightbox',
  Mason = 'mason',
  Rotate = 'rotate',
  Slider = 'slider'
}

export type GridBox = Entity & {
  __typename?: 'GridBox';
  boxDescription?: Maybe<RichText>;
  boxDisplay?: Maybe<GridBoxDisplay>;
  boxImage?: Maybe<Asset>;
  boxLink?: Maybe<Scalars['String']>;
  boxTitle?: Maybe<Scalars['String']>;
  /** The unique identifier */
  id: Scalars['ID'];
  /** System stage field */
  stage: Stage;
};


export type GridBoxBoxImageArgs = {
  forceParentLocale?: InputMaybe<Scalars['Boolean']>;
  locales?: InputMaybe<Array<Locale>>;
};

export type GridBoxConnectInput = {
  /** Allow to specify document position in list of connected documents, will default to appending at end of list */
  position?: InputMaybe<ConnectPositionInput>;
  /** Document to connect */
  where: GridBoxWhereUniqueInput;
};

/** A connection to a list of items. */
export type GridBoxConnection = {
  __typename?: 'GridBoxConnection';
  aggregate: Aggregate;
  /** A list of edges. */
  edges: Array<GridBoxEdge>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
};

export type GridBoxCreateInput = {
  boxDescription?: InputMaybe<Scalars['RichTextAST']>;
  boxDisplay?: InputMaybe<GridBoxDisplay>;
  boxImage?: InputMaybe<AssetCreateOneInlineInput>;
  boxLink?: InputMaybe<Scalars['String']>;
  boxTitle?: InputMaybe<Scalars['String']>;
};

export type GridBoxCreateManyInlineInput = {
  /** Create and connect multiple existing GridBox documents */
  create?: InputMaybe<Array<GridBoxCreateInput>>;
};

export type GridBoxCreateOneInlineInput = {
  /** Create and connect one GridBox document */
  create?: InputMaybe<GridBoxCreateInput>;
};

export type GridBoxCreateWithPositionInput = {
  /** Document to create */
  data: GridBoxCreateInput;
  /** Position in the list of existing component instances, will default to appending at the end of list */
  position?: InputMaybe<ConnectPositionInput>;
};

export enum GridBoxDisplay {
  Compact = 'compact',
  Content = 'content',
  Inset = 'inset',
  Slider = 'slider',
  Tall = 'tall'
}

/** An edge in a connection. */
export type GridBoxEdge = {
  __typename?: 'GridBoxEdge';
  /** A cursor for use in pagination. */
  cursor: Scalars['String'];
  /** The item at the end of the edge. */
  node: GridBox;
};

/** Identifies documents */
export type GridBoxManyWhereInput = {
  /** Logical AND on all given filters. */
  AND?: InputMaybe<Array<GridBoxWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: InputMaybe<Array<GridBoxWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: InputMaybe<Array<GridBoxWhereInput>>;
  /** Contains search across all appropriate fields. */
  _search?: InputMaybe<Scalars['String']>;
  boxDisplay?: InputMaybe<GridBoxDisplay>;
  /** All values that are contained in given list. */
  boxDisplay_in?: InputMaybe<Array<InputMaybe<GridBoxDisplay>>>;
  /** Any other value that exists and is not equal to the given value. */
  boxDisplay_not?: InputMaybe<GridBoxDisplay>;
  /** All values that are not contained in given list. */
  boxDisplay_not_in?: InputMaybe<Array<InputMaybe<GridBoxDisplay>>>;
  boxImage?: InputMaybe<AssetWhereInput>;
  boxLink?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  boxLink_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  boxLink_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  boxLink_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Any other value that exists and is not equal to the given value. */
  boxLink_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  boxLink_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  boxLink_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  boxLink_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  boxLink_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  boxLink_starts_with?: InputMaybe<Scalars['String']>;
  boxTitle?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  boxTitle_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  boxTitle_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  boxTitle_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Any other value that exists and is not equal to the given value. */
  boxTitle_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  boxTitle_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  boxTitle_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  boxTitle_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  boxTitle_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  boxTitle_starts_with?: InputMaybe<Scalars['String']>;
  id?: InputMaybe<Scalars['ID']>;
  /** All values containing the given string. */
  id_contains?: InputMaybe<Scalars['ID']>;
  /** All values ending with the given string. */
  id_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are contained in given list. */
  id_in?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** Any other value that exists and is not equal to the given value. */
  id_not?: InputMaybe<Scalars['ID']>;
  /** All values not containing the given string. */
  id_not_contains?: InputMaybe<Scalars['ID']>;
  /** All values not ending with the given string */
  id_not_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are not contained in given list. */
  id_not_in?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** All values not starting with the given string. */
  id_not_starts_with?: InputMaybe<Scalars['ID']>;
  /** All values starting with the given string. */
  id_starts_with?: InputMaybe<Scalars['ID']>;
};

export enum GridBoxOrderByInput {
  BoxDisplayAsc = 'boxDisplay_ASC',
  BoxDisplayDesc = 'boxDisplay_DESC',
  BoxLinkAsc = 'boxLink_ASC',
  BoxLinkDesc = 'boxLink_DESC',
  BoxTitleAsc = 'boxTitle_ASC',
  BoxTitleDesc = 'boxTitle_DESC',
  IdAsc = 'id_ASC',
  IdDesc = 'id_DESC'
}

export type GridBoxParent = LayoutBlockColumn;

export type GridBoxParentConnectInput = {
  LayoutBlockColumn?: InputMaybe<LayoutBlockColumnConnectInput>;
};

export type GridBoxParentCreateInput = {
  LayoutBlockColumn?: InputMaybe<LayoutBlockColumnCreateInput>;
};

export type GridBoxParentCreateManyInlineInput = {
  /** Create and connect multiple existing GridBoxParent documents */
  create?: InputMaybe<Array<GridBoxParentCreateInput>>;
};

export type GridBoxParentCreateOneInlineInput = {
  /** Create and connect one GridBoxParent document */
  create?: InputMaybe<GridBoxParentCreateInput>;
};

export type GridBoxParentCreateWithPositionInput = {
  LayoutBlockColumn?: InputMaybe<LayoutBlockColumnCreateWithPositionInput>;
};

export type GridBoxParentUpdateInput = {
  LayoutBlockColumn?: InputMaybe<LayoutBlockColumnUpdateInput>;
};

export type GridBoxParentUpdateManyInlineInput = {
  /** Create and connect multiple GridBoxParent component instances */
  create?: InputMaybe<Array<GridBoxParentCreateWithPositionInput>>;
  /** Delete multiple GridBoxParent documents */
  delete?: InputMaybe<Array<GridBoxParentWhereUniqueInput>>;
  /** Update multiple GridBoxParent component instances */
  update?: InputMaybe<Array<GridBoxParentUpdateWithNestedWhereUniqueAndPositionInput>>;
  /** Upsert multiple GridBoxParent component instances */
  upsert?: InputMaybe<Array<GridBoxParentUpsertWithNestedWhereUniqueAndPositionInput>>;
};

export type GridBoxParentUpdateManyWithNestedWhereInput = {
  LayoutBlockColumn?: InputMaybe<LayoutBlockColumnUpdateManyWithNestedWhereInput>;
};

export type GridBoxParentUpdateOneInlineInput = {
  /** Create and connect one GridBoxParent document */
  create?: InputMaybe<GridBoxParentCreateInput>;
  /** Delete currently connected GridBoxParent document */
  delete?: InputMaybe<Scalars['Boolean']>;
  /** Update single GridBoxParent document */
  update?: InputMaybe<GridBoxParentUpdateWithNestedWhereUniqueInput>;
  /** Upsert single GridBoxParent document */
  upsert?: InputMaybe<GridBoxParentUpsertWithNestedWhereUniqueInput>;
};

export type GridBoxParentUpdateWithNestedWhereUniqueAndPositionInput = {
  LayoutBlockColumn?: InputMaybe<LayoutBlockColumnUpdateWithNestedWhereUniqueAndPositionInput>;
};

export type GridBoxParentUpdateWithNestedWhereUniqueInput = {
  LayoutBlockColumn?: InputMaybe<LayoutBlockColumnUpdateWithNestedWhereUniqueInput>;
};

export type GridBoxParentUpsertWithNestedWhereUniqueAndPositionInput = {
  LayoutBlockColumn?: InputMaybe<LayoutBlockColumnUpsertWithNestedWhereUniqueAndPositionInput>;
};

export type GridBoxParentUpsertWithNestedWhereUniqueInput = {
  LayoutBlockColumn?: InputMaybe<LayoutBlockColumnUpsertWithNestedWhereUniqueInput>;
};

export type GridBoxParentWhereInput = {
  LayoutBlockColumn?: InputMaybe<LayoutBlockColumnWhereInput>;
};

export type GridBoxParentWhereUniqueInput = {
  LayoutBlockColumn?: InputMaybe<LayoutBlockColumnWhereUniqueInput>;
};

export type GridBoxUpdateInput = {
  boxDescription?: InputMaybe<Scalars['RichTextAST']>;
  boxDisplay?: InputMaybe<GridBoxDisplay>;
  boxImage?: InputMaybe<AssetUpdateOneInlineInput>;
  boxLink?: InputMaybe<Scalars['String']>;
  boxTitle?: InputMaybe<Scalars['String']>;
};

export type GridBoxUpdateManyInlineInput = {
  /** Create and connect multiple GridBox component instances */
  create?: InputMaybe<Array<GridBoxCreateWithPositionInput>>;
  /** Delete multiple GridBox documents */
  delete?: InputMaybe<Array<GridBoxWhereUniqueInput>>;
  /** Update multiple GridBox component instances */
  update?: InputMaybe<Array<GridBoxUpdateWithNestedWhereUniqueAndPositionInput>>;
  /** Upsert multiple GridBox component instances */
  upsert?: InputMaybe<Array<GridBoxUpsertWithNestedWhereUniqueAndPositionInput>>;
};

export type GridBoxUpdateManyInput = {
  boxDescription?: InputMaybe<Scalars['RichTextAST']>;
  boxDisplay?: InputMaybe<GridBoxDisplay>;
  boxLink?: InputMaybe<Scalars['String']>;
  boxTitle?: InputMaybe<Scalars['String']>;
};

export type GridBoxUpdateManyWithNestedWhereInput = {
  /** Update many input */
  data: GridBoxUpdateManyInput;
  /** Document search */
  where: GridBoxWhereInput;
};

export type GridBoxUpdateOneInlineInput = {
  /** Create and connect one GridBox document */
  create?: InputMaybe<GridBoxCreateInput>;
  /** Delete currently connected GridBox document */
  delete?: InputMaybe<Scalars['Boolean']>;
  /** Update single GridBox document */
  update?: InputMaybe<GridBoxUpdateWithNestedWhereUniqueInput>;
  /** Upsert single GridBox document */
  upsert?: InputMaybe<GridBoxUpsertWithNestedWhereUniqueInput>;
};

export type GridBoxUpdateWithNestedWhereUniqueAndPositionInput = {
  /** Document to update */
  data?: InputMaybe<GridBoxUpdateInput>;
  /** Position in the list of existing component instances, will default to appending at the end of list */
  position?: InputMaybe<ConnectPositionInput>;
  /** Unique component instance search */
  where: GridBoxWhereUniqueInput;
};

export type GridBoxUpdateWithNestedWhereUniqueInput = {
  /** Document to update */
  data: GridBoxUpdateInput;
  /** Unique document search */
  where: GridBoxWhereUniqueInput;
};

export type GridBoxUpsertInput = {
  /** Create document if it didn't exist */
  create: GridBoxCreateInput;
  /** Update document if it exists */
  update: GridBoxUpdateInput;
};

export type GridBoxUpsertWithNestedWhereUniqueAndPositionInput = {
  /** Document to upsert */
  data?: InputMaybe<GridBoxUpsertInput>;
  /** Position in the list of existing component instances, will default to appending at the end of list */
  position?: InputMaybe<ConnectPositionInput>;
  /** Unique component instance search */
  where: GridBoxWhereUniqueInput;
};

export type GridBoxUpsertWithNestedWhereUniqueInput = {
  /** Upsert data */
  data: GridBoxUpsertInput;
  /** Unique document search */
  where: GridBoxWhereUniqueInput;
};

/** Identifies documents */
export type GridBoxWhereInput = {
  /** Logical AND on all given filters. */
  AND?: InputMaybe<Array<GridBoxWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: InputMaybe<Array<GridBoxWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: InputMaybe<Array<GridBoxWhereInput>>;
  /** Contains search across all appropriate fields. */
  _search?: InputMaybe<Scalars['String']>;
  boxDisplay?: InputMaybe<GridBoxDisplay>;
  /** All values that are contained in given list. */
  boxDisplay_in?: InputMaybe<Array<InputMaybe<GridBoxDisplay>>>;
  /** Any other value that exists and is not equal to the given value. */
  boxDisplay_not?: InputMaybe<GridBoxDisplay>;
  /** All values that are not contained in given list. */
  boxDisplay_not_in?: InputMaybe<Array<InputMaybe<GridBoxDisplay>>>;
  boxImage?: InputMaybe<AssetWhereInput>;
  boxLink?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  boxLink_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  boxLink_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  boxLink_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Any other value that exists and is not equal to the given value. */
  boxLink_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  boxLink_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  boxLink_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  boxLink_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  boxLink_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  boxLink_starts_with?: InputMaybe<Scalars['String']>;
  boxTitle?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  boxTitle_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  boxTitle_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  boxTitle_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Any other value that exists and is not equal to the given value. */
  boxTitle_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  boxTitle_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  boxTitle_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  boxTitle_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  boxTitle_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  boxTitle_starts_with?: InputMaybe<Scalars['String']>;
  id?: InputMaybe<Scalars['ID']>;
  /** All values containing the given string. */
  id_contains?: InputMaybe<Scalars['ID']>;
  /** All values ending with the given string. */
  id_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are contained in given list. */
  id_in?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** Any other value that exists and is not equal to the given value. */
  id_not?: InputMaybe<Scalars['ID']>;
  /** All values not containing the given string. */
  id_not_contains?: InputMaybe<Scalars['ID']>;
  /** All values not ending with the given string */
  id_not_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are not contained in given list. */
  id_not_in?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** All values not starting with the given string. */
  id_not_starts_with?: InputMaybe<Scalars['ID']>;
  /** All values starting with the given string. */
  id_starts_with?: InputMaybe<Scalars['ID']>;
};

/** References GridBox record uniquely */
export type GridBoxWhereUniqueInput = {
  id?: InputMaybe<Scalars['ID']>;
};

export type HeroMediaSlider = Entity & {
  __typename?: 'HeroMediaSlider';
  callToAction: Array<CallToAction>;
  displaySocialMedia?: Maybe<Scalars['Boolean']>;
  /** The unique identifier */
  id: Scalars['ID'];
  mediaType?: Maybe<MediaType>;
  sliderCssWrapper?: Maybe<Scalars['String']>;
  sliderMediaBackground?: Maybe<Asset>;
  /** System stage field */
  stage: Stage;
  textContent?: Maybe<TextContent>;
  youtubeVideoId?: Maybe<Scalars['String']>;
};


export type HeroMediaSliderCallToActionArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  forceParentLocale?: InputMaybe<Scalars['Boolean']>;
  last?: InputMaybe<Scalars['Int']>;
  locales?: InputMaybe<Array<Locale>>;
  orderBy?: InputMaybe<CallToActionOrderByInput>;
  skip?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<CallToActionWhereInput>;
};


export type HeroMediaSliderSliderMediaBackgroundArgs = {
  forceParentLocale?: InputMaybe<Scalars['Boolean']>;
  locales?: InputMaybe<Array<Locale>>;
};


export type HeroMediaSliderTextContentArgs = {
  forceParentLocale?: InputMaybe<Scalars['Boolean']>;
  locales?: InputMaybe<Array<Locale>>;
};

export type HeroMediaSliderConnectInput = {
  /** Allow to specify document position in list of connected documents, will default to appending at end of list */
  position?: InputMaybe<ConnectPositionInput>;
  /** Document to connect */
  where: HeroMediaSliderWhereUniqueInput;
};

/** A connection to a list of items. */
export type HeroMediaSliderConnection = {
  __typename?: 'HeroMediaSliderConnection';
  aggregate: Aggregate;
  /** A list of edges. */
  edges: Array<HeroMediaSliderEdge>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
};

export type HeroMediaSliderCreateInput = {
  callToAction?: InputMaybe<CallToActionCreateManyInlineInput>;
  displaySocialMedia?: InputMaybe<Scalars['Boolean']>;
  mediaType?: InputMaybe<MediaType>;
  sliderCssWrapper?: InputMaybe<Scalars['String']>;
  sliderMediaBackground?: InputMaybe<AssetCreateOneInlineInput>;
  textContent?: InputMaybe<TextContentCreateOneInlineInput>;
  youtubeVideoId?: InputMaybe<Scalars['String']>;
};

export type HeroMediaSliderCreateManyInlineInput = {
  /** Create and connect multiple existing HeroMediaSlider documents */
  create?: InputMaybe<Array<HeroMediaSliderCreateInput>>;
};

export type HeroMediaSliderCreateOneInlineInput = {
  /** Create and connect one HeroMediaSlider document */
  create?: InputMaybe<HeroMediaSliderCreateInput>;
};

export type HeroMediaSliderCreateWithPositionInput = {
  /** Document to create */
  data: HeroMediaSliderCreateInput;
  /** Position in the list of existing component instances, will default to appending at the end of list */
  position?: InputMaybe<ConnectPositionInput>;
};

/** An edge in a connection. */
export type HeroMediaSliderEdge = {
  __typename?: 'HeroMediaSliderEdge';
  /** A cursor for use in pagination. */
  cursor: Scalars['String'];
  /** The item at the end of the edge. */
  node: HeroMediaSlider;
};

/** Identifies documents */
export type HeroMediaSliderManyWhereInput = {
  /** Logical AND on all given filters. */
  AND?: InputMaybe<Array<HeroMediaSliderWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: InputMaybe<Array<HeroMediaSliderWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: InputMaybe<Array<HeroMediaSliderWhereInput>>;
  /** Contains search across all appropriate fields. */
  _search?: InputMaybe<Scalars['String']>;
  callToAction_every?: InputMaybe<CallToActionWhereInput>;
  callToAction_none?: InputMaybe<CallToActionWhereInput>;
  callToAction_some?: InputMaybe<CallToActionWhereInput>;
  displaySocialMedia?: InputMaybe<Scalars['Boolean']>;
  /** Any other value that exists and is not equal to the given value. */
  displaySocialMedia_not?: InputMaybe<Scalars['Boolean']>;
  id?: InputMaybe<Scalars['ID']>;
  /** All values containing the given string. */
  id_contains?: InputMaybe<Scalars['ID']>;
  /** All values ending with the given string. */
  id_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are contained in given list. */
  id_in?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** Any other value that exists and is not equal to the given value. */
  id_not?: InputMaybe<Scalars['ID']>;
  /** All values not containing the given string. */
  id_not_contains?: InputMaybe<Scalars['ID']>;
  /** All values not ending with the given string */
  id_not_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are not contained in given list. */
  id_not_in?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** All values not starting with the given string. */
  id_not_starts_with?: InputMaybe<Scalars['ID']>;
  /** All values starting with the given string. */
  id_starts_with?: InputMaybe<Scalars['ID']>;
  mediaType?: InputMaybe<MediaType>;
  /** All values that are contained in given list. */
  mediaType_in?: InputMaybe<Array<InputMaybe<MediaType>>>;
  /** Any other value that exists and is not equal to the given value. */
  mediaType_not?: InputMaybe<MediaType>;
  /** All values that are not contained in given list. */
  mediaType_not_in?: InputMaybe<Array<InputMaybe<MediaType>>>;
  sliderCssWrapper?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  sliderCssWrapper_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  sliderCssWrapper_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  sliderCssWrapper_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Any other value that exists and is not equal to the given value. */
  sliderCssWrapper_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  sliderCssWrapper_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  sliderCssWrapper_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  sliderCssWrapper_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  sliderCssWrapper_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  sliderCssWrapper_starts_with?: InputMaybe<Scalars['String']>;
  sliderMediaBackground?: InputMaybe<AssetWhereInput>;
  textContent?: InputMaybe<TextContentWhereInput>;
  youtubeVideoId?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  youtubeVideoId_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  youtubeVideoId_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  youtubeVideoId_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Any other value that exists and is not equal to the given value. */
  youtubeVideoId_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  youtubeVideoId_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  youtubeVideoId_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  youtubeVideoId_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  youtubeVideoId_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  youtubeVideoId_starts_with?: InputMaybe<Scalars['String']>;
};

export enum HeroMediaSliderOrderByInput {
  DisplaySocialMediaAsc = 'displaySocialMedia_ASC',
  DisplaySocialMediaDesc = 'displaySocialMedia_DESC',
  IdAsc = 'id_ASC',
  IdDesc = 'id_DESC',
  MediaTypeAsc = 'mediaType_ASC',
  MediaTypeDesc = 'mediaType_DESC',
  SliderCssWrapperAsc = 'sliderCssWrapper_ASC',
  SliderCssWrapperDesc = 'sliderCssWrapper_DESC',
  YoutubeVideoIdAsc = 'youtubeVideoId_ASC',
  YoutubeVideoIdDesc = 'youtubeVideoId_DESC'
}

export type HeroMediaSliderParent = LayoutBlockColumn;

export type HeroMediaSliderParentConnectInput = {
  LayoutBlockColumn?: InputMaybe<LayoutBlockColumnConnectInput>;
};

export type HeroMediaSliderParentCreateInput = {
  LayoutBlockColumn?: InputMaybe<LayoutBlockColumnCreateInput>;
};

export type HeroMediaSliderParentCreateManyInlineInput = {
  /** Create and connect multiple existing HeroMediaSliderParent documents */
  create?: InputMaybe<Array<HeroMediaSliderParentCreateInput>>;
};

export type HeroMediaSliderParentCreateOneInlineInput = {
  /** Create and connect one HeroMediaSliderParent document */
  create?: InputMaybe<HeroMediaSliderParentCreateInput>;
};

export type HeroMediaSliderParentCreateWithPositionInput = {
  LayoutBlockColumn?: InputMaybe<LayoutBlockColumnCreateWithPositionInput>;
};

export type HeroMediaSliderParentUpdateInput = {
  LayoutBlockColumn?: InputMaybe<LayoutBlockColumnUpdateInput>;
};

export type HeroMediaSliderParentUpdateManyInlineInput = {
  /** Create and connect multiple HeroMediaSliderParent component instances */
  create?: InputMaybe<Array<HeroMediaSliderParentCreateWithPositionInput>>;
  /** Delete multiple HeroMediaSliderParent documents */
  delete?: InputMaybe<Array<HeroMediaSliderParentWhereUniqueInput>>;
  /** Update multiple HeroMediaSliderParent component instances */
  update?: InputMaybe<Array<HeroMediaSliderParentUpdateWithNestedWhereUniqueAndPositionInput>>;
  /** Upsert multiple HeroMediaSliderParent component instances */
  upsert?: InputMaybe<Array<HeroMediaSliderParentUpsertWithNestedWhereUniqueAndPositionInput>>;
};

export type HeroMediaSliderParentUpdateManyWithNestedWhereInput = {
  LayoutBlockColumn?: InputMaybe<LayoutBlockColumnUpdateManyWithNestedWhereInput>;
};

export type HeroMediaSliderParentUpdateOneInlineInput = {
  /** Create and connect one HeroMediaSliderParent document */
  create?: InputMaybe<HeroMediaSliderParentCreateInput>;
  /** Delete currently connected HeroMediaSliderParent document */
  delete?: InputMaybe<Scalars['Boolean']>;
  /** Update single HeroMediaSliderParent document */
  update?: InputMaybe<HeroMediaSliderParentUpdateWithNestedWhereUniqueInput>;
  /** Upsert single HeroMediaSliderParent document */
  upsert?: InputMaybe<HeroMediaSliderParentUpsertWithNestedWhereUniqueInput>;
};

export type HeroMediaSliderParentUpdateWithNestedWhereUniqueAndPositionInput = {
  LayoutBlockColumn?: InputMaybe<LayoutBlockColumnUpdateWithNestedWhereUniqueAndPositionInput>;
};

export type HeroMediaSliderParentUpdateWithNestedWhereUniqueInput = {
  LayoutBlockColumn?: InputMaybe<LayoutBlockColumnUpdateWithNestedWhereUniqueInput>;
};

export type HeroMediaSliderParentUpsertWithNestedWhereUniqueAndPositionInput = {
  LayoutBlockColumn?: InputMaybe<LayoutBlockColumnUpsertWithNestedWhereUniqueAndPositionInput>;
};

export type HeroMediaSliderParentUpsertWithNestedWhereUniqueInput = {
  LayoutBlockColumn?: InputMaybe<LayoutBlockColumnUpsertWithNestedWhereUniqueInput>;
};

export type HeroMediaSliderParentWhereInput = {
  LayoutBlockColumn?: InputMaybe<LayoutBlockColumnWhereInput>;
};

export type HeroMediaSliderParentWhereUniqueInput = {
  LayoutBlockColumn?: InputMaybe<LayoutBlockColumnWhereUniqueInput>;
};

export type HeroMediaSliderUpdateInput = {
  callToAction?: InputMaybe<CallToActionUpdateManyInlineInput>;
  displaySocialMedia?: InputMaybe<Scalars['Boolean']>;
  mediaType?: InputMaybe<MediaType>;
  sliderCssWrapper?: InputMaybe<Scalars['String']>;
  sliderMediaBackground?: InputMaybe<AssetUpdateOneInlineInput>;
  textContent?: InputMaybe<TextContentUpdateOneInlineInput>;
  youtubeVideoId?: InputMaybe<Scalars['String']>;
};

export type HeroMediaSliderUpdateManyInlineInput = {
  /** Create and connect multiple HeroMediaSlider component instances */
  create?: InputMaybe<Array<HeroMediaSliderCreateWithPositionInput>>;
  /** Delete multiple HeroMediaSlider documents */
  delete?: InputMaybe<Array<HeroMediaSliderWhereUniqueInput>>;
  /** Update multiple HeroMediaSlider component instances */
  update?: InputMaybe<Array<HeroMediaSliderUpdateWithNestedWhereUniqueAndPositionInput>>;
  /** Upsert multiple HeroMediaSlider component instances */
  upsert?: InputMaybe<Array<HeroMediaSliderUpsertWithNestedWhereUniqueAndPositionInput>>;
};

export type HeroMediaSliderUpdateManyInput = {
  displaySocialMedia?: InputMaybe<Scalars['Boolean']>;
  mediaType?: InputMaybe<MediaType>;
  sliderCssWrapper?: InputMaybe<Scalars['String']>;
  youtubeVideoId?: InputMaybe<Scalars['String']>;
};

export type HeroMediaSliderUpdateManyWithNestedWhereInput = {
  /** Update many input */
  data: HeroMediaSliderUpdateManyInput;
  /** Document search */
  where: HeroMediaSliderWhereInput;
};

export type HeroMediaSliderUpdateOneInlineInput = {
  /** Create and connect one HeroMediaSlider document */
  create?: InputMaybe<HeroMediaSliderCreateInput>;
  /** Delete currently connected HeroMediaSlider document */
  delete?: InputMaybe<Scalars['Boolean']>;
  /** Update single HeroMediaSlider document */
  update?: InputMaybe<HeroMediaSliderUpdateWithNestedWhereUniqueInput>;
  /** Upsert single HeroMediaSlider document */
  upsert?: InputMaybe<HeroMediaSliderUpsertWithNestedWhereUniqueInput>;
};

export type HeroMediaSliderUpdateWithNestedWhereUniqueAndPositionInput = {
  /** Document to update */
  data?: InputMaybe<HeroMediaSliderUpdateInput>;
  /** Position in the list of existing component instances, will default to appending at the end of list */
  position?: InputMaybe<ConnectPositionInput>;
  /** Unique component instance search */
  where: HeroMediaSliderWhereUniqueInput;
};

export type HeroMediaSliderUpdateWithNestedWhereUniqueInput = {
  /** Document to update */
  data: HeroMediaSliderUpdateInput;
  /** Unique document search */
  where: HeroMediaSliderWhereUniqueInput;
};

export type HeroMediaSliderUpsertInput = {
  /** Create document if it didn't exist */
  create: HeroMediaSliderCreateInput;
  /** Update document if it exists */
  update: HeroMediaSliderUpdateInput;
};

export type HeroMediaSliderUpsertWithNestedWhereUniqueAndPositionInput = {
  /** Document to upsert */
  data?: InputMaybe<HeroMediaSliderUpsertInput>;
  /** Position in the list of existing component instances, will default to appending at the end of list */
  position?: InputMaybe<ConnectPositionInput>;
  /** Unique component instance search */
  where: HeroMediaSliderWhereUniqueInput;
};

export type HeroMediaSliderUpsertWithNestedWhereUniqueInput = {
  /** Upsert data */
  data: HeroMediaSliderUpsertInput;
  /** Unique document search */
  where: HeroMediaSliderWhereUniqueInput;
};

/** Identifies documents */
export type HeroMediaSliderWhereInput = {
  /** Logical AND on all given filters. */
  AND?: InputMaybe<Array<HeroMediaSliderWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: InputMaybe<Array<HeroMediaSliderWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: InputMaybe<Array<HeroMediaSliderWhereInput>>;
  /** Contains search across all appropriate fields. */
  _search?: InputMaybe<Scalars['String']>;
  callToAction_every?: InputMaybe<CallToActionWhereInput>;
  callToAction_none?: InputMaybe<CallToActionWhereInput>;
  callToAction_some?: InputMaybe<CallToActionWhereInput>;
  displaySocialMedia?: InputMaybe<Scalars['Boolean']>;
  /** Any other value that exists and is not equal to the given value. */
  displaySocialMedia_not?: InputMaybe<Scalars['Boolean']>;
  id?: InputMaybe<Scalars['ID']>;
  /** All values containing the given string. */
  id_contains?: InputMaybe<Scalars['ID']>;
  /** All values ending with the given string. */
  id_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are contained in given list. */
  id_in?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** Any other value that exists and is not equal to the given value. */
  id_not?: InputMaybe<Scalars['ID']>;
  /** All values not containing the given string. */
  id_not_contains?: InputMaybe<Scalars['ID']>;
  /** All values not ending with the given string */
  id_not_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are not contained in given list. */
  id_not_in?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** All values not starting with the given string. */
  id_not_starts_with?: InputMaybe<Scalars['ID']>;
  /** All values starting with the given string. */
  id_starts_with?: InputMaybe<Scalars['ID']>;
  mediaType?: InputMaybe<MediaType>;
  /** All values that are contained in given list. */
  mediaType_in?: InputMaybe<Array<InputMaybe<MediaType>>>;
  /** Any other value that exists and is not equal to the given value. */
  mediaType_not?: InputMaybe<MediaType>;
  /** All values that are not contained in given list. */
  mediaType_not_in?: InputMaybe<Array<InputMaybe<MediaType>>>;
  sliderCssWrapper?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  sliderCssWrapper_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  sliderCssWrapper_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  sliderCssWrapper_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Any other value that exists and is not equal to the given value. */
  sliderCssWrapper_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  sliderCssWrapper_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  sliderCssWrapper_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  sliderCssWrapper_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  sliderCssWrapper_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  sliderCssWrapper_starts_with?: InputMaybe<Scalars['String']>;
  sliderMediaBackground?: InputMaybe<AssetWhereInput>;
  textContent?: InputMaybe<TextContentWhereInput>;
  youtubeVideoId?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  youtubeVideoId_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  youtubeVideoId_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  youtubeVideoId_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Any other value that exists and is not equal to the given value. */
  youtubeVideoId_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  youtubeVideoId_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  youtubeVideoId_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  youtubeVideoId_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  youtubeVideoId_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  youtubeVideoId_starts_with?: InputMaybe<Scalars['String']>;
};

/** References HeroMediaSlider record uniquely */
export type HeroMediaSliderWhereUniqueInput = {
  id?: InputMaybe<Scalars['ID']>;
};

export enum ImageFit {
  /** Resizes the image to fit within the specified parameters without distorting, cropping, or changing the aspect ratio. */
  Clip = 'clip',
  /** Resizes the image to fit the specified parameters exactly by removing any parts of the image that don't fit within the boundaries. */
  Crop = 'crop',
  /** Resizes the image to fit within the parameters, but as opposed to 'fit:clip' will not scale the image if the image is smaller than the output size. */
  Max = 'max',
  /** Resizes the image to fit the specified parameters exactly by scaling the image to the desired size. The aspect ratio of the image is not respected and the image can be distorted using this method. */
  Scale = 'scale'
}

export type ImageResizeInput = {
  /** The default value for the fit parameter is fit:clip. */
  fit?: InputMaybe<ImageFit>;
  /** The height in pixels to resize the image to. The value must be an integer from 1 to 10000. */
  height?: InputMaybe<Scalars['Int']>;
  /** The width in pixels to resize the image to. The value must be an integer from 1 to 10000. */
  width?: InputMaybe<Scalars['Int']>;
};

export enum ImageStyle {
  Border = 'border',
  Circle = 'circle',
  Full = 'full',
  Large = 'large',
  Medium = 'medium',
  Rounded = 'rounded',
  Small = 'small',
  Xl = 'xl',
  Xxl = 'xxl'
}

/** Transformations for Images */
export type ImageTransformationInput = {
  /** Resizes the image */
  resize?: InputMaybe<ImageResizeInput>;
};

export type LayoutBlock = Entity & {
  __typename?: 'LayoutBlock';
  backgroundColor?: Maybe<Color>;
  backgroundImage?: Maybe<Asset>;
  cssClass?: Maybe<Scalars['String']>;
  /** The unique identifier */
  id: Scalars['ID'];
  layoutBlockColumns: Array<LayoutBlockColumn>;
  /** System stage field */
  stage: Stage;
};


export type LayoutBlockBackgroundImageArgs = {
  forceParentLocale?: InputMaybe<Scalars['Boolean']>;
  locales?: InputMaybe<Array<Locale>>;
};


export type LayoutBlockLayoutBlockColumnsArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  forceParentLocale?: InputMaybe<Scalars['Boolean']>;
  last?: InputMaybe<Scalars['Int']>;
  locales?: InputMaybe<Array<Locale>>;
  orderBy?: InputMaybe<LayoutBlockColumnOrderByInput>;
  skip?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<LayoutBlockColumnWhereInput>;
};

export type LayoutBlockColumn = Entity & {
  __typename?: 'LayoutBlockColumn';
  backgroundImage?: Maybe<Asset>;
  contentTags?: Maybe<ContentTag>;
  cssClass?: Maybe<Scalars['String']>;
  elements?: Maybe<Element>;
  hideBlockColumn?: Maybe<Scalars['Boolean']>;
  htmlId?: Maybe<Scalars['String']>;
  /** The unique identifier */
  id: Scalars['ID'];
  sections: Array<LayoutBlockColumnsectionsUnion>;
  /** System stage field */
  stage: Stage;
};


export type LayoutBlockColumnBackgroundImageArgs = {
  forceParentLocale?: InputMaybe<Scalars['Boolean']>;
  locales?: InputMaybe<Array<Locale>>;
};


export type LayoutBlockColumnContentTagsArgs = {
  forceParentLocale?: InputMaybe<Scalars['Boolean']>;
  locales?: InputMaybe<Array<Locale>>;
};


export type LayoutBlockColumnElementsArgs = {
  forceParentLocale?: InputMaybe<Scalars['Boolean']>;
  locales?: InputMaybe<Array<Locale>>;
};


export type LayoutBlockColumnSectionsArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  forceParentLocale?: InputMaybe<Scalars['Boolean']>;
  last?: InputMaybe<Scalars['Int']>;
  locales?: InputMaybe<Array<Locale>>;
  skip?: InputMaybe<Scalars['Int']>;
};

export type LayoutBlockColumnConnectInput = {
  /** Allow to specify document position in list of connected documents, will default to appending at end of list */
  position?: InputMaybe<ConnectPositionInput>;
  /** Document to connect */
  where: LayoutBlockColumnWhereUniqueInput;
};

/** A connection to a list of items. */
export type LayoutBlockColumnConnection = {
  __typename?: 'LayoutBlockColumnConnection';
  aggregate: Aggregate;
  /** A list of edges. */
  edges: Array<LayoutBlockColumnEdge>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
};

export type LayoutBlockColumnCreateInput = {
  backgroundImage?: InputMaybe<AssetCreateOneInlineInput>;
  contentTags?: InputMaybe<ContentTagCreateOneInlineInput>;
  cssClass?: InputMaybe<Scalars['String']>;
  elements?: InputMaybe<ElementCreateOneInlineInput>;
  hideBlockColumn?: InputMaybe<Scalars['Boolean']>;
  htmlId?: InputMaybe<Scalars['String']>;
  sections?: InputMaybe<LayoutBlockColumnsectionsUnionCreateManyInlineInput>;
};

export type LayoutBlockColumnCreateManyInlineInput = {
  /** Create and connect multiple existing LayoutBlockColumn documents */
  create?: InputMaybe<Array<LayoutBlockColumnCreateInput>>;
};

export type LayoutBlockColumnCreateOneInlineInput = {
  /** Create and connect one LayoutBlockColumn document */
  create?: InputMaybe<LayoutBlockColumnCreateInput>;
};

export type LayoutBlockColumnCreateWithPositionInput = {
  /** Document to create */
  data: LayoutBlockColumnCreateInput;
  /** Position in the list of existing component instances, will default to appending at the end of list */
  position?: InputMaybe<ConnectPositionInput>;
};

/** An edge in a connection. */
export type LayoutBlockColumnEdge = {
  __typename?: 'LayoutBlockColumnEdge';
  /** A cursor for use in pagination. */
  cursor: Scalars['String'];
  /** The item at the end of the edge. */
  node: LayoutBlockColumn;
};

/** Identifies documents */
export type LayoutBlockColumnManyWhereInput = {
  /** Logical AND on all given filters. */
  AND?: InputMaybe<Array<LayoutBlockColumnWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: InputMaybe<Array<LayoutBlockColumnWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: InputMaybe<Array<LayoutBlockColumnWhereInput>>;
  /** Contains search across all appropriate fields. */
  _search?: InputMaybe<Scalars['String']>;
  backgroundImage?: InputMaybe<AssetWhereInput>;
  contentTags?: InputMaybe<ContentTagWhereInput>;
  cssClass?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  cssClass_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  cssClass_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  cssClass_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Any other value that exists and is not equal to the given value. */
  cssClass_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  cssClass_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  cssClass_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  cssClass_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  cssClass_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  cssClass_starts_with?: InputMaybe<Scalars['String']>;
  elements?: InputMaybe<ElementWhereInput>;
  hideBlockColumn?: InputMaybe<Scalars['Boolean']>;
  /** Any other value that exists and is not equal to the given value. */
  hideBlockColumn_not?: InputMaybe<Scalars['Boolean']>;
  htmlId?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  htmlId_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  htmlId_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  htmlId_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Any other value that exists and is not equal to the given value. */
  htmlId_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  htmlId_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  htmlId_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  htmlId_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  htmlId_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  htmlId_starts_with?: InputMaybe<Scalars['String']>;
  id?: InputMaybe<Scalars['ID']>;
  /** All values containing the given string. */
  id_contains?: InputMaybe<Scalars['ID']>;
  /** All values ending with the given string. */
  id_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are contained in given list. */
  id_in?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** Any other value that exists and is not equal to the given value. */
  id_not?: InputMaybe<Scalars['ID']>;
  /** All values not containing the given string. */
  id_not_contains?: InputMaybe<Scalars['ID']>;
  /** All values not ending with the given string */
  id_not_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are not contained in given list. */
  id_not_in?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** All values not starting with the given string. */
  id_not_starts_with?: InputMaybe<Scalars['ID']>;
  /** All values starting with the given string. */
  id_starts_with?: InputMaybe<Scalars['ID']>;
  /** All values in which the union is empty. */
  sections_empty?: InputMaybe<Scalars['Boolean']>;
  /** Matches if the modular component contains at least one connection to the item provided to the filter */
  sections_some?: InputMaybe<LayoutBlockColumnsectionsUnionWhereInput>;
};

export enum LayoutBlockColumnOrderByInput {
  CssClassAsc = 'cssClass_ASC',
  CssClassDesc = 'cssClass_DESC',
  HideBlockColumnAsc = 'hideBlockColumn_ASC',
  HideBlockColumnDesc = 'hideBlockColumn_DESC',
  HtmlIdAsc = 'htmlId_ASC',
  HtmlIdDesc = 'htmlId_DESC',
  IdAsc = 'id_ASC',
  IdDesc = 'id_DESC'
}

export type LayoutBlockColumnParent = LayoutBlock | Popup;

export type LayoutBlockColumnParentConnectInput = {
  LayoutBlock?: InputMaybe<LayoutBlockConnectInput>;
  Popup?: InputMaybe<PopupConnectInput>;
};

export type LayoutBlockColumnParentCreateInput = {
  LayoutBlock?: InputMaybe<LayoutBlockCreateInput>;
  Popup?: InputMaybe<PopupCreateInput>;
};

export type LayoutBlockColumnParentCreateManyInlineInput = {
  /** Create and connect multiple existing LayoutBlockColumnParent documents */
  create?: InputMaybe<Array<LayoutBlockColumnParentCreateInput>>;
};

export type LayoutBlockColumnParentCreateOneInlineInput = {
  /** Create and connect one LayoutBlockColumnParent document */
  create?: InputMaybe<LayoutBlockColumnParentCreateInput>;
};

export type LayoutBlockColumnParentCreateWithPositionInput = {
  LayoutBlock?: InputMaybe<LayoutBlockCreateWithPositionInput>;
  Popup?: InputMaybe<PopupCreateWithPositionInput>;
};

export type LayoutBlockColumnParentUpdateInput = {
  LayoutBlock?: InputMaybe<LayoutBlockUpdateInput>;
  Popup?: InputMaybe<PopupUpdateInput>;
};

export type LayoutBlockColumnParentUpdateManyInlineInput = {
  /** Create and connect multiple LayoutBlockColumnParent component instances */
  create?: InputMaybe<Array<LayoutBlockColumnParentCreateWithPositionInput>>;
  /** Delete multiple LayoutBlockColumnParent documents */
  delete?: InputMaybe<Array<LayoutBlockColumnParentWhereUniqueInput>>;
  /** Update multiple LayoutBlockColumnParent component instances */
  update?: InputMaybe<Array<LayoutBlockColumnParentUpdateWithNestedWhereUniqueAndPositionInput>>;
  /** Upsert multiple LayoutBlockColumnParent component instances */
  upsert?: InputMaybe<Array<LayoutBlockColumnParentUpsertWithNestedWhereUniqueAndPositionInput>>;
};

export type LayoutBlockColumnParentUpdateManyWithNestedWhereInput = {
  LayoutBlock?: InputMaybe<LayoutBlockUpdateManyWithNestedWhereInput>;
  Popup?: InputMaybe<PopupUpdateManyWithNestedWhereInput>;
};

export type LayoutBlockColumnParentUpdateOneInlineInput = {
  /** Create and connect one LayoutBlockColumnParent document */
  create?: InputMaybe<LayoutBlockColumnParentCreateInput>;
  /** Delete currently connected LayoutBlockColumnParent document */
  delete?: InputMaybe<Scalars['Boolean']>;
  /** Update single LayoutBlockColumnParent document */
  update?: InputMaybe<LayoutBlockColumnParentUpdateWithNestedWhereUniqueInput>;
  /** Upsert single LayoutBlockColumnParent document */
  upsert?: InputMaybe<LayoutBlockColumnParentUpsertWithNestedWhereUniqueInput>;
};

export type LayoutBlockColumnParentUpdateWithNestedWhereUniqueAndPositionInput = {
  LayoutBlock?: InputMaybe<LayoutBlockUpdateWithNestedWhereUniqueAndPositionInput>;
  Popup?: InputMaybe<PopupUpdateWithNestedWhereUniqueAndPositionInput>;
};

export type LayoutBlockColumnParentUpdateWithNestedWhereUniqueInput = {
  LayoutBlock?: InputMaybe<LayoutBlockUpdateWithNestedWhereUniqueInput>;
  Popup?: InputMaybe<PopupUpdateWithNestedWhereUniqueInput>;
};

export type LayoutBlockColumnParentUpsertWithNestedWhereUniqueAndPositionInput = {
  LayoutBlock?: InputMaybe<LayoutBlockUpsertWithNestedWhereUniqueAndPositionInput>;
  Popup?: InputMaybe<PopupUpsertWithNestedWhereUniqueAndPositionInput>;
};

export type LayoutBlockColumnParentUpsertWithNestedWhereUniqueInput = {
  LayoutBlock?: InputMaybe<LayoutBlockUpsertWithNestedWhereUniqueInput>;
  Popup?: InputMaybe<PopupUpsertWithNestedWhereUniqueInput>;
};

export type LayoutBlockColumnParentWhereInput = {
  LayoutBlock?: InputMaybe<LayoutBlockWhereInput>;
  Popup?: InputMaybe<PopupWhereInput>;
};

export type LayoutBlockColumnParentWhereUniqueInput = {
  LayoutBlock?: InputMaybe<LayoutBlockWhereUniqueInput>;
  Popup?: InputMaybe<PopupWhereUniqueInput>;
};

export type LayoutBlockColumnUpdateInput = {
  backgroundImage?: InputMaybe<AssetUpdateOneInlineInput>;
  contentTags?: InputMaybe<ContentTagUpdateOneInlineInput>;
  cssClass?: InputMaybe<Scalars['String']>;
  elements?: InputMaybe<ElementUpdateOneInlineInput>;
  hideBlockColumn?: InputMaybe<Scalars['Boolean']>;
  htmlId?: InputMaybe<Scalars['String']>;
  sections?: InputMaybe<LayoutBlockColumnsectionsUnionUpdateManyInlineInput>;
};

export type LayoutBlockColumnUpdateManyInlineInput = {
  /** Create and connect multiple LayoutBlockColumn component instances */
  create?: InputMaybe<Array<LayoutBlockColumnCreateWithPositionInput>>;
  /** Delete multiple LayoutBlockColumn documents */
  delete?: InputMaybe<Array<LayoutBlockColumnWhereUniqueInput>>;
  /** Update multiple LayoutBlockColumn component instances */
  update?: InputMaybe<Array<LayoutBlockColumnUpdateWithNestedWhereUniqueAndPositionInput>>;
  /** Upsert multiple LayoutBlockColumn component instances */
  upsert?: InputMaybe<Array<LayoutBlockColumnUpsertWithNestedWhereUniqueAndPositionInput>>;
};

export type LayoutBlockColumnUpdateManyInput = {
  cssClass?: InputMaybe<Scalars['String']>;
  hideBlockColumn?: InputMaybe<Scalars['Boolean']>;
  htmlId?: InputMaybe<Scalars['String']>;
};

export type LayoutBlockColumnUpdateManyWithNestedWhereInput = {
  /** Update many input */
  data: LayoutBlockColumnUpdateManyInput;
  /** Document search */
  where: LayoutBlockColumnWhereInput;
};

export type LayoutBlockColumnUpdateOneInlineInput = {
  /** Create and connect one LayoutBlockColumn document */
  create?: InputMaybe<LayoutBlockColumnCreateInput>;
  /** Delete currently connected LayoutBlockColumn document */
  delete?: InputMaybe<Scalars['Boolean']>;
  /** Update single LayoutBlockColumn document */
  update?: InputMaybe<LayoutBlockColumnUpdateWithNestedWhereUniqueInput>;
  /** Upsert single LayoutBlockColumn document */
  upsert?: InputMaybe<LayoutBlockColumnUpsertWithNestedWhereUniqueInput>;
};

export type LayoutBlockColumnUpdateWithNestedWhereUniqueAndPositionInput = {
  /** Document to update */
  data?: InputMaybe<LayoutBlockColumnUpdateInput>;
  /** Position in the list of existing component instances, will default to appending at the end of list */
  position?: InputMaybe<ConnectPositionInput>;
  /** Unique component instance search */
  where: LayoutBlockColumnWhereUniqueInput;
};

export type LayoutBlockColumnUpdateWithNestedWhereUniqueInput = {
  /** Document to update */
  data: LayoutBlockColumnUpdateInput;
  /** Unique document search */
  where: LayoutBlockColumnWhereUniqueInput;
};

export type LayoutBlockColumnUpsertInput = {
  /** Create document if it didn't exist */
  create: LayoutBlockColumnCreateInput;
  /** Update document if it exists */
  update: LayoutBlockColumnUpdateInput;
};

export type LayoutBlockColumnUpsertWithNestedWhereUniqueAndPositionInput = {
  /** Document to upsert */
  data?: InputMaybe<LayoutBlockColumnUpsertInput>;
  /** Position in the list of existing component instances, will default to appending at the end of list */
  position?: InputMaybe<ConnectPositionInput>;
  /** Unique component instance search */
  where: LayoutBlockColumnWhereUniqueInput;
};

export type LayoutBlockColumnUpsertWithNestedWhereUniqueInput = {
  /** Upsert data */
  data: LayoutBlockColumnUpsertInput;
  /** Unique document search */
  where: LayoutBlockColumnWhereUniqueInput;
};

/** Identifies documents */
export type LayoutBlockColumnWhereInput = {
  /** Logical AND on all given filters. */
  AND?: InputMaybe<Array<LayoutBlockColumnWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: InputMaybe<Array<LayoutBlockColumnWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: InputMaybe<Array<LayoutBlockColumnWhereInput>>;
  /** Contains search across all appropriate fields. */
  _search?: InputMaybe<Scalars['String']>;
  backgroundImage?: InputMaybe<AssetWhereInput>;
  contentTags?: InputMaybe<ContentTagWhereInput>;
  cssClass?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  cssClass_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  cssClass_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  cssClass_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Any other value that exists and is not equal to the given value. */
  cssClass_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  cssClass_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  cssClass_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  cssClass_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  cssClass_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  cssClass_starts_with?: InputMaybe<Scalars['String']>;
  elements?: InputMaybe<ElementWhereInput>;
  hideBlockColumn?: InputMaybe<Scalars['Boolean']>;
  /** Any other value that exists and is not equal to the given value. */
  hideBlockColumn_not?: InputMaybe<Scalars['Boolean']>;
  htmlId?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  htmlId_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  htmlId_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  htmlId_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Any other value that exists and is not equal to the given value. */
  htmlId_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  htmlId_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  htmlId_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  htmlId_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  htmlId_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  htmlId_starts_with?: InputMaybe<Scalars['String']>;
  id?: InputMaybe<Scalars['ID']>;
  /** All values containing the given string. */
  id_contains?: InputMaybe<Scalars['ID']>;
  /** All values ending with the given string. */
  id_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are contained in given list. */
  id_in?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** Any other value that exists and is not equal to the given value. */
  id_not?: InputMaybe<Scalars['ID']>;
  /** All values not containing the given string. */
  id_not_contains?: InputMaybe<Scalars['ID']>;
  /** All values not ending with the given string */
  id_not_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are not contained in given list. */
  id_not_in?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** All values not starting with the given string. */
  id_not_starts_with?: InputMaybe<Scalars['ID']>;
  /** All values starting with the given string. */
  id_starts_with?: InputMaybe<Scalars['ID']>;
  /** All values in which the union is empty. */
  sections_empty?: InputMaybe<Scalars['Boolean']>;
  /** Matches if the modular component contains at least one connection to the item provided to the filter */
  sections_some?: InputMaybe<LayoutBlockColumnsectionsUnionWhereInput>;
};

/** References LayoutBlockColumn record uniquely */
export type LayoutBlockColumnWhereUniqueInput = {
  id?: InputMaybe<Scalars['ID']>;
};

export type LayoutBlockColumnsectionsUnion = Accordion | CallToAction | ContactForm | GridBox | HeroMediaSlider | LoopText | TextContent | VideoBox;

export type LayoutBlockColumnsectionsUnionConnectInput = {
  Accordion?: InputMaybe<AccordionConnectInput>;
  CallToAction?: InputMaybe<CallToActionConnectInput>;
  ContactForm?: InputMaybe<ContactFormConnectInput>;
  GridBox?: InputMaybe<GridBoxConnectInput>;
  HeroMediaSlider?: InputMaybe<HeroMediaSliderConnectInput>;
  LoopText?: InputMaybe<LoopTextConnectInput>;
  TextContent?: InputMaybe<TextContentConnectInput>;
  VideoBox?: InputMaybe<VideoBoxConnectInput>;
};

export type LayoutBlockColumnsectionsUnionCreateInput = {
  Accordion?: InputMaybe<AccordionCreateInput>;
  CallToAction?: InputMaybe<CallToActionCreateInput>;
  ContactForm?: InputMaybe<ContactFormCreateInput>;
  GridBox?: InputMaybe<GridBoxCreateInput>;
  HeroMediaSlider?: InputMaybe<HeroMediaSliderCreateInput>;
  LoopText?: InputMaybe<LoopTextCreateInput>;
  TextContent?: InputMaybe<TextContentCreateInput>;
  VideoBox?: InputMaybe<VideoBoxCreateInput>;
};

export type LayoutBlockColumnsectionsUnionCreateManyInlineInput = {
  /** Create and connect multiple existing LayoutBlockColumnsectionsUnion documents */
  create?: InputMaybe<Array<LayoutBlockColumnsectionsUnionCreateInput>>;
};

export type LayoutBlockColumnsectionsUnionCreateOneInlineInput = {
  /** Create and connect one LayoutBlockColumnsectionsUnion document */
  create?: InputMaybe<LayoutBlockColumnsectionsUnionCreateInput>;
};

export type LayoutBlockColumnsectionsUnionCreateWithPositionInput = {
  Accordion?: InputMaybe<AccordionCreateWithPositionInput>;
  CallToAction?: InputMaybe<CallToActionCreateWithPositionInput>;
  ContactForm?: InputMaybe<ContactFormCreateWithPositionInput>;
  GridBox?: InputMaybe<GridBoxCreateWithPositionInput>;
  HeroMediaSlider?: InputMaybe<HeroMediaSliderCreateWithPositionInput>;
  LoopText?: InputMaybe<LoopTextCreateWithPositionInput>;
  TextContent?: InputMaybe<TextContentCreateWithPositionInput>;
  VideoBox?: InputMaybe<VideoBoxCreateWithPositionInput>;
};

export type LayoutBlockColumnsectionsUnionUpdateInput = {
  Accordion?: InputMaybe<AccordionUpdateInput>;
  CallToAction?: InputMaybe<CallToActionUpdateInput>;
  ContactForm?: InputMaybe<ContactFormUpdateInput>;
  GridBox?: InputMaybe<GridBoxUpdateInput>;
  HeroMediaSlider?: InputMaybe<HeroMediaSliderUpdateInput>;
  LoopText?: InputMaybe<LoopTextUpdateInput>;
  TextContent?: InputMaybe<TextContentUpdateInput>;
  VideoBox?: InputMaybe<VideoBoxUpdateInput>;
};

export type LayoutBlockColumnsectionsUnionUpdateManyInlineInput = {
  /** Create and connect multiple LayoutBlockColumnsectionsUnion component instances */
  create?: InputMaybe<Array<LayoutBlockColumnsectionsUnionCreateWithPositionInput>>;
  /** Delete multiple LayoutBlockColumnsectionsUnion documents */
  delete?: InputMaybe<Array<LayoutBlockColumnsectionsUnionWhereUniqueInput>>;
  /** Update multiple LayoutBlockColumnsectionsUnion component instances */
  update?: InputMaybe<Array<LayoutBlockColumnsectionsUnionUpdateWithNestedWhereUniqueAndPositionInput>>;
  /** Upsert multiple LayoutBlockColumnsectionsUnion component instances */
  upsert?: InputMaybe<Array<LayoutBlockColumnsectionsUnionUpsertWithNestedWhereUniqueAndPositionInput>>;
};

export type LayoutBlockColumnsectionsUnionUpdateManyWithNestedWhereInput = {
  Accordion?: InputMaybe<AccordionUpdateManyWithNestedWhereInput>;
  CallToAction?: InputMaybe<CallToActionUpdateManyWithNestedWhereInput>;
  ContactForm?: InputMaybe<ContactFormUpdateManyWithNestedWhereInput>;
  GridBox?: InputMaybe<GridBoxUpdateManyWithNestedWhereInput>;
  HeroMediaSlider?: InputMaybe<HeroMediaSliderUpdateManyWithNestedWhereInput>;
  LoopText?: InputMaybe<LoopTextUpdateManyWithNestedWhereInput>;
  TextContent?: InputMaybe<TextContentUpdateManyWithNestedWhereInput>;
  VideoBox?: InputMaybe<VideoBoxUpdateManyWithNestedWhereInput>;
};

export type LayoutBlockColumnsectionsUnionUpdateOneInlineInput = {
  /** Create and connect one LayoutBlockColumnsectionsUnion document */
  create?: InputMaybe<LayoutBlockColumnsectionsUnionCreateInput>;
  /** Delete currently connected LayoutBlockColumnsectionsUnion document */
  delete?: InputMaybe<Scalars['Boolean']>;
  /** Update single LayoutBlockColumnsectionsUnion document */
  update?: InputMaybe<LayoutBlockColumnsectionsUnionUpdateWithNestedWhereUniqueInput>;
  /** Upsert single LayoutBlockColumnsectionsUnion document */
  upsert?: InputMaybe<LayoutBlockColumnsectionsUnionUpsertWithNestedWhereUniqueInput>;
};

export type LayoutBlockColumnsectionsUnionUpdateWithNestedWhereUniqueAndPositionInput = {
  Accordion?: InputMaybe<AccordionUpdateWithNestedWhereUniqueAndPositionInput>;
  CallToAction?: InputMaybe<CallToActionUpdateWithNestedWhereUniqueAndPositionInput>;
  ContactForm?: InputMaybe<ContactFormUpdateWithNestedWhereUniqueAndPositionInput>;
  GridBox?: InputMaybe<GridBoxUpdateWithNestedWhereUniqueAndPositionInput>;
  HeroMediaSlider?: InputMaybe<HeroMediaSliderUpdateWithNestedWhereUniqueAndPositionInput>;
  LoopText?: InputMaybe<LoopTextUpdateWithNestedWhereUniqueAndPositionInput>;
  TextContent?: InputMaybe<TextContentUpdateWithNestedWhereUniqueAndPositionInput>;
  VideoBox?: InputMaybe<VideoBoxUpdateWithNestedWhereUniqueAndPositionInput>;
};

export type LayoutBlockColumnsectionsUnionUpdateWithNestedWhereUniqueInput = {
  Accordion?: InputMaybe<AccordionUpdateWithNestedWhereUniqueInput>;
  CallToAction?: InputMaybe<CallToActionUpdateWithNestedWhereUniqueInput>;
  ContactForm?: InputMaybe<ContactFormUpdateWithNestedWhereUniqueInput>;
  GridBox?: InputMaybe<GridBoxUpdateWithNestedWhereUniqueInput>;
  HeroMediaSlider?: InputMaybe<HeroMediaSliderUpdateWithNestedWhereUniqueInput>;
  LoopText?: InputMaybe<LoopTextUpdateWithNestedWhereUniqueInput>;
  TextContent?: InputMaybe<TextContentUpdateWithNestedWhereUniqueInput>;
  VideoBox?: InputMaybe<VideoBoxUpdateWithNestedWhereUniqueInput>;
};

export type LayoutBlockColumnsectionsUnionUpsertWithNestedWhereUniqueAndPositionInput = {
  Accordion?: InputMaybe<AccordionUpsertWithNestedWhereUniqueAndPositionInput>;
  CallToAction?: InputMaybe<CallToActionUpsertWithNestedWhereUniqueAndPositionInput>;
  ContactForm?: InputMaybe<ContactFormUpsertWithNestedWhereUniqueAndPositionInput>;
  GridBox?: InputMaybe<GridBoxUpsertWithNestedWhereUniqueAndPositionInput>;
  HeroMediaSlider?: InputMaybe<HeroMediaSliderUpsertWithNestedWhereUniqueAndPositionInput>;
  LoopText?: InputMaybe<LoopTextUpsertWithNestedWhereUniqueAndPositionInput>;
  TextContent?: InputMaybe<TextContentUpsertWithNestedWhereUniqueAndPositionInput>;
  VideoBox?: InputMaybe<VideoBoxUpsertWithNestedWhereUniqueAndPositionInput>;
};

export type LayoutBlockColumnsectionsUnionUpsertWithNestedWhereUniqueInput = {
  Accordion?: InputMaybe<AccordionUpsertWithNestedWhereUniqueInput>;
  CallToAction?: InputMaybe<CallToActionUpsertWithNestedWhereUniqueInput>;
  ContactForm?: InputMaybe<ContactFormUpsertWithNestedWhereUniqueInput>;
  GridBox?: InputMaybe<GridBoxUpsertWithNestedWhereUniqueInput>;
  HeroMediaSlider?: InputMaybe<HeroMediaSliderUpsertWithNestedWhereUniqueInput>;
  LoopText?: InputMaybe<LoopTextUpsertWithNestedWhereUniqueInput>;
  TextContent?: InputMaybe<TextContentUpsertWithNestedWhereUniqueInput>;
  VideoBox?: InputMaybe<VideoBoxUpsertWithNestedWhereUniqueInput>;
};

export type LayoutBlockColumnsectionsUnionWhereInput = {
  Accordion?: InputMaybe<AccordionWhereInput>;
  CallToAction?: InputMaybe<CallToActionWhereInput>;
  ContactForm?: InputMaybe<ContactFormWhereInput>;
  GridBox?: InputMaybe<GridBoxWhereInput>;
  HeroMediaSlider?: InputMaybe<HeroMediaSliderWhereInput>;
  LoopText?: InputMaybe<LoopTextWhereInput>;
  TextContent?: InputMaybe<TextContentWhereInput>;
  VideoBox?: InputMaybe<VideoBoxWhereInput>;
};

export type LayoutBlockColumnsectionsUnionWhereUniqueInput = {
  Accordion?: InputMaybe<AccordionWhereUniqueInput>;
  CallToAction?: InputMaybe<CallToActionWhereUniqueInput>;
  ContactForm?: InputMaybe<ContactFormWhereUniqueInput>;
  GridBox?: InputMaybe<GridBoxWhereUniqueInput>;
  HeroMediaSlider?: InputMaybe<HeroMediaSliderWhereUniqueInput>;
  LoopText?: InputMaybe<LoopTextWhereUniqueInput>;
  TextContent?: InputMaybe<TextContentWhereUniqueInput>;
  VideoBox?: InputMaybe<VideoBoxWhereUniqueInput>;
};

export type LayoutBlockConnectInput = {
  /** Allow to specify document position in list of connected documents, will default to appending at end of list */
  position?: InputMaybe<ConnectPositionInput>;
  /** Document to connect */
  where: LayoutBlockWhereUniqueInput;
};

/** A connection to a list of items. */
export type LayoutBlockConnection = {
  __typename?: 'LayoutBlockConnection';
  aggregate: Aggregate;
  /** A list of edges. */
  edges: Array<LayoutBlockEdge>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
};

export type LayoutBlockCreateInput = {
  backgroundColor?: InputMaybe<ColorInput>;
  backgroundImage?: InputMaybe<AssetCreateOneInlineInput>;
  cssClass?: InputMaybe<Scalars['String']>;
  layoutBlockColumns?: InputMaybe<LayoutBlockColumnCreateManyInlineInput>;
};

export type LayoutBlockCreateManyInlineInput = {
  /** Create and connect multiple existing LayoutBlock documents */
  create?: InputMaybe<Array<LayoutBlockCreateInput>>;
};

export type LayoutBlockCreateOneInlineInput = {
  /** Create and connect one LayoutBlock document */
  create?: InputMaybe<LayoutBlockCreateInput>;
};

export type LayoutBlockCreateWithPositionInput = {
  /** Document to create */
  data: LayoutBlockCreateInput;
  /** Position in the list of existing component instances, will default to appending at the end of list */
  position?: InputMaybe<ConnectPositionInput>;
};

/** An edge in a connection. */
export type LayoutBlockEdge = {
  __typename?: 'LayoutBlockEdge';
  /** A cursor for use in pagination. */
  cursor: Scalars['String'];
  /** The item at the end of the edge. */
  node: LayoutBlock;
};

/** Identifies documents */
export type LayoutBlockManyWhereInput = {
  /** Logical AND on all given filters. */
  AND?: InputMaybe<Array<LayoutBlockWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: InputMaybe<Array<LayoutBlockWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: InputMaybe<Array<LayoutBlockWhereInput>>;
  /** Contains search across all appropriate fields. */
  _search?: InputMaybe<Scalars['String']>;
  backgroundImage?: InputMaybe<AssetWhereInput>;
  cssClass?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  cssClass_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  cssClass_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  cssClass_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Any other value that exists and is not equal to the given value. */
  cssClass_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  cssClass_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  cssClass_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  cssClass_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  cssClass_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  cssClass_starts_with?: InputMaybe<Scalars['String']>;
  id?: InputMaybe<Scalars['ID']>;
  /** All values containing the given string. */
  id_contains?: InputMaybe<Scalars['ID']>;
  /** All values ending with the given string. */
  id_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are contained in given list. */
  id_in?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** Any other value that exists and is not equal to the given value. */
  id_not?: InputMaybe<Scalars['ID']>;
  /** All values not containing the given string. */
  id_not_contains?: InputMaybe<Scalars['ID']>;
  /** All values not ending with the given string */
  id_not_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are not contained in given list. */
  id_not_in?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** All values not starting with the given string. */
  id_not_starts_with?: InputMaybe<Scalars['ID']>;
  /** All values starting with the given string. */
  id_starts_with?: InputMaybe<Scalars['ID']>;
  layoutBlockColumns_every?: InputMaybe<LayoutBlockColumnWhereInput>;
  layoutBlockColumns_none?: InputMaybe<LayoutBlockColumnWhereInput>;
  layoutBlockColumns_some?: InputMaybe<LayoutBlockColumnWhereInput>;
};

export enum LayoutBlockOrderByInput {
  CssClassAsc = 'cssClass_ASC',
  CssClassDesc = 'cssClass_DESC',
  IdAsc = 'id_ASC',
  IdDesc = 'id_DESC'
}

export type LayoutBlockParent = Page;

export type LayoutBlockParentConnectInput = {
  Page?: InputMaybe<PageConnectInput>;
};

export type LayoutBlockParentCreateInput = {
  Page?: InputMaybe<PageCreateInput>;
};

export type LayoutBlockParentCreateManyInlineInput = {
  /** Connect multiple existing LayoutBlockParent documents */
  connect?: InputMaybe<Array<LayoutBlockParentWhereUniqueInput>>;
  /** Create and connect multiple existing LayoutBlockParent documents */
  create?: InputMaybe<Array<LayoutBlockParentCreateInput>>;
};

export type LayoutBlockParentCreateOneInlineInput = {
  /** Connect one existing LayoutBlockParent document */
  connect?: InputMaybe<LayoutBlockParentWhereUniqueInput>;
  /** Create and connect one LayoutBlockParent document */
  create?: InputMaybe<LayoutBlockParentCreateInput>;
};

export type LayoutBlockParentUpdateInput = {
  Page?: InputMaybe<PageUpdateInput>;
};

export type LayoutBlockParentUpdateManyInlineInput = {
  /** Connect multiple existing LayoutBlockParent documents */
  connect?: InputMaybe<Array<LayoutBlockParentConnectInput>>;
  /** Create and connect multiple LayoutBlockParent documents */
  create?: InputMaybe<Array<LayoutBlockParentCreateInput>>;
  /** Delete multiple LayoutBlockParent documents */
  delete?: InputMaybe<Array<LayoutBlockParentWhereUniqueInput>>;
  /** Disconnect multiple LayoutBlockParent documents */
  disconnect?: InputMaybe<Array<LayoutBlockParentWhereUniqueInput>>;
  /** Override currently-connected documents with multiple existing LayoutBlockParent documents */
  set?: InputMaybe<Array<LayoutBlockParentWhereUniqueInput>>;
  /** Update multiple LayoutBlockParent documents */
  update?: InputMaybe<Array<LayoutBlockParentUpdateWithNestedWhereUniqueInput>>;
  /** Upsert multiple LayoutBlockParent documents */
  upsert?: InputMaybe<Array<LayoutBlockParentUpsertWithNestedWhereUniqueInput>>;
};

export type LayoutBlockParentUpdateManyWithNestedWhereInput = {
  Page?: InputMaybe<PageUpdateManyWithNestedWhereInput>;
};

export type LayoutBlockParentUpdateOneInlineInput = {
  /** Connect existing LayoutBlockParent document */
  connect?: InputMaybe<LayoutBlockParentWhereUniqueInput>;
  /** Create and connect one LayoutBlockParent document */
  create?: InputMaybe<LayoutBlockParentCreateInput>;
  /** Delete currently connected LayoutBlockParent document */
  delete?: InputMaybe<Scalars['Boolean']>;
  /** Disconnect currently connected LayoutBlockParent document */
  disconnect?: InputMaybe<Scalars['Boolean']>;
  /** Update single LayoutBlockParent document */
  update?: InputMaybe<LayoutBlockParentUpdateWithNestedWhereUniqueInput>;
  /** Upsert single LayoutBlockParent document */
  upsert?: InputMaybe<LayoutBlockParentUpsertWithNestedWhereUniqueInput>;
};

export type LayoutBlockParentUpdateWithNestedWhereUniqueInput = {
  Page?: InputMaybe<PageUpdateWithNestedWhereUniqueInput>;
};

export type LayoutBlockParentUpsertWithNestedWhereUniqueInput = {
  Page?: InputMaybe<PageUpsertWithNestedWhereUniqueInput>;
};

export type LayoutBlockParentWhereInput = {
  Page?: InputMaybe<PageWhereInput>;
};

export type LayoutBlockParentWhereUniqueInput = {
  Page?: InputMaybe<PageWhereUniqueInput>;
};

export type LayoutBlockUpdateInput = {
  backgroundColor?: InputMaybe<ColorInput>;
  backgroundImage?: InputMaybe<AssetUpdateOneInlineInput>;
  cssClass?: InputMaybe<Scalars['String']>;
  layoutBlockColumns?: InputMaybe<LayoutBlockColumnUpdateManyInlineInput>;
};

export type LayoutBlockUpdateManyInlineInput = {
  /** Create and connect multiple LayoutBlock component instances */
  create?: InputMaybe<Array<LayoutBlockCreateWithPositionInput>>;
  /** Delete multiple LayoutBlock documents */
  delete?: InputMaybe<Array<LayoutBlockWhereUniqueInput>>;
  /** Update multiple LayoutBlock component instances */
  update?: InputMaybe<Array<LayoutBlockUpdateWithNestedWhereUniqueAndPositionInput>>;
  /** Upsert multiple LayoutBlock component instances */
  upsert?: InputMaybe<Array<LayoutBlockUpsertWithNestedWhereUniqueAndPositionInput>>;
};

export type LayoutBlockUpdateManyInput = {
  backgroundColor?: InputMaybe<ColorInput>;
  cssClass?: InputMaybe<Scalars['String']>;
};

export type LayoutBlockUpdateManyWithNestedWhereInput = {
  /** Update many input */
  data: LayoutBlockUpdateManyInput;
  /** Document search */
  where: LayoutBlockWhereInput;
};

export type LayoutBlockUpdateOneInlineInput = {
  /** Create and connect one LayoutBlock document */
  create?: InputMaybe<LayoutBlockCreateInput>;
  /** Delete currently connected LayoutBlock document */
  delete?: InputMaybe<Scalars['Boolean']>;
  /** Update single LayoutBlock document */
  update?: InputMaybe<LayoutBlockUpdateWithNestedWhereUniqueInput>;
  /** Upsert single LayoutBlock document */
  upsert?: InputMaybe<LayoutBlockUpsertWithNestedWhereUniqueInput>;
};

export type LayoutBlockUpdateWithNestedWhereUniqueAndPositionInput = {
  /** Document to update */
  data?: InputMaybe<LayoutBlockUpdateInput>;
  /** Position in the list of existing component instances, will default to appending at the end of list */
  position?: InputMaybe<ConnectPositionInput>;
  /** Unique component instance search */
  where: LayoutBlockWhereUniqueInput;
};

export type LayoutBlockUpdateWithNestedWhereUniqueInput = {
  /** Document to update */
  data: LayoutBlockUpdateInput;
  /** Unique document search */
  where: LayoutBlockWhereUniqueInput;
};

export type LayoutBlockUpsertInput = {
  /** Create document if it didn't exist */
  create: LayoutBlockCreateInput;
  /** Update document if it exists */
  update: LayoutBlockUpdateInput;
};

export type LayoutBlockUpsertWithNestedWhereUniqueAndPositionInput = {
  /** Document to upsert */
  data?: InputMaybe<LayoutBlockUpsertInput>;
  /** Position in the list of existing component instances, will default to appending at the end of list */
  position?: InputMaybe<ConnectPositionInput>;
  /** Unique component instance search */
  where: LayoutBlockWhereUniqueInput;
};

export type LayoutBlockUpsertWithNestedWhereUniqueInput = {
  /** Upsert data */
  data: LayoutBlockUpsertInput;
  /** Unique document search */
  where: LayoutBlockWhereUniqueInput;
};

/** Identifies documents */
export type LayoutBlockWhereInput = {
  /** Logical AND on all given filters. */
  AND?: InputMaybe<Array<LayoutBlockWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: InputMaybe<Array<LayoutBlockWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: InputMaybe<Array<LayoutBlockWhereInput>>;
  /** Contains search across all appropriate fields. */
  _search?: InputMaybe<Scalars['String']>;
  backgroundImage?: InputMaybe<AssetWhereInput>;
  cssClass?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  cssClass_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  cssClass_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  cssClass_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Any other value that exists and is not equal to the given value. */
  cssClass_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  cssClass_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  cssClass_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  cssClass_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  cssClass_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  cssClass_starts_with?: InputMaybe<Scalars['String']>;
  id?: InputMaybe<Scalars['ID']>;
  /** All values containing the given string. */
  id_contains?: InputMaybe<Scalars['ID']>;
  /** All values ending with the given string. */
  id_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are contained in given list. */
  id_in?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** Any other value that exists and is not equal to the given value. */
  id_not?: InputMaybe<Scalars['ID']>;
  /** All values not containing the given string. */
  id_not_contains?: InputMaybe<Scalars['ID']>;
  /** All values not ending with the given string */
  id_not_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are not contained in given list. */
  id_not_in?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** All values not starting with the given string. */
  id_not_starts_with?: InputMaybe<Scalars['ID']>;
  /** All values starting with the given string. */
  id_starts_with?: InputMaybe<Scalars['ID']>;
  layoutBlockColumns_every?: InputMaybe<LayoutBlockColumnWhereInput>;
  layoutBlockColumns_none?: InputMaybe<LayoutBlockColumnWhereInput>;
  layoutBlockColumns_some?: InputMaybe<LayoutBlockColumnWhereInput>;
};

/** References LayoutBlock record uniquely */
export type LayoutBlockWhereUniqueInput = {
  id?: InputMaybe<Scalars['ID']>;
};

/** Locale system enumeration */
export enum Locale {
  /** System locale */
  En = 'en'
}

/** Representing a geolocation point with latitude and longitude */
export type Location = {
  __typename?: 'Location';
  distance: Scalars['Float'];
  latitude: Scalars['Float'];
  longitude: Scalars['Float'];
};


/** Representing a geolocation point with latitude and longitude */
export type LocationDistanceArgs = {
  from: LocationInput;
};

/** Input for a geolocation point with latitude and longitude */
export type LocationInput = {
  latitude: Scalars['Float'];
  longitude: Scalars['Float'];
};

export type LogoTable = Entity & Node & {
  __typename?: 'LogoTable';
  /** The time the document was created */
  createdAt: Scalars['DateTime'];
  /** User that created this document */
  createdBy?: Maybe<User>;
  /** Get the document in other stages */
  documentInStages: Array<LogoTable>;
  /** List of LogoTable versions */
  history: Array<Version>;
  /** The unique identifier */
  id: Scalars['ID'];
  logoImage?: Maybe<Asset>;
  logoLink?: Maybe<Scalars['String']>;
  logoName?: Maybe<Scalars['String']>;
  logoType?: Maybe<LogoTableItem>;
  /** The time the document was published. Null on documents in draft stage. */
  publishedAt?: Maybe<Scalars['DateTime']>;
  /** User that last published this document */
  publishedBy?: Maybe<User>;
  scheduledIn: Array<ScheduledOperation>;
  /** System stage field */
  stage: Stage;
  /** The time the document was updated */
  updatedAt: Scalars['DateTime'];
  /** User that last updated this document */
  updatedBy?: Maybe<User>;
};


export type LogoTableCreatedByArgs = {
  forceParentLocale?: InputMaybe<Scalars['Boolean']>;
  locales?: InputMaybe<Array<Locale>>;
};


export type LogoTableDocumentInStagesArgs = {
  includeCurrent?: Scalars['Boolean'];
  inheritLocale?: Scalars['Boolean'];
  stages?: Array<Stage>;
};


export type LogoTableHistoryArgs = {
  limit?: Scalars['Int'];
  skip?: Scalars['Int'];
  stageOverride?: InputMaybe<Stage>;
};


export type LogoTableLogoImageArgs = {
  forceParentLocale?: InputMaybe<Scalars['Boolean']>;
  locales?: InputMaybe<Array<Locale>>;
};


export type LogoTablePublishedByArgs = {
  forceParentLocale?: InputMaybe<Scalars['Boolean']>;
  locales?: InputMaybe<Array<Locale>>;
};


export type LogoTableScheduledInArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  forceParentLocale?: InputMaybe<Scalars['Boolean']>;
  last?: InputMaybe<Scalars['Int']>;
  locales?: InputMaybe<Array<Locale>>;
  skip?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<ScheduledOperationWhereInput>;
};


export type LogoTableUpdatedByArgs = {
  forceParentLocale?: InputMaybe<Scalars['Boolean']>;
  locales?: InputMaybe<Array<Locale>>;
};

export type LogoTableConnectInput = {
  /** Allow to specify document position in list of connected documents, will default to appending at end of list */
  position?: InputMaybe<ConnectPositionInput>;
  /** Document to connect */
  where: LogoTableWhereUniqueInput;
};

/** A connection to a list of items. */
export type LogoTableConnection = {
  __typename?: 'LogoTableConnection';
  aggregate: Aggregate;
  /** A list of edges. */
  edges: Array<LogoTableEdge>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
};

export type LogoTableCreateInput = {
  createdAt?: InputMaybe<Scalars['DateTime']>;
  logoImage?: InputMaybe<AssetCreateOneInlineInput>;
  logoLink?: InputMaybe<Scalars['String']>;
  logoName?: InputMaybe<Scalars['String']>;
  logoType?: InputMaybe<LogoTableItem>;
  updatedAt?: InputMaybe<Scalars['DateTime']>;
};

export type LogoTableCreateManyInlineInput = {
  /** Connect multiple existing LogoTable documents */
  connect?: InputMaybe<Array<LogoTableWhereUniqueInput>>;
  /** Create and connect multiple existing LogoTable documents */
  create?: InputMaybe<Array<LogoTableCreateInput>>;
};

export type LogoTableCreateOneInlineInput = {
  /** Connect one existing LogoTable document */
  connect?: InputMaybe<LogoTableWhereUniqueInput>;
  /** Create and connect one LogoTable document */
  create?: InputMaybe<LogoTableCreateInput>;
};

/** An edge in a connection. */
export type LogoTableEdge = {
  __typename?: 'LogoTableEdge';
  /** A cursor for use in pagination. */
  cursor: Scalars['String'];
  /** The item at the end of the edge. */
  node: LogoTable;
};

export enum LogoTableItem {
  Pros = 'pros',
  Sponsor = 'sponsor'
}

/** Identifies documents */
export type LogoTableManyWhereInput = {
  /** Logical AND on all given filters. */
  AND?: InputMaybe<Array<LogoTableWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: InputMaybe<Array<LogoTableWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: InputMaybe<Array<LogoTableWhereInput>>;
  /** Contains search across all appropriate fields. */
  _search?: InputMaybe<Scalars['String']>;
  createdAt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  createdAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  createdAt_gte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  createdAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  /** All values less than the given value. */
  createdAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  createdAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** Any other value that exists and is not equal to the given value. */
  createdAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not contained in given list. */
  createdAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  createdBy?: InputMaybe<UserWhereInput>;
  documentInStages_every?: InputMaybe<LogoTableWhereStageInput>;
  documentInStages_none?: InputMaybe<LogoTableWhereStageInput>;
  documentInStages_some?: InputMaybe<LogoTableWhereStageInput>;
  id?: InputMaybe<Scalars['ID']>;
  /** All values containing the given string. */
  id_contains?: InputMaybe<Scalars['ID']>;
  /** All values ending with the given string. */
  id_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are contained in given list. */
  id_in?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** Any other value that exists and is not equal to the given value. */
  id_not?: InputMaybe<Scalars['ID']>;
  /** All values not containing the given string. */
  id_not_contains?: InputMaybe<Scalars['ID']>;
  /** All values not ending with the given string */
  id_not_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are not contained in given list. */
  id_not_in?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** All values not starting with the given string. */
  id_not_starts_with?: InputMaybe<Scalars['ID']>;
  /** All values starting with the given string. */
  id_starts_with?: InputMaybe<Scalars['ID']>;
  logoImage?: InputMaybe<AssetWhereInput>;
  logoLink?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  logoLink_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  logoLink_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  logoLink_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Any other value that exists and is not equal to the given value. */
  logoLink_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  logoLink_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  logoLink_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  logoLink_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  logoLink_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  logoLink_starts_with?: InputMaybe<Scalars['String']>;
  logoName?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  logoName_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  logoName_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  logoName_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Any other value that exists and is not equal to the given value. */
  logoName_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  logoName_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  logoName_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  logoName_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  logoName_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  logoName_starts_with?: InputMaybe<Scalars['String']>;
  logoType?: InputMaybe<LogoTableItem>;
  /** All values that are contained in given list. */
  logoType_in?: InputMaybe<Array<InputMaybe<LogoTableItem>>>;
  /** Any other value that exists and is not equal to the given value. */
  logoType_not?: InputMaybe<LogoTableItem>;
  /** All values that are not contained in given list. */
  logoType_not_in?: InputMaybe<Array<InputMaybe<LogoTableItem>>>;
  publishedAt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  publishedAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  publishedAt_gte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  publishedAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  /** All values less than the given value. */
  publishedAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  publishedAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** Any other value that exists and is not equal to the given value. */
  publishedAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not contained in given list. */
  publishedAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  publishedBy?: InputMaybe<UserWhereInput>;
  scheduledIn_every?: InputMaybe<ScheduledOperationWhereInput>;
  scheduledIn_none?: InputMaybe<ScheduledOperationWhereInput>;
  scheduledIn_some?: InputMaybe<ScheduledOperationWhereInput>;
  updatedAt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  updatedAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  updatedAt_gte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  updatedAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  /** All values less than the given value. */
  updatedAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  updatedAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** Any other value that exists and is not equal to the given value. */
  updatedAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not contained in given list. */
  updatedAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  updatedBy?: InputMaybe<UserWhereInput>;
};

export enum LogoTableOrderByInput {
  CreatedAtAsc = 'createdAt_ASC',
  CreatedAtDesc = 'createdAt_DESC',
  IdAsc = 'id_ASC',
  IdDesc = 'id_DESC',
  LogoLinkAsc = 'logoLink_ASC',
  LogoLinkDesc = 'logoLink_DESC',
  LogoNameAsc = 'logoName_ASC',
  LogoNameDesc = 'logoName_DESC',
  LogoTypeAsc = 'logoType_ASC',
  LogoTypeDesc = 'logoType_DESC',
  PublishedAtAsc = 'publishedAt_ASC',
  PublishedAtDesc = 'publishedAt_DESC',
  UpdatedAtAsc = 'updatedAt_ASC',
  UpdatedAtDesc = 'updatedAt_DESC'
}

export type LogoTableUpdateInput = {
  logoImage?: InputMaybe<AssetUpdateOneInlineInput>;
  logoLink?: InputMaybe<Scalars['String']>;
  logoName?: InputMaybe<Scalars['String']>;
  logoType?: InputMaybe<LogoTableItem>;
};

export type LogoTableUpdateManyInlineInput = {
  /** Connect multiple existing LogoTable documents */
  connect?: InputMaybe<Array<LogoTableConnectInput>>;
  /** Create and connect multiple LogoTable documents */
  create?: InputMaybe<Array<LogoTableCreateInput>>;
  /** Delete multiple LogoTable documents */
  delete?: InputMaybe<Array<LogoTableWhereUniqueInput>>;
  /** Disconnect multiple LogoTable documents */
  disconnect?: InputMaybe<Array<LogoTableWhereUniqueInput>>;
  /** Override currently-connected documents with multiple existing LogoTable documents */
  set?: InputMaybe<Array<LogoTableWhereUniqueInput>>;
  /** Update multiple LogoTable documents */
  update?: InputMaybe<Array<LogoTableUpdateWithNestedWhereUniqueInput>>;
  /** Upsert multiple LogoTable documents */
  upsert?: InputMaybe<Array<LogoTableUpsertWithNestedWhereUniqueInput>>;
};

export type LogoTableUpdateManyInput = {
  logoLink?: InputMaybe<Scalars['String']>;
  logoName?: InputMaybe<Scalars['String']>;
  logoType?: InputMaybe<LogoTableItem>;
};

export type LogoTableUpdateManyWithNestedWhereInput = {
  /** Update many input */
  data: LogoTableUpdateManyInput;
  /** Document search */
  where: LogoTableWhereInput;
};

export type LogoTableUpdateOneInlineInput = {
  /** Connect existing LogoTable document */
  connect?: InputMaybe<LogoTableWhereUniqueInput>;
  /** Create and connect one LogoTable document */
  create?: InputMaybe<LogoTableCreateInput>;
  /** Delete currently connected LogoTable document */
  delete?: InputMaybe<Scalars['Boolean']>;
  /** Disconnect currently connected LogoTable document */
  disconnect?: InputMaybe<Scalars['Boolean']>;
  /** Update single LogoTable document */
  update?: InputMaybe<LogoTableUpdateWithNestedWhereUniqueInput>;
  /** Upsert single LogoTable document */
  upsert?: InputMaybe<LogoTableUpsertWithNestedWhereUniqueInput>;
};

export type LogoTableUpdateWithNestedWhereUniqueInput = {
  /** Document to update */
  data: LogoTableUpdateInput;
  /** Unique document search */
  where: LogoTableWhereUniqueInput;
};

export type LogoTableUpsertInput = {
  /** Create document if it didn't exist */
  create: LogoTableCreateInput;
  /** Update document if it exists */
  update: LogoTableUpdateInput;
};

export type LogoTableUpsertWithNestedWhereUniqueInput = {
  /** Upsert data */
  data: LogoTableUpsertInput;
  /** Unique document search */
  where: LogoTableWhereUniqueInput;
};

/** This contains a set of filters that can be used to compare values internally */
export type LogoTableWhereComparatorInput = {
  /** This field can be used to request to check if the entry is outdated by internal comparison */
  outdated_to?: InputMaybe<Scalars['Boolean']>;
};

/** Identifies documents */
export type LogoTableWhereInput = {
  /** Logical AND on all given filters. */
  AND?: InputMaybe<Array<LogoTableWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: InputMaybe<Array<LogoTableWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: InputMaybe<Array<LogoTableWhereInput>>;
  /** Contains search across all appropriate fields. */
  _search?: InputMaybe<Scalars['String']>;
  createdAt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  createdAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  createdAt_gte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  createdAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  /** All values less than the given value. */
  createdAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  createdAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** Any other value that exists and is not equal to the given value. */
  createdAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not contained in given list. */
  createdAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  createdBy?: InputMaybe<UserWhereInput>;
  documentInStages_every?: InputMaybe<LogoTableWhereStageInput>;
  documentInStages_none?: InputMaybe<LogoTableWhereStageInput>;
  documentInStages_some?: InputMaybe<LogoTableWhereStageInput>;
  id?: InputMaybe<Scalars['ID']>;
  /** All values containing the given string. */
  id_contains?: InputMaybe<Scalars['ID']>;
  /** All values ending with the given string. */
  id_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are contained in given list. */
  id_in?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** Any other value that exists and is not equal to the given value. */
  id_not?: InputMaybe<Scalars['ID']>;
  /** All values not containing the given string. */
  id_not_contains?: InputMaybe<Scalars['ID']>;
  /** All values not ending with the given string */
  id_not_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are not contained in given list. */
  id_not_in?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** All values not starting with the given string. */
  id_not_starts_with?: InputMaybe<Scalars['ID']>;
  /** All values starting with the given string. */
  id_starts_with?: InputMaybe<Scalars['ID']>;
  logoImage?: InputMaybe<AssetWhereInput>;
  logoLink?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  logoLink_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  logoLink_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  logoLink_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Any other value that exists and is not equal to the given value. */
  logoLink_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  logoLink_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  logoLink_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  logoLink_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  logoLink_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  logoLink_starts_with?: InputMaybe<Scalars['String']>;
  logoName?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  logoName_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  logoName_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  logoName_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Any other value that exists and is not equal to the given value. */
  logoName_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  logoName_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  logoName_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  logoName_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  logoName_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  logoName_starts_with?: InputMaybe<Scalars['String']>;
  logoType?: InputMaybe<LogoTableItem>;
  /** All values that are contained in given list. */
  logoType_in?: InputMaybe<Array<InputMaybe<LogoTableItem>>>;
  /** Any other value that exists and is not equal to the given value. */
  logoType_not?: InputMaybe<LogoTableItem>;
  /** All values that are not contained in given list. */
  logoType_not_in?: InputMaybe<Array<InputMaybe<LogoTableItem>>>;
  publishedAt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  publishedAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  publishedAt_gte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  publishedAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  /** All values less than the given value. */
  publishedAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  publishedAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** Any other value that exists and is not equal to the given value. */
  publishedAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not contained in given list. */
  publishedAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  publishedBy?: InputMaybe<UserWhereInput>;
  scheduledIn_every?: InputMaybe<ScheduledOperationWhereInput>;
  scheduledIn_none?: InputMaybe<ScheduledOperationWhereInput>;
  scheduledIn_some?: InputMaybe<ScheduledOperationWhereInput>;
  updatedAt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  updatedAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  updatedAt_gte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  updatedAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  /** All values less than the given value. */
  updatedAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  updatedAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** Any other value that exists and is not equal to the given value. */
  updatedAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not contained in given list. */
  updatedAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  updatedBy?: InputMaybe<UserWhereInput>;
};

/** The document in stages filter allows specifying a stage entry to cross compare the same document between different stages */
export type LogoTableWhereStageInput = {
  /** Logical AND on all given filters. */
  AND?: InputMaybe<Array<LogoTableWhereStageInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: InputMaybe<Array<LogoTableWhereStageInput>>;
  /** Logical OR on all given filters. */
  OR?: InputMaybe<Array<LogoTableWhereStageInput>>;
  /** This field contains fields which can be set as true or false to specify an internal comparison */
  compareWithParent?: InputMaybe<LogoTableWhereComparatorInput>;
  /** Specify the stage to compare with */
  stage?: InputMaybe<Stage>;
};

/** References LogoTable record uniquely */
export type LogoTableWhereUniqueInput = {
  id?: InputMaybe<Scalars['ID']>;
};

export type LoopText = Entity & {
  __typename?: 'LoopText';
  cssClassItem?: Maybe<Scalars['String']>;
  cssClassStatic?: Maybe<Scalars['String']>;
  cssClassWrapper?: Maybe<Scalars['String']>;
  /** The unique identifier */
  id: Scalars['ID'];
  loopTextItem: Array<LoopTextItem>;
  /** System stage field */
  stage: Stage;
  staticText?: Maybe<Scalars['String']>;
};


export type LoopTextLoopTextItemArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  forceParentLocale?: InputMaybe<Scalars['Boolean']>;
  last?: InputMaybe<Scalars['Int']>;
  locales?: InputMaybe<Array<Locale>>;
  orderBy?: InputMaybe<LoopTextItemOrderByInput>;
  skip?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<LoopTextItemWhereInput>;
};

export type LoopTextConnectInput = {
  /** Allow to specify document position in list of connected documents, will default to appending at end of list */
  position?: InputMaybe<ConnectPositionInput>;
  /** Document to connect */
  where: LoopTextWhereUniqueInput;
};

/** A connection to a list of items. */
export type LoopTextConnection = {
  __typename?: 'LoopTextConnection';
  aggregate: Aggregate;
  /** A list of edges. */
  edges: Array<LoopTextEdge>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
};

export type LoopTextCreateInput = {
  cssClassItem?: InputMaybe<Scalars['String']>;
  cssClassStatic?: InputMaybe<Scalars['String']>;
  cssClassWrapper?: InputMaybe<Scalars['String']>;
  loopTextItem?: InputMaybe<LoopTextItemCreateManyInlineInput>;
  staticText?: InputMaybe<Scalars['String']>;
};

export type LoopTextCreateManyInlineInput = {
  /** Create and connect multiple existing LoopText documents */
  create?: InputMaybe<Array<LoopTextCreateInput>>;
};

export type LoopTextCreateOneInlineInput = {
  /** Create and connect one LoopText document */
  create?: InputMaybe<LoopTextCreateInput>;
};

export type LoopTextCreateWithPositionInput = {
  /** Document to create */
  data: LoopTextCreateInput;
  /** Position in the list of existing component instances, will default to appending at the end of list */
  position?: InputMaybe<ConnectPositionInput>;
};

/** An edge in a connection. */
export type LoopTextEdge = {
  __typename?: 'LoopTextEdge';
  /** A cursor for use in pagination. */
  cursor: Scalars['String'];
  /** The item at the end of the edge. */
  node: LoopText;
};

export type LoopTextItem = Entity & {
  __typename?: 'LoopTextItem';
  /** The unique identifier */
  id: Scalars['ID'];
  loopTextItemContent?: Maybe<Scalars['String']>;
  /** System stage field */
  stage: Stage;
};

export type LoopTextItemConnectInput = {
  /** Allow to specify document position in list of connected documents, will default to appending at end of list */
  position?: InputMaybe<ConnectPositionInput>;
  /** Document to connect */
  where: LoopTextItemWhereUniqueInput;
};

/** A connection to a list of items. */
export type LoopTextItemConnection = {
  __typename?: 'LoopTextItemConnection';
  aggregate: Aggregate;
  /** A list of edges. */
  edges: Array<LoopTextItemEdge>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
};

export type LoopTextItemCreateInput = {
  loopTextItemContent?: InputMaybe<Scalars['String']>;
};

export type LoopTextItemCreateManyInlineInput = {
  /** Create and connect multiple existing LoopTextItem documents */
  create?: InputMaybe<Array<LoopTextItemCreateInput>>;
};

export type LoopTextItemCreateOneInlineInput = {
  /** Create and connect one LoopTextItem document */
  create?: InputMaybe<LoopTextItemCreateInput>;
};

export type LoopTextItemCreateWithPositionInput = {
  /** Document to create */
  data: LoopTextItemCreateInput;
  /** Position in the list of existing component instances, will default to appending at the end of list */
  position?: InputMaybe<ConnectPositionInput>;
};

/** An edge in a connection. */
export type LoopTextItemEdge = {
  __typename?: 'LoopTextItemEdge';
  /** A cursor for use in pagination. */
  cursor: Scalars['String'];
  /** The item at the end of the edge. */
  node: LoopTextItem;
};

/** Identifies documents */
export type LoopTextItemManyWhereInput = {
  /** Logical AND on all given filters. */
  AND?: InputMaybe<Array<LoopTextItemWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: InputMaybe<Array<LoopTextItemWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: InputMaybe<Array<LoopTextItemWhereInput>>;
  /** Contains search across all appropriate fields. */
  _search?: InputMaybe<Scalars['String']>;
  id?: InputMaybe<Scalars['ID']>;
  /** All values containing the given string. */
  id_contains?: InputMaybe<Scalars['ID']>;
  /** All values ending with the given string. */
  id_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are contained in given list. */
  id_in?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** Any other value that exists and is not equal to the given value. */
  id_not?: InputMaybe<Scalars['ID']>;
  /** All values not containing the given string. */
  id_not_contains?: InputMaybe<Scalars['ID']>;
  /** All values not ending with the given string */
  id_not_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are not contained in given list. */
  id_not_in?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** All values not starting with the given string. */
  id_not_starts_with?: InputMaybe<Scalars['ID']>;
  /** All values starting with the given string. */
  id_starts_with?: InputMaybe<Scalars['ID']>;
  loopTextItemContent?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  loopTextItemContent_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  loopTextItemContent_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  loopTextItemContent_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Any other value that exists and is not equal to the given value. */
  loopTextItemContent_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  loopTextItemContent_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  loopTextItemContent_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  loopTextItemContent_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  loopTextItemContent_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  loopTextItemContent_starts_with?: InputMaybe<Scalars['String']>;
};

export enum LoopTextItemOrderByInput {
  IdAsc = 'id_ASC',
  IdDesc = 'id_DESC',
  LoopTextItemContentAsc = 'loopTextItemContent_ASC',
  LoopTextItemContentDesc = 'loopTextItemContent_DESC'
}

export type LoopTextItemParent = LoopText;

export type LoopTextItemParentConnectInput = {
  LoopText?: InputMaybe<LoopTextConnectInput>;
};

export type LoopTextItemParentCreateInput = {
  LoopText?: InputMaybe<LoopTextCreateInput>;
};

export type LoopTextItemParentCreateManyInlineInput = {
  /** Create and connect multiple existing LoopTextItemParent documents */
  create?: InputMaybe<Array<LoopTextItemParentCreateInput>>;
};

export type LoopTextItemParentCreateOneInlineInput = {
  /** Create and connect one LoopTextItemParent document */
  create?: InputMaybe<LoopTextItemParentCreateInput>;
};

export type LoopTextItemParentCreateWithPositionInput = {
  LoopText?: InputMaybe<LoopTextCreateWithPositionInput>;
};

export type LoopTextItemParentUpdateInput = {
  LoopText?: InputMaybe<LoopTextUpdateInput>;
};

export type LoopTextItemParentUpdateManyInlineInput = {
  /** Create and connect multiple LoopTextItemParent component instances */
  create?: InputMaybe<Array<LoopTextItemParentCreateWithPositionInput>>;
  /** Delete multiple LoopTextItemParent documents */
  delete?: InputMaybe<Array<LoopTextItemParentWhereUniqueInput>>;
  /** Update multiple LoopTextItemParent component instances */
  update?: InputMaybe<Array<LoopTextItemParentUpdateWithNestedWhereUniqueAndPositionInput>>;
  /** Upsert multiple LoopTextItemParent component instances */
  upsert?: InputMaybe<Array<LoopTextItemParentUpsertWithNestedWhereUniqueAndPositionInput>>;
};

export type LoopTextItemParentUpdateManyWithNestedWhereInput = {
  LoopText?: InputMaybe<LoopTextUpdateManyWithNestedWhereInput>;
};

export type LoopTextItemParentUpdateOneInlineInput = {
  /** Create and connect one LoopTextItemParent document */
  create?: InputMaybe<LoopTextItemParentCreateInput>;
  /** Delete currently connected LoopTextItemParent document */
  delete?: InputMaybe<Scalars['Boolean']>;
  /** Update single LoopTextItemParent document */
  update?: InputMaybe<LoopTextItemParentUpdateWithNestedWhereUniqueInput>;
  /** Upsert single LoopTextItemParent document */
  upsert?: InputMaybe<LoopTextItemParentUpsertWithNestedWhereUniqueInput>;
};

export type LoopTextItemParentUpdateWithNestedWhereUniqueAndPositionInput = {
  LoopText?: InputMaybe<LoopTextUpdateWithNestedWhereUniqueAndPositionInput>;
};

export type LoopTextItemParentUpdateWithNestedWhereUniqueInput = {
  LoopText?: InputMaybe<LoopTextUpdateWithNestedWhereUniqueInput>;
};

export type LoopTextItemParentUpsertWithNestedWhereUniqueAndPositionInput = {
  LoopText?: InputMaybe<LoopTextUpsertWithNestedWhereUniqueAndPositionInput>;
};

export type LoopTextItemParentUpsertWithNestedWhereUniqueInput = {
  LoopText?: InputMaybe<LoopTextUpsertWithNestedWhereUniqueInput>;
};

export type LoopTextItemParentWhereInput = {
  LoopText?: InputMaybe<LoopTextWhereInput>;
};

export type LoopTextItemParentWhereUniqueInput = {
  LoopText?: InputMaybe<LoopTextWhereUniqueInput>;
};

export type LoopTextItemUpdateInput = {
  loopTextItemContent?: InputMaybe<Scalars['String']>;
};

export type LoopTextItemUpdateManyInlineInput = {
  /** Create and connect multiple LoopTextItem component instances */
  create?: InputMaybe<Array<LoopTextItemCreateWithPositionInput>>;
  /** Delete multiple LoopTextItem documents */
  delete?: InputMaybe<Array<LoopTextItemWhereUniqueInput>>;
  /** Update multiple LoopTextItem component instances */
  update?: InputMaybe<Array<LoopTextItemUpdateWithNestedWhereUniqueAndPositionInput>>;
  /** Upsert multiple LoopTextItem component instances */
  upsert?: InputMaybe<Array<LoopTextItemUpsertWithNestedWhereUniqueAndPositionInput>>;
};

export type LoopTextItemUpdateManyInput = {
  loopTextItemContent?: InputMaybe<Scalars['String']>;
};

export type LoopTextItemUpdateManyWithNestedWhereInput = {
  /** Update many input */
  data: LoopTextItemUpdateManyInput;
  /** Document search */
  where: LoopTextItemWhereInput;
};

export type LoopTextItemUpdateOneInlineInput = {
  /** Create and connect one LoopTextItem document */
  create?: InputMaybe<LoopTextItemCreateInput>;
  /** Delete currently connected LoopTextItem document */
  delete?: InputMaybe<Scalars['Boolean']>;
  /** Update single LoopTextItem document */
  update?: InputMaybe<LoopTextItemUpdateWithNestedWhereUniqueInput>;
  /** Upsert single LoopTextItem document */
  upsert?: InputMaybe<LoopTextItemUpsertWithNestedWhereUniqueInput>;
};

export type LoopTextItemUpdateWithNestedWhereUniqueAndPositionInput = {
  /** Document to update */
  data?: InputMaybe<LoopTextItemUpdateInput>;
  /** Position in the list of existing component instances, will default to appending at the end of list */
  position?: InputMaybe<ConnectPositionInput>;
  /** Unique component instance search */
  where: LoopTextItemWhereUniqueInput;
};

export type LoopTextItemUpdateWithNestedWhereUniqueInput = {
  /** Document to update */
  data: LoopTextItemUpdateInput;
  /** Unique document search */
  where: LoopTextItemWhereUniqueInput;
};

export type LoopTextItemUpsertInput = {
  /** Create document if it didn't exist */
  create: LoopTextItemCreateInput;
  /** Update document if it exists */
  update: LoopTextItemUpdateInput;
};

export type LoopTextItemUpsertWithNestedWhereUniqueAndPositionInput = {
  /** Document to upsert */
  data?: InputMaybe<LoopTextItemUpsertInput>;
  /** Position in the list of existing component instances, will default to appending at the end of list */
  position?: InputMaybe<ConnectPositionInput>;
  /** Unique component instance search */
  where: LoopTextItemWhereUniqueInput;
};

export type LoopTextItemUpsertWithNestedWhereUniqueInput = {
  /** Upsert data */
  data: LoopTextItemUpsertInput;
  /** Unique document search */
  where: LoopTextItemWhereUniqueInput;
};

/** Identifies documents */
export type LoopTextItemWhereInput = {
  /** Logical AND on all given filters. */
  AND?: InputMaybe<Array<LoopTextItemWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: InputMaybe<Array<LoopTextItemWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: InputMaybe<Array<LoopTextItemWhereInput>>;
  /** Contains search across all appropriate fields. */
  _search?: InputMaybe<Scalars['String']>;
  id?: InputMaybe<Scalars['ID']>;
  /** All values containing the given string. */
  id_contains?: InputMaybe<Scalars['ID']>;
  /** All values ending with the given string. */
  id_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are contained in given list. */
  id_in?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** Any other value that exists and is not equal to the given value. */
  id_not?: InputMaybe<Scalars['ID']>;
  /** All values not containing the given string. */
  id_not_contains?: InputMaybe<Scalars['ID']>;
  /** All values not ending with the given string */
  id_not_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are not contained in given list. */
  id_not_in?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** All values not starting with the given string. */
  id_not_starts_with?: InputMaybe<Scalars['ID']>;
  /** All values starting with the given string. */
  id_starts_with?: InputMaybe<Scalars['ID']>;
  loopTextItemContent?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  loopTextItemContent_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  loopTextItemContent_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  loopTextItemContent_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Any other value that exists and is not equal to the given value. */
  loopTextItemContent_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  loopTextItemContent_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  loopTextItemContent_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  loopTextItemContent_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  loopTextItemContent_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  loopTextItemContent_starts_with?: InputMaybe<Scalars['String']>;
};

/** References LoopTextItem record uniquely */
export type LoopTextItemWhereUniqueInput = {
  id?: InputMaybe<Scalars['ID']>;
};

/** Identifies documents */
export type LoopTextManyWhereInput = {
  /** Logical AND on all given filters. */
  AND?: InputMaybe<Array<LoopTextWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: InputMaybe<Array<LoopTextWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: InputMaybe<Array<LoopTextWhereInput>>;
  /** Contains search across all appropriate fields. */
  _search?: InputMaybe<Scalars['String']>;
  cssClassItem?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  cssClassItem_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  cssClassItem_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  cssClassItem_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Any other value that exists and is not equal to the given value. */
  cssClassItem_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  cssClassItem_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  cssClassItem_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  cssClassItem_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  cssClassItem_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  cssClassItem_starts_with?: InputMaybe<Scalars['String']>;
  cssClassStatic?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  cssClassStatic_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  cssClassStatic_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  cssClassStatic_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Any other value that exists and is not equal to the given value. */
  cssClassStatic_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  cssClassStatic_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  cssClassStatic_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  cssClassStatic_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  cssClassStatic_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  cssClassStatic_starts_with?: InputMaybe<Scalars['String']>;
  cssClassWrapper?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  cssClassWrapper_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  cssClassWrapper_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  cssClassWrapper_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Any other value that exists and is not equal to the given value. */
  cssClassWrapper_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  cssClassWrapper_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  cssClassWrapper_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  cssClassWrapper_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  cssClassWrapper_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  cssClassWrapper_starts_with?: InputMaybe<Scalars['String']>;
  id?: InputMaybe<Scalars['ID']>;
  /** All values containing the given string. */
  id_contains?: InputMaybe<Scalars['ID']>;
  /** All values ending with the given string. */
  id_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are contained in given list. */
  id_in?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** Any other value that exists and is not equal to the given value. */
  id_not?: InputMaybe<Scalars['ID']>;
  /** All values not containing the given string. */
  id_not_contains?: InputMaybe<Scalars['ID']>;
  /** All values not ending with the given string */
  id_not_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are not contained in given list. */
  id_not_in?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** All values not starting with the given string. */
  id_not_starts_with?: InputMaybe<Scalars['ID']>;
  /** All values starting with the given string. */
  id_starts_with?: InputMaybe<Scalars['ID']>;
  loopTextItem_every?: InputMaybe<LoopTextItemWhereInput>;
  loopTextItem_none?: InputMaybe<LoopTextItemWhereInput>;
  loopTextItem_some?: InputMaybe<LoopTextItemWhereInput>;
  staticText?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  staticText_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  staticText_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  staticText_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Any other value that exists and is not equal to the given value. */
  staticText_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  staticText_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  staticText_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  staticText_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  staticText_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  staticText_starts_with?: InputMaybe<Scalars['String']>;
};

export enum LoopTextOrderByInput {
  CssClassItemAsc = 'cssClassItem_ASC',
  CssClassItemDesc = 'cssClassItem_DESC',
  CssClassStaticAsc = 'cssClassStatic_ASC',
  CssClassStaticDesc = 'cssClassStatic_DESC',
  CssClassWrapperAsc = 'cssClassWrapper_ASC',
  CssClassWrapperDesc = 'cssClassWrapper_DESC',
  IdAsc = 'id_ASC',
  IdDesc = 'id_DESC',
  StaticTextAsc = 'staticText_ASC',
  StaticTextDesc = 'staticText_DESC'
}

export type LoopTextParent = LayoutBlockColumn;

export type LoopTextParentConnectInput = {
  LayoutBlockColumn?: InputMaybe<LayoutBlockColumnConnectInput>;
};

export type LoopTextParentCreateInput = {
  LayoutBlockColumn?: InputMaybe<LayoutBlockColumnCreateInput>;
};

export type LoopTextParentCreateManyInlineInput = {
  /** Create and connect multiple existing LoopTextParent documents */
  create?: InputMaybe<Array<LoopTextParentCreateInput>>;
};

export type LoopTextParentCreateOneInlineInput = {
  /** Create and connect one LoopTextParent document */
  create?: InputMaybe<LoopTextParentCreateInput>;
};

export type LoopTextParentCreateWithPositionInput = {
  LayoutBlockColumn?: InputMaybe<LayoutBlockColumnCreateWithPositionInput>;
};

export type LoopTextParentUpdateInput = {
  LayoutBlockColumn?: InputMaybe<LayoutBlockColumnUpdateInput>;
};

export type LoopTextParentUpdateManyInlineInput = {
  /** Create and connect multiple LoopTextParent component instances */
  create?: InputMaybe<Array<LoopTextParentCreateWithPositionInput>>;
  /** Delete multiple LoopTextParent documents */
  delete?: InputMaybe<Array<LoopTextParentWhereUniqueInput>>;
  /** Update multiple LoopTextParent component instances */
  update?: InputMaybe<Array<LoopTextParentUpdateWithNestedWhereUniqueAndPositionInput>>;
  /** Upsert multiple LoopTextParent component instances */
  upsert?: InputMaybe<Array<LoopTextParentUpsertWithNestedWhereUniqueAndPositionInput>>;
};

export type LoopTextParentUpdateManyWithNestedWhereInput = {
  LayoutBlockColumn?: InputMaybe<LayoutBlockColumnUpdateManyWithNestedWhereInput>;
};

export type LoopTextParentUpdateOneInlineInput = {
  /** Create and connect one LoopTextParent document */
  create?: InputMaybe<LoopTextParentCreateInput>;
  /** Delete currently connected LoopTextParent document */
  delete?: InputMaybe<Scalars['Boolean']>;
  /** Update single LoopTextParent document */
  update?: InputMaybe<LoopTextParentUpdateWithNestedWhereUniqueInput>;
  /** Upsert single LoopTextParent document */
  upsert?: InputMaybe<LoopTextParentUpsertWithNestedWhereUniqueInput>;
};

export type LoopTextParentUpdateWithNestedWhereUniqueAndPositionInput = {
  LayoutBlockColumn?: InputMaybe<LayoutBlockColumnUpdateWithNestedWhereUniqueAndPositionInput>;
};

export type LoopTextParentUpdateWithNestedWhereUniqueInput = {
  LayoutBlockColumn?: InputMaybe<LayoutBlockColumnUpdateWithNestedWhereUniqueInput>;
};

export type LoopTextParentUpsertWithNestedWhereUniqueAndPositionInput = {
  LayoutBlockColumn?: InputMaybe<LayoutBlockColumnUpsertWithNestedWhereUniqueAndPositionInput>;
};

export type LoopTextParentUpsertWithNestedWhereUniqueInput = {
  LayoutBlockColumn?: InputMaybe<LayoutBlockColumnUpsertWithNestedWhereUniqueInput>;
};

export type LoopTextParentWhereInput = {
  LayoutBlockColumn?: InputMaybe<LayoutBlockColumnWhereInput>;
};

export type LoopTextParentWhereUniqueInput = {
  LayoutBlockColumn?: InputMaybe<LayoutBlockColumnWhereUniqueInput>;
};

export type LoopTextUpdateInput = {
  cssClassItem?: InputMaybe<Scalars['String']>;
  cssClassStatic?: InputMaybe<Scalars['String']>;
  cssClassWrapper?: InputMaybe<Scalars['String']>;
  loopTextItem?: InputMaybe<LoopTextItemUpdateManyInlineInput>;
  staticText?: InputMaybe<Scalars['String']>;
};

export type LoopTextUpdateManyInlineInput = {
  /** Create and connect multiple LoopText component instances */
  create?: InputMaybe<Array<LoopTextCreateWithPositionInput>>;
  /** Delete multiple LoopText documents */
  delete?: InputMaybe<Array<LoopTextWhereUniqueInput>>;
  /** Update multiple LoopText component instances */
  update?: InputMaybe<Array<LoopTextUpdateWithNestedWhereUniqueAndPositionInput>>;
  /** Upsert multiple LoopText component instances */
  upsert?: InputMaybe<Array<LoopTextUpsertWithNestedWhereUniqueAndPositionInput>>;
};

export type LoopTextUpdateManyInput = {
  cssClassItem?: InputMaybe<Scalars['String']>;
  cssClassStatic?: InputMaybe<Scalars['String']>;
  cssClassWrapper?: InputMaybe<Scalars['String']>;
  staticText?: InputMaybe<Scalars['String']>;
};

export type LoopTextUpdateManyWithNestedWhereInput = {
  /** Update many input */
  data: LoopTextUpdateManyInput;
  /** Document search */
  where: LoopTextWhereInput;
};

export type LoopTextUpdateOneInlineInput = {
  /** Create and connect one LoopText document */
  create?: InputMaybe<LoopTextCreateInput>;
  /** Delete currently connected LoopText document */
  delete?: InputMaybe<Scalars['Boolean']>;
  /** Update single LoopText document */
  update?: InputMaybe<LoopTextUpdateWithNestedWhereUniqueInput>;
  /** Upsert single LoopText document */
  upsert?: InputMaybe<LoopTextUpsertWithNestedWhereUniqueInput>;
};

export type LoopTextUpdateWithNestedWhereUniqueAndPositionInput = {
  /** Document to update */
  data?: InputMaybe<LoopTextUpdateInput>;
  /** Position in the list of existing component instances, will default to appending at the end of list */
  position?: InputMaybe<ConnectPositionInput>;
  /** Unique component instance search */
  where: LoopTextWhereUniqueInput;
};

export type LoopTextUpdateWithNestedWhereUniqueInput = {
  /** Document to update */
  data: LoopTextUpdateInput;
  /** Unique document search */
  where: LoopTextWhereUniqueInput;
};

export type LoopTextUpsertInput = {
  /** Create document if it didn't exist */
  create: LoopTextCreateInput;
  /** Update document if it exists */
  update: LoopTextUpdateInput;
};

export type LoopTextUpsertWithNestedWhereUniqueAndPositionInput = {
  /** Document to upsert */
  data?: InputMaybe<LoopTextUpsertInput>;
  /** Position in the list of existing component instances, will default to appending at the end of list */
  position?: InputMaybe<ConnectPositionInput>;
  /** Unique component instance search */
  where: LoopTextWhereUniqueInput;
};

export type LoopTextUpsertWithNestedWhereUniqueInput = {
  /** Upsert data */
  data: LoopTextUpsertInput;
  /** Unique document search */
  where: LoopTextWhereUniqueInput;
};

/** Identifies documents */
export type LoopTextWhereInput = {
  /** Logical AND on all given filters. */
  AND?: InputMaybe<Array<LoopTextWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: InputMaybe<Array<LoopTextWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: InputMaybe<Array<LoopTextWhereInput>>;
  /** Contains search across all appropriate fields. */
  _search?: InputMaybe<Scalars['String']>;
  cssClassItem?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  cssClassItem_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  cssClassItem_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  cssClassItem_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Any other value that exists and is not equal to the given value. */
  cssClassItem_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  cssClassItem_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  cssClassItem_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  cssClassItem_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  cssClassItem_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  cssClassItem_starts_with?: InputMaybe<Scalars['String']>;
  cssClassStatic?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  cssClassStatic_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  cssClassStatic_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  cssClassStatic_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Any other value that exists and is not equal to the given value. */
  cssClassStatic_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  cssClassStatic_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  cssClassStatic_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  cssClassStatic_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  cssClassStatic_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  cssClassStatic_starts_with?: InputMaybe<Scalars['String']>;
  cssClassWrapper?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  cssClassWrapper_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  cssClassWrapper_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  cssClassWrapper_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Any other value that exists and is not equal to the given value. */
  cssClassWrapper_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  cssClassWrapper_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  cssClassWrapper_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  cssClassWrapper_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  cssClassWrapper_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  cssClassWrapper_starts_with?: InputMaybe<Scalars['String']>;
  id?: InputMaybe<Scalars['ID']>;
  /** All values containing the given string. */
  id_contains?: InputMaybe<Scalars['ID']>;
  /** All values ending with the given string. */
  id_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are contained in given list. */
  id_in?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** Any other value that exists and is not equal to the given value. */
  id_not?: InputMaybe<Scalars['ID']>;
  /** All values not containing the given string. */
  id_not_contains?: InputMaybe<Scalars['ID']>;
  /** All values not ending with the given string */
  id_not_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are not contained in given list. */
  id_not_in?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** All values not starting with the given string. */
  id_not_starts_with?: InputMaybe<Scalars['ID']>;
  /** All values starting with the given string. */
  id_starts_with?: InputMaybe<Scalars['ID']>;
  loopTextItem_every?: InputMaybe<LoopTextItemWhereInput>;
  loopTextItem_none?: InputMaybe<LoopTextItemWhereInput>;
  loopTextItem_some?: InputMaybe<LoopTextItemWhereInput>;
  staticText?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  staticText_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  staticText_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  staticText_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Any other value that exists and is not equal to the given value. */
  staticText_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  staticText_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  staticText_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  staticText_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  staticText_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  staticText_starts_with?: InputMaybe<Scalars['String']>;
};

/** References LoopText record uniquely */
export type LoopTextWhereUniqueInput = {
  id?: InputMaybe<Scalars['ID']>;
};

export enum MediaType {
  Expand = 'expand',
  Image = 'image',
  Video = 'video',
  Youtube = 'youtube'
}

export type Mutation = {
  __typename?: 'Mutation';
  /** Create one album */
  createAlbum?: Maybe<Album>;
  /**
   * Create one asset
   * @deprecated Asset mutations will be overhauled soon
   */
  createAsset?: Maybe<Asset>;
  /** Create one blog */
  createBlog?: Maybe<Blog>;
  /** Create one contact */
  createContact?: Maybe<Contact>;
  /** Create one event */
  createEvent?: Maybe<Event>;
  /** Create one logoTable */
  createLogoTable?: Maybe<LogoTable>;
  /** Create one navigation */
  createNavigation?: Maybe<Navigation>;
  /** Create one page */
  createPage?: Maybe<Page>;
  /** Create one product */
  createProduct?: Maybe<Product>;
  /** Create one profile */
  createProfile?: Maybe<Profile>;
  /** Create one scheduledRelease */
  createScheduledRelease?: Maybe<ScheduledRelease>;
  /** Create one siteLibrary */
  createSiteLibrary?: Maybe<SiteLibrary>;
  /** Create one testimonial */
  createTestimonial?: Maybe<Testimonial>;
  /** Delete one album from _all_ existing stages. Returns deleted document. */
  deleteAlbum?: Maybe<Album>;
  /** Delete one asset from _all_ existing stages. Returns deleted document. */
  deleteAsset?: Maybe<Asset>;
  /** Delete one blog from _all_ existing stages. Returns deleted document. */
  deleteBlog?: Maybe<Blog>;
  /** Delete one contact from _all_ existing stages. Returns deleted document. */
  deleteContact?: Maybe<Contact>;
  /** Delete one event from _all_ existing stages. Returns deleted document. */
  deleteEvent?: Maybe<Event>;
  /** Delete one logoTable from _all_ existing stages. Returns deleted document. */
  deleteLogoTable?: Maybe<LogoTable>;
  /**
   * Delete many Album documents
   * @deprecated Please use the new paginated many mutation (deleteManyAlbumsConnection)
   */
  deleteManyAlbums: BatchPayload;
  /** Delete many Album documents, return deleted documents */
  deleteManyAlbumsConnection: AlbumConnection;
  /**
   * Delete many Asset documents
   * @deprecated Please use the new paginated many mutation (deleteManyAssetsConnection)
   */
  deleteManyAssets: BatchPayload;
  /** Delete many Asset documents, return deleted documents */
  deleteManyAssetsConnection: AssetConnection;
  /**
   * Delete many Blog documents
   * @deprecated Please use the new paginated many mutation (deleteManyBlogsConnection)
   */
  deleteManyBlogs: BatchPayload;
  /** Delete many Blog documents, return deleted documents */
  deleteManyBlogsConnection: BlogConnection;
  /**
   * Delete many Contact documents
   * @deprecated Please use the new paginated many mutation (deleteManyContactsConnection)
   */
  deleteManyContacts: BatchPayload;
  /** Delete many Contact documents, return deleted documents */
  deleteManyContactsConnection: ContactConnection;
  /**
   * Delete many Event documents
   * @deprecated Please use the new paginated many mutation (deleteManyEventsConnection)
   */
  deleteManyEvents: BatchPayload;
  /** Delete many Event documents, return deleted documents */
  deleteManyEventsConnection: EventConnection;
  /**
   * Delete many LogoTable documents
   * @deprecated Please use the new paginated many mutation (deleteManyLogoTablesConnection)
   */
  deleteManyLogoTables: BatchPayload;
  /** Delete many LogoTable documents, return deleted documents */
  deleteManyLogoTablesConnection: LogoTableConnection;
  /**
   * Delete many Navigation documents
   * @deprecated Please use the new paginated many mutation (deleteManyNavigationsConnection)
   */
  deleteManyNavigations: BatchPayload;
  /** Delete many Navigation documents, return deleted documents */
  deleteManyNavigationsConnection: NavigationConnection;
  /**
   * Delete many Page documents
   * @deprecated Please use the new paginated many mutation (deleteManyPagesConnection)
   */
  deleteManyPages: BatchPayload;
  /** Delete many Page documents, return deleted documents */
  deleteManyPagesConnection: PageConnection;
  /**
   * Delete many Product documents
   * @deprecated Please use the new paginated many mutation (deleteManyProductsConnection)
   */
  deleteManyProducts: BatchPayload;
  /** Delete many Product documents, return deleted documents */
  deleteManyProductsConnection: ProductConnection;
  /**
   * Delete many Profile documents
   * @deprecated Please use the new paginated many mutation (deleteManyProfilesConnection)
   */
  deleteManyProfiles: BatchPayload;
  /** Delete many Profile documents, return deleted documents */
  deleteManyProfilesConnection: ProfileConnection;
  /**
   * Delete many SiteLibrary documents
   * @deprecated Please use the new paginated many mutation (deleteManySiteLibrariesConnection)
   */
  deleteManySiteLibraries: BatchPayload;
  /** Delete many SiteLibrary documents, return deleted documents */
  deleteManySiteLibrariesConnection: SiteLibraryConnection;
  /**
   * Delete many Testimonial documents
   * @deprecated Please use the new paginated many mutation (deleteManyTestimonialsConnection)
   */
  deleteManyTestimonials: BatchPayload;
  /** Delete many Testimonial documents, return deleted documents */
  deleteManyTestimonialsConnection: TestimonialConnection;
  /** Delete one navigation from _all_ existing stages. Returns deleted document. */
  deleteNavigation?: Maybe<Navigation>;
  /** Delete one page from _all_ existing stages. Returns deleted document. */
  deletePage?: Maybe<Page>;
  /** Delete one product from _all_ existing stages. Returns deleted document. */
  deleteProduct?: Maybe<Product>;
  /** Delete one profile from _all_ existing stages. Returns deleted document. */
  deleteProfile?: Maybe<Profile>;
  /** Delete and return scheduled operation */
  deleteScheduledOperation?: Maybe<ScheduledOperation>;
  /** Delete one scheduledRelease from _all_ existing stages. Returns deleted document. */
  deleteScheduledRelease?: Maybe<ScheduledRelease>;
  /** Delete one siteLibrary from _all_ existing stages. Returns deleted document. */
  deleteSiteLibrary?: Maybe<SiteLibrary>;
  /** Delete one testimonial from _all_ existing stages. Returns deleted document. */
  deleteTestimonial?: Maybe<Testimonial>;
  /** Publish one album */
  publishAlbum?: Maybe<Album>;
  /** Publish one asset */
  publishAsset?: Maybe<Asset>;
  /** Publish one blog */
  publishBlog?: Maybe<Blog>;
  /** Publish one contact */
  publishContact?: Maybe<Contact>;
  /** Publish one event */
  publishEvent?: Maybe<Event>;
  /** Publish one logoTable */
  publishLogoTable?: Maybe<LogoTable>;
  /**
   * Publish many Album documents
   * @deprecated Please use the new paginated many mutation (publishManyAlbumsConnection)
   */
  publishManyAlbums: BatchPayload;
  /** Publish many Album documents */
  publishManyAlbumsConnection: AlbumConnection;
  /**
   * Publish many Asset documents
   * @deprecated Please use the new paginated many mutation (publishManyAssetsConnection)
   */
  publishManyAssets: BatchPayload;
  /** Publish many Asset documents */
  publishManyAssetsConnection: AssetConnection;
  /**
   * Publish many Blog documents
   * @deprecated Please use the new paginated many mutation (publishManyBlogsConnection)
   */
  publishManyBlogs: BatchPayload;
  /** Publish many Blog documents */
  publishManyBlogsConnection: BlogConnection;
  /**
   * Publish many Contact documents
   * @deprecated Please use the new paginated many mutation (publishManyContactsConnection)
   */
  publishManyContacts: BatchPayload;
  /** Publish many Contact documents */
  publishManyContactsConnection: ContactConnection;
  /**
   * Publish many Event documents
   * @deprecated Please use the new paginated many mutation (publishManyEventsConnection)
   */
  publishManyEvents: BatchPayload;
  /** Publish many Event documents */
  publishManyEventsConnection: EventConnection;
  /**
   * Publish many LogoTable documents
   * @deprecated Please use the new paginated many mutation (publishManyLogoTablesConnection)
   */
  publishManyLogoTables: BatchPayload;
  /** Publish many LogoTable documents */
  publishManyLogoTablesConnection: LogoTableConnection;
  /**
   * Publish many Navigation documents
   * @deprecated Please use the new paginated many mutation (publishManyNavigationsConnection)
   */
  publishManyNavigations: BatchPayload;
  /** Publish many Navigation documents */
  publishManyNavigationsConnection: NavigationConnection;
  /**
   * Publish many Page documents
   * @deprecated Please use the new paginated many mutation (publishManyPagesConnection)
   */
  publishManyPages: BatchPayload;
  /** Publish many Page documents */
  publishManyPagesConnection: PageConnection;
  /**
   * Publish many Product documents
   * @deprecated Please use the new paginated many mutation (publishManyProductsConnection)
   */
  publishManyProducts: BatchPayload;
  /** Publish many Product documents */
  publishManyProductsConnection: ProductConnection;
  /**
   * Publish many Profile documents
   * @deprecated Please use the new paginated many mutation (publishManyProfilesConnection)
   */
  publishManyProfiles: BatchPayload;
  /** Publish many Profile documents */
  publishManyProfilesConnection: ProfileConnection;
  /**
   * Publish many SiteLibrary documents
   * @deprecated Please use the new paginated many mutation (publishManySiteLibrariesConnection)
   */
  publishManySiteLibraries: BatchPayload;
  /** Publish many SiteLibrary documents */
  publishManySiteLibrariesConnection: SiteLibraryConnection;
  /**
   * Publish many Testimonial documents
   * @deprecated Please use the new paginated many mutation (publishManyTestimonialsConnection)
   */
  publishManyTestimonials: BatchPayload;
  /** Publish many Testimonial documents */
  publishManyTestimonialsConnection: TestimonialConnection;
  /** Publish one navigation */
  publishNavigation?: Maybe<Navigation>;
  /** Publish one page */
  publishPage?: Maybe<Page>;
  /** Publish one product */
  publishProduct?: Maybe<Product>;
  /** Publish one profile */
  publishProfile?: Maybe<Profile>;
  /** Publish one siteLibrary */
  publishSiteLibrary?: Maybe<SiteLibrary>;
  /** Publish one testimonial */
  publishTestimonial?: Maybe<Testimonial>;
  /** Schedule to publish one album */
  schedulePublishAlbum?: Maybe<Album>;
  /** Schedule to publish one asset */
  schedulePublishAsset?: Maybe<Asset>;
  /** Schedule to publish one blog */
  schedulePublishBlog?: Maybe<Blog>;
  /** Schedule to publish one contact */
  schedulePublishContact?: Maybe<Contact>;
  /** Schedule to publish one event */
  schedulePublishEvent?: Maybe<Event>;
  /** Schedule to publish one logoTable */
  schedulePublishLogoTable?: Maybe<LogoTable>;
  /** Schedule to publish one navigation */
  schedulePublishNavigation?: Maybe<Navigation>;
  /** Schedule to publish one page */
  schedulePublishPage?: Maybe<Page>;
  /** Schedule to publish one product */
  schedulePublishProduct?: Maybe<Product>;
  /** Schedule to publish one profile */
  schedulePublishProfile?: Maybe<Profile>;
  /** Schedule to publish one siteLibrary */
  schedulePublishSiteLibrary?: Maybe<SiteLibrary>;
  /** Schedule to publish one testimonial */
  schedulePublishTestimonial?: Maybe<Testimonial>;
  /** Unpublish one album from selected stages. Unpublish either the complete document with its relations, localizations and base data or specific localizations only. */
  scheduleUnpublishAlbum?: Maybe<Album>;
  /** Unpublish one asset from selected stages. Unpublish either the complete document with its relations, localizations and base data or specific localizations only. */
  scheduleUnpublishAsset?: Maybe<Asset>;
  /** Unpublish one blog from selected stages. Unpublish either the complete document with its relations, localizations and base data or specific localizations only. */
  scheduleUnpublishBlog?: Maybe<Blog>;
  /** Unpublish one contact from selected stages. Unpublish either the complete document with its relations, localizations and base data or specific localizations only. */
  scheduleUnpublishContact?: Maybe<Contact>;
  /** Unpublish one event from selected stages. Unpublish either the complete document with its relations, localizations and base data or specific localizations only. */
  scheduleUnpublishEvent?: Maybe<Event>;
  /** Unpublish one logoTable from selected stages. Unpublish either the complete document with its relations, localizations and base data or specific localizations only. */
  scheduleUnpublishLogoTable?: Maybe<LogoTable>;
  /** Unpublish one navigation from selected stages. Unpublish either the complete document with its relations, localizations and base data or specific localizations only. */
  scheduleUnpublishNavigation?: Maybe<Navigation>;
  /** Unpublish one page from selected stages. Unpublish either the complete document with its relations, localizations and base data or specific localizations only. */
  scheduleUnpublishPage?: Maybe<Page>;
  /** Unpublish one product from selected stages. Unpublish either the complete document with its relations, localizations and base data or specific localizations only. */
  scheduleUnpublishProduct?: Maybe<Product>;
  /** Unpublish one profile from selected stages. Unpublish either the complete document with its relations, localizations and base data or specific localizations only. */
  scheduleUnpublishProfile?: Maybe<Profile>;
  /** Unpublish one siteLibrary from selected stages. Unpublish either the complete document with its relations, localizations and base data or specific localizations only. */
  scheduleUnpublishSiteLibrary?: Maybe<SiteLibrary>;
  /** Unpublish one testimonial from selected stages. Unpublish either the complete document with its relations, localizations and base data or specific localizations only. */
  scheduleUnpublishTestimonial?: Maybe<Testimonial>;
  /** Unpublish one album from selected stages. Unpublish either the complete document with its relations, localizations and base data or specific localizations only. */
  unpublishAlbum?: Maybe<Album>;
  /** Unpublish one asset from selected stages. Unpublish either the complete document with its relations, localizations and base data or specific localizations only. */
  unpublishAsset?: Maybe<Asset>;
  /** Unpublish one blog from selected stages. Unpublish either the complete document with its relations, localizations and base data or specific localizations only. */
  unpublishBlog?: Maybe<Blog>;
  /** Unpublish one contact from selected stages. Unpublish either the complete document with its relations, localizations and base data or specific localizations only. */
  unpublishContact?: Maybe<Contact>;
  /** Unpublish one event from selected stages. Unpublish either the complete document with its relations, localizations and base data or specific localizations only. */
  unpublishEvent?: Maybe<Event>;
  /** Unpublish one logoTable from selected stages. Unpublish either the complete document with its relations, localizations and base data or specific localizations only. */
  unpublishLogoTable?: Maybe<LogoTable>;
  /**
   * Unpublish many Album documents
   * @deprecated Please use the new paginated many mutation (unpublishManyAlbumsConnection)
   */
  unpublishManyAlbums: BatchPayload;
  /** Find many Album documents that match criteria in specified stage and unpublish from target stages */
  unpublishManyAlbumsConnection: AlbumConnection;
  /**
   * Unpublish many Asset documents
   * @deprecated Please use the new paginated many mutation (unpublishManyAssetsConnection)
   */
  unpublishManyAssets: BatchPayload;
  /** Find many Asset documents that match criteria in specified stage and unpublish from target stages */
  unpublishManyAssetsConnection: AssetConnection;
  /**
   * Unpublish many Blog documents
   * @deprecated Please use the new paginated many mutation (unpublishManyBlogsConnection)
   */
  unpublishManyBlogs: BatchPayload;
  /** Find many Blog documents that match criteria in specified stage and unpublish from target stages */
  unpublishManyBlogsConnection: BlogConnection;
  /**
   * Unpublish many Contact documents
   * @deprecated Please use the new paginated many mutation (unpublishManyContactsConnection)
   */
  unpublishManyContacts: BatchPayload;
  /** Find many Contact documents that match criteria in specified stage and unpublish from target stages */
  unpublishManyContactsConnection: ContactConnection;
  /**
   * Unpublish many Event documents
   * @deprecated Please use the new paginated many mutation (unpublishManyEventsConnection)
   */
  unpublishManyEvents: BatchPayload;
  /** Find many Event documents that match criteria in specified stage and unpublish from target stages */
  unpublishManyEventsConnection: EventConnection;
  /**
   * Unpublish many LogoTable documents
   * @deprecated Please use the new paginated many mutation (unpublishManyLogoTablesConnection)
   */
  unpublishManyLogoTables: BatchPayload;
  /** Find many LogoTable documents that match criteria in specified stage and unpublish from target stages */
  unpublishManyLogoTablesConnection: LogoTableConnection;
  /**
   * Unpublish many Navigation documents
   * @deprecated Please use the new paginated many mutation (unpublishManyNavigationsConnection)
   */
  unpublishManyNavigations: BatchPayload;
  /** Find many Navigation documents that match criteria in specified stage and unpublish from target stages */
  unpublishManyNavigationsConnection: NavigationConnection;
  /**
   * Unpublish many Page documents
   * @deprecated Please use the new paginated many mutation (unpublishManyPagesConnection)
   */
  unpublishManyPages: BatchPayload;
  /** Find many Page documents that match criteria in specified stage and unpublish from target stages */
  unpublishManyPagesConnection: PageConnection;
  /**
   * Unpublish many Product documents
   * @deprecated Please use the new paginated many mutation (unpublishManyProductsConnection)
   */
  unpublishManyProducts: BatchPayload;
  /** Find many Product documents that match criteria in specified stage and unpublish from target stages */
  unpublishManyProductsConnection: ProductConnection;
  /**
   * Unpublish many Profile documents
   * @deprecated Please use the new paginated many mutation (unpublishManyProfilesConnection)
   */
  unpublishManyProfiles: BatchPayload;
  /** Find many Profile documents that match criteria in specified stage and unpublish from target stages */
  unpublishManyProfilesConnection: ProfileConnection;
  /**
   * Unpublish many SiteLibrary documents
   * @deprecated Please use the new paginated many mutation (unpublishManySiteLibrariesConnection)
   */
  unpublishManySiteLibraries: BatchPayload;
  /** Find many SiteLibrary documents that match criteria in specified stage and unpublish from target stages */
  unpublishManySiteLibrariesConnection: SiteLibraryConnection;
  /**
   * Unpublish many Testimonial documents
   * @deprecated Please use the new paginated many mutation (unpublishManyTestimonialsConnection)
   */
  unpublishManyTestimonials: BatchPayload;
  /** Find many Testimonial documents that match criteria in specified stage and unpublish from target stages */
  unpublishManyTestimonialsConnection: TestimonialConnection;
  /** Unpublish one navigation from selected stages. Unpublish either the complete document with its relations, localizations and base data or specific localizations only. */
  unpublishNavigation?: Maybe<Navigation>;
  /** Unpublish one page from selected stages. Unpublish either the complete document with its relations, localizations and base data or specific localizations only. */
  unpublishPage?: Maybe<Page>;
  /** Unpublish one product from selected stages. Unpublish either the complete document with its relations, localizations and base data or specific localizations only. */
  unpublishProduct?: Maybe<Product>;
  /** Unpublish one profile from selected stages. Unpublish either the complete document with its relations, localizations and base data or specific localizations only. */
  unpublishProfile?: Maybe<Profile>;
  /** Unpublish one siteLibrary from selected stages. Unpublish either the complete document with its relations, localizations and base data or specific localizations only. */
  unpublishSiteLibrary?: Maybe<SiteLibrary>;
  /** Unpublish one testimonial from selected stages. Unpublish either the complete document with its relations, localizations and base data or specific localizations only. */
  unpublishTestimonial?: Maybe<Testimonial>;
  /** Update one album */
  updateAlbum?: Maybe<Album>;
  /** Update one asset */
  updateAsset?: Maybe<Asset>;
  /** Update one blog */
  updateBlog?: Maybe<Blog>;
  /** Update one contact */
  updateContact?: Maybe<Contact>;
  /** Update one event */
  updateEvent?: Maybe<Event>;
  /** Update one logoTable */
  updateLogoTable?: Maybe<LogoTable>;
  /**
   * Update many albums
   * @deprecated Please use the new paginated many mutation (updateManyAlbumsConnection)
   */
  updateManyAlbums: BatchPayload;
  /** Update many Album documents */
  updateManyAlbumsConnection: AlbumConnection;
  /**
   * Update many assets
   * @deprecated Please use the new paginated many mutation (updateManyAssetsConnection)
   */
  updateManyAssets: BatchPayload;
  /** Update many Asset documents */
  updateManyAssetsConnection: AssetConnection;
  /**
   * Update many blogs
   * @deprecated Please use the new paginated many mutation (updateManyBlogsConnection)
   */
  updateManyBlogs: BatchPayload;
  /** Update many Blog documents */
  updateManyBlogsConnection: BlogConnection;
  /**
   * Update many contacts
   * @deprecated Please use the new paginated many mutation (updateManyContactsConnection)
   */
  updateManyContacts: BatchPayload;
  /** Update many Contact documents */
  updateManyContactsConnection: ContactConnection;
  /**
   * Update many events
   * @deprecated Please use the new paginated many mutation (updateManyEventsConnection)
   */
  updateManyEvents: BatchPayload;
  /** Update many Event documents */
  updateManyEventsConnection: EventConnection;
  /**
   * Update many logoTables
   * @deprecated Please use the new paginated many mutation (updateManyLogoTablesConnection)
   */
  updateManyLogoTables: BatchPayload;
  /** Update many LogoTable documents */
  updateManyLogoTablesConnection: LogoTableConnection;
  /**
   * Update many navigations
   * @deprecated Please use the new paginated many mutation (updateManyNavigationsConnection)
   */
  updateManyNavigations: BatchPayload;
  /** Update many Navigation documents */
  updateManyNavigationsConnection: NavigationConnection;
  /**
   * Update many pages
   * @deprecated Please use the new paginated many mutation (updateManyPagesConnection)
   */
  updateManyPages: BatchPayload;
  /** Update many Page documents */
  updateManyPagesConnection: PageConnection;
  /**
   * Update many products
   * @deprecated Please use the new paginated many mutation (updateManyProductsConnection)
   */
  updateManyProducts: BatchPayload;
  /** Update many Product documents */
  updateManyProductsConnection: ProductConnection;
  /**
   * Update many profiles
   * @deprecated Please use the new paginated many mutation (updateManyProfilesConnection)
   */
  updateManyProfiles: BatchPayload;
  /** Update many Profile documents */
  updateManyProfilesConnection: ProfileConnection;
  /**
   * Update many siteLibraries
   * @deprecated Please use the new paginated many mutation (updateManySiteLibrariesConnection)
   */
  updateManySiteLibraries: BatchPayload;
  /** Update many SiteLibrary documents */
  updateManySiteLibrariesConnection: SiteLibraryConnection;
  /**
   * Update many testimonials
   * @deprecated Please use the new paginated many mutation (updateManyTestimonialsConnection)
   */
  updateManyTestimonials: BatchPayload;
  /** Update many Testimonial documents */
  updateManyTestimonialsConnection: TestimonialConnection;
  /** Update one navigation */
  updateNavigation?: Maybe<Navigation>;
  /** Update one page */
  updatePage?: Maybe<Page>;
  /** Update one product */
  updateProduct?: Maybe<Product>;
  /** Update one profile */
  updateProfile?: Maybe<Profile>;
  /** Update one scheduledRelease */
  updateScheduledRelease?: Maybe<ScheduledRelease>;
  /** Update one siteLibrary */
  updateSiteLibrary?: Maybe<SiteLibrary>;
  /** Update one testimonial */
  updateTestimonial?: Maybe<Testimonial>;
  /** Upsert one album */
  upsertAlbum?: Maybe<Album>;
  /** Upsert one asset */
  upsertAsset?: Maybe<Asset>;
  /** Upsert one blog */
  upsertBlog?: Maybe<Blog>;
  /** Upsert one contact */
  upsertContact?: Maybe<Contact>;
  /** Upsert one event */
  upsertEvent?: Maybe<Event>;
  /** Upsert one logoTable */
  upsertLogoTable?: Maybe<LogoTable>;
  /** Upsert one navigation */
  upsertNavigation?: Maybe<Navigation>;
  /** Upsert one page */
  upsertPage?: Maybe<Page>;
  /** Upsert one product */
  upsertProduct?: Maybe<Product>;
  /** Upsert one profile */
  upsertProfile?: Maybe<Profile>;
  /** Upsert one siteLibrary */
  upsertSiteLibrary?: Maybe<SiteLibrary>;
  /** Upsert one testimonial */
  upsertTestimonial?: Maybe<Testimonial>;
};


export type MutationCreateAlbumArgs = {
  data: AlbumCreateInput;
};


export type MutationCreateAssetArgs = {
  data: AssetCreateInput;
};


export type MutationCreateBlogArgs = {
  data: BlogCreateInput;
};


export type MutationCreateContactArgs = {
  data: ContactCreateInput;
};


export type MutationCreateEventArgs = {
  data: EventCreateInput;
};


export type MutationCreateLogoTableArgs = {
  data: LogoTableCreateInput;
};


export type MutationCreateNavigationArgs = {
  data: NavigationCreateInput;
};


export type MutationCreatePageArgs = {
  data: PageCreateInput;
};


export type MutationCreateProductArgs = {
  data: ProductCreateInput;
};


export type MutationCreateProfileArgs = {
  data: ProfileCreateInput;
};


export type MutationCreateScheduledReleaseArgs = {
  data: ScheduledReleaseCreateInput;
};


export type MutationCreateSiteLibraryArgs = {
  data: SiteLibraryCreateInput;
};


export type MutationCreateTestimonialArgs = {
  data: TestimonialCreateInput;
};


export type MutationDeleteAlbumArgs = {
  where: AlbumWhereUniqueInput;
};


export type MutationDeleteAssetArgs = {
  where: AssetWhereUniqueInput;
};


export type MutationDeleteBlogArgs = {
  where: BlogWhereUniqueInput;
};


export type MutationDeleteContactArgs = {
  where: ContactWhereUniqueInput;
};


export type MutationDeleteEventArgs = {
  where: EventWhereUniqueInput;
};


export type MutationDeleteLogoTableArgs = {
  where: LogoTableWhereUniqueInput;
};


export type MutationDeleteManyAlbumsArgs = {
  where?: InputMaybe<AlbumManyWhereInput>;
};


export type MutationDeleteManyAlbumsConnectionArgs = {
  after?: InputMaybe<Scalars['ID']>;
  before?: InputMaybe<Scalars['ID']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  skip?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<AlbumManyWhereInput>;
};


export type MutationDeleteManyAssetsArgs = {
  where?: InputMaybe<AssetManyWhereInput>;
};


export type MutationDeleteManyAssetsConnectionArgs = {
  after?: InputMaybe<Scalars['ID']>;
  before?: InputMaybe<Scalars['ID']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  skip?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<AssetManyWhereInput>;
};


export type MutationDeleteManyBlogsArgs = {
  where?: InputMaybe<BlogManyWhereInput>;
};


export type MutationDeleteManyBlogsConnectionArgs = {
  after?: InputMaybe<Scalars['ID']>;
  before?: InputMaybe<Scalars['ID']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  skip?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<BlogManyWhereInput>;
};


export type MutationDeleteManyContactsArgs = {
  where?: InputMaybe<ContactManyWhereInput>;
};


export type MutationDeleteManyContactsConnectionArgs = {
  after?: InputMaybe<Scalars['ID']>;
  before?: InputMaybe<Scalars['ID']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  skip?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<ContactManyWhereInput>;
};


export type MutationDeleteManyEventsArgs = {
  where?: InputMaybe<EventManyWhereInput>;
};


export type MutationDeleteManyEventsConnectionArgs = {
  after?: InputMaybe<Scalars['ID']>;
  before?: InputMaybe<Scalars['ID']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  skip?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<EventManyWhereInput>;
};


export type MutationDeleteManyLogoTablesArgs = {
  where?: InputMaybe<LogoTableManyWhereInput>;
};


export type MutationDeleteManyLogoTablesConnectionArgs = {
  after?: InputMaybe<Scalars['ID']>;
  before?: InputMaybe<Scalars['ID']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  skip?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<LogoTableManyWhereInput>;
};


export type MutationDeleteManyNavigationsArgs = {
  where?: InputMaybe<NavigationManyWhereInput>;
};


export type MutationDeleteManyNavigationsConnectionArgs = {
  after?: InputMaybe<Scalars['ID']>;
  before?: InputMaybe<Scalars['ID']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  skip?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<NavigationManyWhereInput>;
};


export type MutationDeleteManyPagesArgs = {
  where?: InputMaybe<PageManyWhereInput>;
};


export type MutationDeleteManyPagesConnectionArgs = {
  after?: InputMaybe<Scalars['ID']>;
  before?: InputMaybe<Scalars['ID']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  skip?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<PageManyWhereInput>;
};


export type MutationDeleteManyProductsArgs = {
  where?: InputMaybe<ProductManyWhereInput>;
};


export type MutationDeleteManyProductsConnectionArgs = {
  after?: InputMaybe<Scalars['ID']>;
  before?: InputMaybe<Scalars['ID']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  skip?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<ProductManyWhereInput>;
};


export type MutationDeleteManyProfilesArgs = {
  where?: InputMaybe<ProfileManyWhereInput>;
};


export type MutationDeleteManyProfilesConnectionArgs = {
  after?: InputMaybe<Scalars['ID']>;
  before?: InputMaybe<Scalars['ID']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  skip?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<ProfileManyWhereInput>;
};


export type MutationDeleteManySiteLibrariesArgs = {
  where?: InputMaybe<SiteLibraryManyWhereInput>;
};


export type MutationDeleteManySiteLibrariesConnectionArgs = {
  after?: InputMaybe<Scalars['ID']>;
  before?: InputMaybe<Scalars['ID']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  skip?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<SiteLibraryManyWhereInput>;
};


export type MutationDeleteManyTestimonialsArgs = {
  where?: InputMaybe<TestimonialManyWhereInput>;
};


export type MutationDeleteManyTestimonialsConnectionArgs = {
  after?: InputMaybe<Scalars['ID']>;
  before?: InputMaybe<Scalars['ID']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  skip?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<TestimonialManyWhereInput>;
};


export type MutationDeleteNavigationArgs = {
  where: NavigationWhereUniqueInput;
};


export type MutationDeletePageArgs = {
  where: PageWhereUniqueInput;
};


export type MutationDeleteProductArgs = {
  where: ProductWhereUniqueInput;
};


export type MutationDeleteProfileArgs = {
  where: ProfileWhereUniqueInput;
};


export type MutationDeleteScheduledOperationArgs = {
  where: ScheduledOperationWhereUniqueInput;
};


export type MutationDeleteScheduledReleaseArgs = {
  where: ScheduledReleaseWhereUniqueInput;
};


export type MutationDeleteSiteLibraryArgs = {
  where: SiteLibraryWhereUniqueInput;
};


export type MutationDeleteTestimonialArgs = {
  where: TestimonialWhereUniqueInput;
};


export type MutationPublishAlbumArgs = {
  to?: Array<Stage>;
  where: AlbumWhereUniqueInput;
};


export type MutationPublishAssetArgs = {
  locales?: InputMaybe<Array<Locale>>;
  publishBase?: InputMaybe<Scalars['Boolean']>;
  to?: Array<Stage>;
  where: AssetWhereUniqueInput;
  withDefaultLocale?: InputMaybe<Scalars['Boolean']>;
};


export type MutationPublishBlogArgs = {
  to?: Array<Stage>;
  where: BlogWhereUniqueInput;
};


export type MutationPublishContactArgs = {
  to?: Array<Stage>;
  where: ContactWhereUniqueInput;
};


export type MutationPublishEventArgs = {
  to?: Array<Stage>;
  where: EventWhereUniqueInput;
};


export type MutationPublishLogoTableArgs = {
  to?: Array<Stage>;
  where: LogoTableWhereUniqueInput;
};


export type MutationPublishManyAlbumsArgs = {
  to?: Array<Stage>;
  where?: InputMaybe<AlbumManyWhereInput>;
};


export type MutationPublishManyAlbumsConnectionArgs = {
  after?: InputMaybe<Scalars['ID']>;
  before?: InputMaybe<Scalars['ID']>;
  first?: InputMaybe<Scalars['Int']>;
  from?: InputMaybe<Stage>;
  last?: InputMaybe<Scalars['Int']>;
  skip?: InputMaybe<Scalars['Int']>;
  to?: Array<Stage>;
  where?: InputMaybe<AlbumManyWhereInput>;
};


export type MutationPublishManyAssetsArgs = {
  locales?: InputMaybe<Array<Locale>>;
  publishBase?: InputMaybe<Scalars['Boolean']>;
  to?: Array<Stage>;
  where?: InputMaybe<AssetManyWhereInput>;
  withDefaultLocale?: InputMaybe<Scalars['Boolean']>;
};


export type MutationPublishManyAssetsConnectionArgs = {
  after?: InputMaybe<Scalars['ID']>;
  before?: InputMaybe<Scalars['ID']>;
  first?: InputMaybe<Scalars['Int']>;
  from?: InputMaybe<Stage>;
  last?: InputMaybe<Scalars['Int']>;
  locales?: InputMaybe<Array<Locale>>;
  publishBase?: InputMaybe<Scalars['Boolean']>;
  skip?: InputMaybe<Scalars['Int']>;
  to?: Array<Stage>;
  where?: InputMaybe<AssetManyWhereInput>;
  withDefaultLocale?: InputMaybe<Scalars['Boolean']>;
};


export type MutationPublishManyBlogsArgs = {
  to?: Array<Stage>;
  where?: InputMaybe<BlogManyWhereInput>;
};


export type MutationPublishManyBlogsConnectionArgs = {
  after?: InputMaybe<Scalars['ID']>;
  before?: InputMaybe<Scalars['ID']>;
  first?: InputMaybe<Scalars['Int']>;
  from?: InputMaybe<Stage>;
  last?: InputMaybe<Scalars['Int']>;
  skip?: InputMaybe<Scalars['Int']>;
  to?: Array<Stage>;
  where?: InputMaybe<BlogManyWhereInput>;
};


export type MutationPublishManyContactsArgs = {
  to?: Array<Stage>;
  where?: InputMaybe<ContactManyWhereInput>;
};


export type MutationPublishManyContactsConnectionArgs = {
  after?: InputMaybe<Scalars['ID']>;
  before?: InputMaybe<Scalars['ID']>;
  first?: InputMaybe<Scalars['Int']>;
  from?: InputMaybe<Stage>;
  last?: InputMaybe<Scalars['Int']>;
  skip?: InputMaybe<Scalars['Int']>;
  to?: Array<Stage>;
  where?: InputMaybe<ContactManyWhereInput>;
};


export type MutationPublishManyEventsArgs = {
  to?: Array<Stage>;
  where?: InputMaybe<EventManyWhereInput>;
};


export type MutationPublishManyEventsConnectionArgs = {
  after?: InputMaybe<Scalars['ID']>;
  before?: InputMaybe<Scalars['ID']>;
  first?: InputMaybe<Scalars['Int']>;
  from?: InputMaybe<Stage>;
  last?: InputMaybe<Scalars['Int']>;
  skip?: InputMaybe<Scalars['Int']>;
  to?: Array<Stage>;
  where?: InputMaybe<EventManyWhereInput>;
};


export type MutationPublishManyLogoTablesArgs = {
  to?: Array<Stage>;
  where?: InputMaybe<LogoTableManyWhereInput>;
};


export type MutationPublishManyLogoTablesConnectionArgs = {
  after?: InputMaybe<Scalars['ID']>;
  before?: InputMaybe<Scalars['ID']>;
  first?: InputMaybe<Scalars['Int']>;
  from?: InputMaybe<Stage>;
  last?: InputMaybe<Scalars['Int']>;
  skip?: InputMaybe<Scalars['Int']>;
  to?: Array<Stage>;
  where?: InputMaybe<LogoTableManyWhereInput>;
};


export type MutationPublishManyNavigationsArgs = {
  to?: Array<Stage>;
  where?: InputMaybe<NavigationManyWhereInput>;
};


export type MutationPublishManyNavigationsConnectionArgs = {
  after?: InputMaybe<Scalars['ID']>;
  before?: InputMaybe<Scalars['ID']>;
  first?: InputMaybe<Scalars['Int']>;
  from?: InputMaybe<Stage>;
  last?: InputMaybe<Scalars['Int']>;
  skip?: InputMaybe<Scalars['Int']>;
  to?: Array<Stage>;
  where?: InputMaybe<NavigationManyWhereInput>;
};


export type MutationPublishManyPagesArgs = {
  to?: Array<Stage>;
  where?: InputMaybe<PageManyWhereInput>;
};


export type MutationPublishManyPagesConnectionArgs = {
  after?: InputMaybe<Scalars['ID']>;
  before?: InputMaybe<Scalars['ID']>;
  first?: InputMaybe<Scalars['Int']>;
  from?: InputMaybe<Stage>;
  last?: InputMaybe<Scalars['Int']>;
  skip?: InputMaybe<Scalars['Int']>;
  to?: Array<Stage>;
  where?: InputMaybe<PageManyWhereInput>;
};


export type MutationPublishManyProductsArgs = {
  to?: Array<Stage>;
  where?: InputMaybe<ProductManyWhereInput>;
};


export type MutationPublishManyProductsConnectionArgs = {
  after?: InputMaybe<Scalars['ID']>;
  before?: InputMaybe<Scalars['ID']>;
  first?: InputMaybe<Scalars['Int']>;
  from?: InputMaybe<Stage>;
  last?: InputMaybe<Scalars['Int']>;
  skip?: InputMaybe<Scalars['Int']>;
  to?: Array<Stage>;
  where?: InputMaybe<ProductManyWhereInput>;
};


export type MutationPublishManyProfilesArgs = {
  to?: Array<Stage>;
  where?: InputMaybe<ProfileManyWhereInput>;
};


export type MutationPublishManyProfilesConnectionArgs = {
  after?: InputMaybe<Scalars['ID']>;
  before?: InputMaybe<Scalars['ID']>;
  first?: InputMaybe<Scalars['Int']>;
  from?: InputMaybe<Stage>;
  last?: InputMaybe<Scalars['Int']>;
  skip?: InputMaybe<Scalars['Int']>;
  to?: Array<Stage>;
  where?: InputMaybe<ProfileManyWhereInput>;
};


export type MutationPublishManySiteLibrariesArgs = {
  to?: Array<Stage>;
  where?: InputMaybe<SiteLibraryManyWhereInput>;
};


export type MutationPublishManySiteLibrariesConnectionArgs = {
  after?: InputMaybe<Scalars['ID']>;
  before?: InputMaybe<Scalars['ID']>;
  first?: InputMaybe<Scalars['Int']>;
  from?: InputMaybe<Stage>;
  last?: InputMaybe<Scalars['Int']>;
  skip?: InputMaybe<Scalars['Int']>;
  to?: Array<Stage>;
  where?: InputMaybe<SiteLibraryManyWhereInput>;
};


export type MutationPublishManyTestimonialsArgs = {
  to?: Array<Stage>;
  where?: InputMaybe<TestimonialManyWhereInput>;
};


export type MutationPublishManyTestimonialsConnectionArgs = {
  after?: InputMaybe<Scalars['ID']>;
  before?: InputMaybe<Scalars['ID']>;
  first?: InputMaybe<Scalars['Int']>;
  from?: InputMaybe<Stage>;
  last?: InputMaybe<Scalars['Int']>;
  skip?: InputMaybe<Scalars['Int']>;
  to?: Array<Stage>;
  where?: InputMaybe<TestimonialManyWhereInput>;
};


export type MutationPublishNavigationArgs = {
  to?: Array<Stage>;
  where: NavigationWhereUniqueInput;
};


export type MutationPublishPageArgs = {
  to?: Array<Stage>;
  where: PageWhereUniqueInput;
};


export type MutationPublishProductArgs = {
  to?: Array<Stage>;
  where: ProductWhereUniqueInput;
};


export type MutationPublishProfileArgs = {
  to?: Array<Stage>;
  where: ProfileWhereUniqueInput;
};


export type MutationPublishSiteLibraryArgs = {
  to?: Array<Stage>;
  where: SiteLibraryWhereUniqueInput;
};


export type MutationPublishTestimonialArgs = {
  to?: Array<Stage>;
  where: TestimonialWhereUniqueInput;
};


export type MutationSchedulePublishAlbumArgs = {
  releaseAt?: InputMaybe<Scalars['DateTime']>;
  releaseId?: InputMaybe<Scalars['String']>;
  to?: Array<Stage>;
  where: AlbumWhereUniqueInput;
};


export type MutationSchedulePublishAssetArgs = {
  locales?: InputMaybe<Array<Locale>>;
  publishBase?: InputMaybe<Scalars['Boolean']>;
  releaseAt?: InputMaybe<Scalars['DateTime']>;
  releaseId?: InputMaybe<Scalars['String']>;
  to?: Array<Stage>;
  where: AssetWhereUniqueInput;
  withDefaultLocale?: InputMaybe<Scalars['Boolean']>;
};


export type MutationSchedulePublishBlogArgs = {
  releaseAt?: InputMaybe<Scalars['DateTime']>;
  releaseId?: InputMaybe<Scalars['String']>;
  to?: Array<Stage>;
  where: BlogWhereUniqueInput;
};


export type MutationSchedulePublishContactArgs = {
  releaseAt?: InputMaybe<Scalars['DateTime']>;
  releaseId?: InputMaybe<Scalars['String']>;
  to?: Array<Stage>;
  where: ContactWhereUniqueInput;
};


export type MutationSchedulePublishEventArgs = {
  releaseAt?: InputMaybe<Scalars['DateTime']>;
  releaseId?: InputMaybe<Scalars['String']>;
  to?: Array<Stage>;
  where: EventWhereUniqueInput;
};


export type MutationSchedulePublishLogoTableArgs = {
  releaseAt?: InputMaybe<Scalars['DateTime']>;
  releaseId?: InputMaybe<Scalars['String']>;
  to?: Array<Stage>;
  where: LogoTableWhereUniqueInput;
};


export type MutationSchedulePublishNavigationArgs = {
  releaseAt?: InputMaybe<Scalars['DateTime']>;
  releaseId?: InputMaybe<Scalars['String']>;
  to?: Array<Stage>;
  where: NavigationWhereUniqueInput;
};


export type MutationSchedulePublishPageArgs = {
  releaseAt?: InputMaybe<Scalars['DateTime']>;
  releaseId?: InputMaybe<Scalars['String']>;
  to?: Array<Stage>;
  where: PageWhereUniqueInput;
};


export type MutationSchedulePublishProductArgs = {
  releaseAt?: InputMaybe<Scalars['DateTime']>;
  releaseId?: InputMaybe<Scalars['String']>;
  to?: Array<Stage>;
  where: ProductWhereUniqueInput;
};


export type MutationSchedulePublishProfileArgs = {
  releaseAt?: InputMaybe<Scalars['DateTime']>;
  releaseId?: InputMaybe<Scalars['String']>;
  to?: Array<Stage>;
  where: ProfileWhereUniqueInput;
};


export type MutationSchedulePublishSiteLibraryArgs = {
  releaseAt?: InputMaybe<Scalars['DateTime']>;
  releaseId?: InputMaybe<Scalars['String']>;
  to?: Array<Stage>;
  where: SiteLibraryWhereUniqueInput;
};


export type MutationSchedulePublishTestimonialArgs = {
  releaseAt?: InputMaybe<Scalars['DateTime']>;
  releaseId?: InputMaybe<Scalars['String']>;
  to?: Array<Stage>;
  where: TestimonialWhereUniqueInput;
};


export type MutationScheduleUnpublishAlbumArgs = {
  from?: Array<Stage>;
  releaseAt?: InputMaybe<Scalars['DateTime']>;
  releaseId?: InputMaybe<Scalars['String']>;
  where: AlbumWhereUniqueInput;
};


export type MutationScheduleUnpublishAssetArgs = {
  from?: Array<Stage>;
  locales?: InputMaybe<Array<Locale>>;
  releaseAt?: InputMaybe<Scalars['DateTime']>;
  releaseId?: InputMaybe<Scalars['String']>;
  unpublishBase?: InputMaybe<Scalars['Boolean']>;
  where: AssetWhereUniqueInput;
};


export type MutationScheduleUnpublishBlogArgs = {
  from?: Array<Stage>;
  releaseAt?: InputMaybe<Scalars['DateTime']>;
  releaseId?: InputMaybe<Scalars['String']>;
  where: BlogWhereUniqueInput;
};


export type MutationScheduleUnpublishContactArgs = {
  from?: Array<Stage>;
  releaseAt?: InputMaybe<Scalars['DateTime']>;
  releaseId?: InputMaybe<Scalars['String']>;
  where: ContactWhereUniqueInput;
};


export type MutationScheduleUnpublishEventArgs = {
  from?: Array<Stage>;
  releaseAt?: InputMaybe<Scalars['DateTime']>;
  releaseId?: InputMaybe<Scalars['String']>;
  where: EventWhereUniqueInput;
};


export type MutationScheduleUnpublishLogoTableArgs = {
  from?: Array<Stage>;
  releaseAt?: InputMaybe<Scalars['DateTime']>;
  releaseId?: InputMaybe<Scalars['String']>;
  where: LogoTableWhereUniqueInput;
};


export type MutationScheduleUnpublishNavigationArgs = {
  from?: Array<Stage>;
  releaseAt?: InputMaybe<Scalars['DateTime']>;
  releaseId?: InputMaybe<Scalars['String']>;
  where: NavigationWhereUniqueInput;
};


export type MutationScheduleUnpublishPageArgs = {
  from?: Array<Stage>;
  releaseAt?: InputMaybe<Scalars['DateTime']>;
  releaseId?: InputMaybe<Scalars['String']>;
  where: PageWhereUniqueInput;
};


export type MutationScheduleUnpublishProductArgs = {
  from?: Array<Stage>;
  releaseAt?: InputMaybe<Scalars['DateTime']>;
  releaseId?: InputMaybe<Scalars['String']>;
  where: ProductWhereUniqueInput;
};


export type MutationScheduleUnpublishProfileArgs = {
  from?: Array<Stage>;
  releaseAt?: InputMaybe<Scalars['DateTime']>;
  releaseId?: InputMaybe<Scalars['String']>;
  where: ProfileWhereUniqueInput;
};


export type MutationScheduleUnpublishSiteLibraryArgs = {
  from?: Array<Stage>;
  releaseAt?: InputMaybe<Scalars['DateTime']>;
  releaseId?: InputMaybe<Scalars['String']>;
  where: SiteLibraryWhereUniqueInput;
};


export type MutationScheduleUnpublishTestimonialArgs = {
  from?: Array<Stage>;
  releaseAt?: InputMaybe<Scalars['DateTime']>;
  releaseId?: InputMaybe<Scalars['String']>;
  where: TestimonialWhereUniqueInput;
};


export type MutationUnpublishAlbumArgs = {
  from?: Array<Stage>;
  where: AlbumWhereUniqueInput;
};


export type MutationUnpublishAssetArgs = {
  from?: Array<Stage>;
  locales?: InputMaybe<Array<Locale>>;
  unpublishBase?: InputMaybe<Scalars['Boolean']>;
  where: AssetWhereUniqueInput;
};


export type MutationUnpublishBlogArgs = {
  from?: Array<Stage>;
  where: BlogWhereUniqueInput;
};


export type MutationUnpublishContactArgs = {
  from?: Array<Stage>;
  where: ContactWhereUniqueInput;
};


export type MutationUnpublishEventArgs = {
  from?: Array<Stage>;
  where: EventWhereUniqueInput;
};


export type MutationUnpublishLogoTableArgs = {
  from?: Array<Stage>;
  where: LogoTableWhereUniqueInput;
};


export type MutationUnpublishManyAlbumsArgs = {
  from?: Array<Stage>;
  where?: InputMaybe<AlbumManyWhereInput>;
};


export type MutationUnpublishManyAlbumsConnectionArgs = {
  after?: InputMaybe<Scalars['ID']>;
  before?: InputMaybe<Scalars['ID']>;
  first?: InputMaybe<Scalars['Int']>;
  from?: Array<Stage>;
  last?: InputMaybe<Scalars['Int']>;
  skip?: InputMaybe<Scalars['Int']>;
  stage?: InputMaybe<Stage>;
  where?: InputMaybe<AlbumManyWhereInput>;
};


export type MutationUnpublishManyAssetsArgs = {
  from?: Array<Stage>;
  locales?: InputMaybe<Array<Locale>>;
  unpublishBase?: InputMaybe<Scalars['Boolean']>;
  where?: InputMaybe<AssetManyWhereInput>;
};


export type MutationUnpublishManyAssetsConnectionArgs = {
  after?: InputMaybe<Scalars['ID']>;
  before?: InputMaybe<Scalars['ID']>;
  first?: InputMaybe<Scalars['Int']>;
  from?: Array<Stage>;
  last?: InputMaybe<Scalars['Int']>;
  locales?: InputMaybe<Array<Locale>>;
  skip?: InputMaybe<Scalars['Int']>;
  stage?: InputMaybe<Stage>;
  unpublishBase?: InputMaybe<Scalars['Boolean']>;
  where?: InputMaybe<AssetManyWhereInput>;
};


export type MutationUnpublishManyBlogsArgs = {
  from?: Array<Stage>;
  where?: InputMaybe<BlogManyWhereInput>;
};


export type MutationUnpublishManyBlogsConnectionArgs = {
  after?: InputMaybe<Scalars['ID']>;
  before?: InputMaybe<Scalars['ID']>;
  first?: InputMaybe<Scalars['Int']>;
  from?: Array<Stage>;
  last?: InputMaybe<Scalars['Int']>;
  skip?: InputMaybe<Scalars['Int']>;
  stage?: InputMaybe<Stage>;
  where?: InputMaybe<BlogManyWhereInput>;
};


export type MutationUnpublishManyContactsArgs = {
  from?: Array<Stage>;
  where?: InputMaybe<ContactManyWhereInput>;
};


export type MutationUnpublishManyContactsConnectionArgs = {
  after?: InputMaybe<Scalars['ID']>;
  before?: InputMaybe<Scalars['ID']>;
  first?: InputMaybe<Scalars['Int']>;
  from?: Array<Stage>;
  last?: InputMaybe<Scalars['Int']>;
  skip?: InputMaybe<Scalars['Int']>;
  stage?: InputMaybe<Stage>;
  where?: InputMaybe<ContactManyWhereInput>;
};


export type MutationUnpublishManyEventsArgs = {
  from?: Array<Stage>;
  where?: InputMaybe<EventManyWhereInput>;
};


export type MutationUnpublishManyEventsConnectionArgs = {
  after?: InputMaybe<Scalars['ID']>;
  before?: InputMaybe<Scalars['ID']>;
  first?: InputMaybe<Scalars['Int']>;
  from?: Array<Stage>;
  last?: InputMaybe<Scalars['Int']>;
  skip?: InputMaybe<Scalars['Int']>;
  stage?: InputMaybe<Stage>;
  where?: InputMaybe<EventManyWhereInput>;
};


export type MutationUnpublishManyLogoTablesArgs = {
  from?: Array<Stage>;
  where?: InputMaybe<LogoTableManyWhereInput>;
};


export type MutationUnpublishManyLogoTablesConnectionArgs = {
  after?: InputMaybe<Scalars['ID']>;
  before?: InputMaybe<Scalars['ID']>;
  first?: InputMaybe<Scalars['Int']>;
  from?: Array<Stage>;
  last?: InputMaybe<Scalars['Int']>;
  skip?: InputMaybe<Scalars['Int']>;
  stage?: InputMaybe<Stage>;
  where?: InputMaybe<LogoTableManyWhereInput>;
};


export type MutationUnpublishManyNavigationsArgs = {
  from?: Array<Stage>;
  where?: InputMaybe<NavigationManyWhereInput>;
};


export type MutationUnpublishManyNavigationsConnectionArgs = {
  after?: InputMaybe<Scalars['ID']>;
  before?: InputMaybe<Scalars['ID']>;
  first?: InputMaybe<Scalars['Int']>;
  from?: Array<Stage>;
  last?: InputMaybe<Scalars['Int']>;
  skip?: InputMaybe<Scalars['Int']>;
  stage?: InputMaybe<Stage>;
  where?: InputMaybe<NavigationManyWhereInput>;
};


export type MutationUnpublishManyPagesArgs = {
  from?: Array<Stage>;
  where?: InputMaybe<PageManyWhereInput>;
};


export type MutationUnpublishManyPagesConnectionArgs = {
  after?: InputMaybe<Scalars['ID']>;
  before?: InputMaybe<Scalars['ID']>;
  first?: InputMaybe<Scalars['Int']>;
  from?: Array<Stage>;
  last?: InputMaybe<Scalars['Int']>;
  skip?: InputMaybe<Scalars['Int']>;
  stage?: InputMaybe<Stage>;
  where?: InputMaybe<PageManyWhereInput>;
};


export type MutationUnpublishManyProductsArgs = {
  from?: Array<Stage>;
  where?: InputMaybe<ProductManyWhereInput>;
};


export type MutationUnpublishManyProductsConnectionArgs = {
  after?: InputMaybe<Scalars['ID']>;
  before?: InputMaybe<Scalars['ID']>;
  first?: InputMaybe<Scalars['Int']>;
  from?: Array<Stage>;
  last?: InputMaybe<Scalars['Int']>;
  skip?: InputMaybe<Scalars['Int']>;
  stage?: InputMaybe<Stage>;
  where?: InputMaybe<ProductManyWhereInput>;
};


export type MutationUnpublishManyProfilesArgs = {
  from?: Array<Stage>;
  where?: InputMaybe<ProfileManyWhereInput>;
};


export type MutationUnpublishManyProfilesConnectionArgs = {
  after?: InputMaybe<Scalars['ID']>;
  before?: InputMaybe<Scalars['ID']>;
  first?: InputMaybe<Scalars['Int']>;
  from?: Array<Stage>;
  last?: InputMaybe<Scalars['Int']>;
  skip?: InputMaybe<Scalars['Int']>;
  stage?: InputMaybe<Stage>;
  where?: InputMaybe<ProfileManyWhereInput>;
};


export type MutationUnpublishManySiteLibrariesArgs = {
  from?: Array<Stage>;
  where?: InputMaybe<SiteLibraryManyWhereInput>;
};


export type MutationUnpublishManySiteLibrariesConnectionArgs = {
  after?: InputMaybe<Scalars['ID']>;
  before?: InputMaybe<Scalars['ID']>;
  first?: InputMaybe<Scalars['Int']>;
  from?: Array<Stage>;
  last?: InputMaybe<Scalars['Int']>;
  skip?: InputMaybe<Scalars['Int']>;
  stage?: InputMaybe<Stage>;
  where?: InputMaybe<SiteLibraryManyWhereInput>;
};


export type MutationUnpublishManyTestimonialsArgs = {
  from?: Array<Stage>;
  where?: InputMaybe<TestimonialManyWhereInput>;
};


export type MutationUnpublishManyTestimonialsConnectionArgs = {
  after?: InputMaybe<Scalars['ID']>;
  before?: InputMaybe<Scalars['ID']>;
  first?: InputMaybe<Scalars['Int']>;
  from?: Array<Stage>;
  last?: InputMaybe<Scalars['Int']>;
  skip?: InputMaybe<Scalars['Int']>;
  stage?: InputMaybe<Stage>;
  where?: InputMaybe<TestimonialManyWhereInput>;
};


export type MutationUnpublishNavigationArgs = {
  from?: Array<Stage>;
  where: NavigationWhereUniqueInput;
};


export type MutationUnpublishPageArgs = {
  from?: Array<Stage>;
  where: PageWhereUniqueInput;
};


export type MutationUnpublishProductArgs = {
  from?: Array<Stage>;
  where: ProductWhereUniqueInput;
};


export type MutationUnpublishProfileArgs = {
  from?: Array<Stage>;
  where: ProfileWhereUniqueInput;
};


export type MutationUnpublishSiteLibraryArgs = {
  from?: Array<Stage>;
  where: SiteLibraryWhereUniqueInput;
};


export type MutationUnpublishTestimonialArgs = {
  from?: Array<Stage>;
  where: TestimonialWhereUniqueInput;
};


export type MutationUpdateAlbumArgs = {
  data: AlbumUpdateInput;
  where: AlbumWhereUniqueInput;
};


export type MutationUpdateAssetArgs = {
  data: AssetUpdateInput;
  where: AssetWhereUniqueInput;
};


export type MutationUpdateBlogArgs = {
  data: BlogUpdateInput;
  where: BlogWhereUniqueInput;
};


export type MutationUpdateContactArgs = {
  data: ContactUpdateInput;
  where: ContactWhereUniqueInput;
};


export type MutationUpdateEventArgs = {
  data: EventUpdateInput;
  where: EventWhereUniqueInput;
};


export type MutationUpdateLogoTableArgs = {
  data: LogoTableUpdateInput;
  where: LogoTableWhereUniqueInput;
};


export type MutationUpdateManyAlbumsArgs = {
  data: AlbumUpdateManyInput;
  where?: InputMaybe<AlbumManyWhereInput>;
};


export type MutationUpdateManyAlbumsConnectionArgs = {
  after?: InputMaybe<Scalars['ID']>;
  before?: InputMaybe<Scalars['ID']>;
  data: AlbumUpdateManyInput;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  skip?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<AlbumManyWhereInput>;
};


export type MutationUpdateManyAssetsArgs = {
  data: AssetUpdateManyInput;
  where?: InputMaybe<AssetManyWhereInput>;
};


export type MutationUpdateManyAssetsConnectionArgs = {
  after?: InputMaybe<Scalars['ID']>;
  before?: InputMaybe<Scalars['ID']>;
  data: AssetUpdateManyInput;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  skip?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<AssetManyWhereInput>;
};


export type MutationUpdateManyBlogsArgs = {
  data: BlogUpdateManyInput;
  where?: InputMaybe<BlogManyWhereInput>;
};


export type MutationUpdateManyBlogsConnectionArgs = {
  after?: InputMaybe<Scalars['ID']>;
  before?: InputMaybe<Scalars['ID']>;
  data: BlogUpdateManyInput;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  skip?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<BlogManyWhereInput>;
};


export type MutationUpdateManyContactsArgs = {
  data: ContactUpdateManyInput;
  where?: InputMaybe<ContactManyWhereInput>;
};


export type MutationUpdateManyContactsConnectionArgs = {
  after?: InputMaybe<Scalars['ID']>;
  before?: InputMaybe<Scalars['ID']>;
  data: ContactUpdateManyInput;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  skip?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<ContactManyWhereInput>;
};


export type MutationUpdateManyEventsArgs = {
  data: EventUpdateManyInput;
  where?: InputMaybe<EventManyWhereInput>;
};


export type MutationUpdateManyEventsConnectionArgs = {
  after?: InputMaybe<Scalars['ID']>;
  before?: InputMaybe<Scalars['ID']>;
  data: EventUpdateManyInput;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  skip?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<EventManyWhereInput>;
};


export type MutationUpdateManyLogoTablesArgs = {
  data: LogoTableUpdateManyInput;
  where?: InputMaybe<LogoTableManyWhereInput>;
};


export type MutationUpdateManyLogoTablesConnectionArgs = {
  after?: InputMaybe<Scalars['ID']>;
  before?: InputMaybe<Scalars['ID']>;
  data: LogoTableUpdateManyInput;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  skip?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<LogoTableManyWhereInput>;
};


export type MutationUpdateManyNavigationsArgs = {
  data: NavigationUpdateManyInput;
  where?: InputMaybe<NavigationManyWhereInput>;
};


export type MutationUpdateManyNavigationsConnectionArgs = {
  after?: InputMaybe<Scalars['ID']>;
  before?: InputMaybe<Scalars['ID']>;
  data: NavigationUpdateManyInput;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  skip?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<NavigationManyWhereInput>;
};


export type MutationUpdateManyPagesArgs = {
  data: PageUpdateManyInput;
  where?: InputMaybe<PageManyWhereInput>;
};


export type MutationUpdateManyPagesConnectionArgs = {
  after?: InputMaybe<Scalars['ID']>;
  before?: InputMaybe<Scalars['ID']>;
  data: PageUpdateManyInput;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  skip?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<PageManyWhereInput>;
};


export type MutationUpdateManyProductsArgs = {
  data: ProductUpdateManyInput;
  where?: InputMaybe<ProductManyWhereInput>;
};


export type MutationUpdateManyProductsConnectionArgs = {
  after?: InputMaybe<Scalars['ID']>;
  before?: InputMaybe<Scalars['ID']>;
  data: ProductUpdateManyInput;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  skip?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<ProductManyWhereInput>;
};


export type MutationUpdateManyProfilesArgs = {
  data: ProfileUpdateManyInput;
  where?: InputMaybe<ProfileManyWhereInput>;
};


export type MutationUpdateManyProfilesConnectionArgs = {
  after?: InputMaybe<Scalars['ID']>;
  before?: InputMaybe<Scalars['ID']>;
  data: ProfileUpdateManyInput;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  skip?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<ProfileManyWhereInput>;
};


export type MutationUpdateManySiteLibrariesArgs = {
  data: SiteLibraryUpdateManyInput;
  where?: InputMaybe<SiteLibraryManyWhereInput>;
};


export type MutationUpdateManySiteLibrariesConnectionArgs = {
  after?: InputMaybe<Scalars['ID']>;
  before?: InputMaybe<Scalars['ID']>;
  data: SiteLibraryUpdateManyInput;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  skip?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<SiteLibraryManyWhereInput>;
};


export type MutationUpdateManyTestimonialsArgs = {
  data: TestimonialUpdateManyInput;
  where?: InputMaybe<TestimonialManyWhereInput>;
};


export type MutationUpdateManyTestimonialsConnectionArgs = {
  after?: InputMaybe<Scalars['ID']>;
  before?: InputMaybe<Scalars['ID']>;
  data: TestimonialUpdateManyInput;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  skip?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<TestimonialManyWhereInput>;
};


export type MutationUpdateNavigationArgs = {
  data: NavigationUpdateInput;
  where: NavigationWhereUniqueInput;
};


export type MutationUpdatePageArgs = {
  data: PageUpdateInput;
  where: PageWhereUniqueInput;
};


export type MutationUpdateProductArgs = {
  data: ProductUpdateInput;
  where: ProductWhereUniqueInput;
};


export type MutationUpdateProfileArgs = {
  data: ProfileUpdateInput;
  where: ProfileWhereUniqueInput;
};


export type MutationUpdateScheduledReleaseArgs = {
  data: ScheduledReleaseUpdateInput;
  where: ScheduledReleaseWhereUniqueInput;
};


export type MutationUpdateSiteLibraryArgs = {
  data: SiteLibraryUpdateInput;
  where: SiteLibraryWhereUniqueInput;
};


export type MutationUpdateTestimonialArgs = {
  data: TestimonialUpdateInput;
  where: TestimonialWhereUniqueInput;
};


export type MutationUpsertAlbumArgs = {
  upsert: AlbumUpsertInput;
  where: AlbumWhereUniqueInput;
};


export type MutationUpsertAssetArgs = {
  upsert: AssetUpsertInput;
  where: AssetWhereUniqueInput;
};


export type MutationUpsertBlogArgs = {
  upsert: BlogUpsertInput;
  where: BlogWhereUniqueInput;
};


export type MutationUpsertContactArgs = {
  upsert: ContactUpsertInput;
  where: ContactWhereUniqueInput;
};


export type MutationUpsertEventArgs = {
  upsert: EventUpsertInput;
  where: EventWhereUniqueInput;
};


export type MutationUpsertLogoTableArgs = {
  upsert: LogoTableUpsertInput;
  where: LogoTableWhereUniqueInput;
};


export type MutationUpsertNavigationArgs = {
  upsert: NavigationUpsertInput;
  where: NavigationWhereUniqueInput;
};


export type MutationUpsertPageArgs = {
  upsert: PageUpsertInput;
  where: PageWhereUniqueInput;
};


export type MutationUpsertProductArgs = {
  upsert: ProductUpsertInput;
  where: ProductWhereUniqueInput;
};


export type MutationUpsertProfileArgs = {
  upsert: ProfileUpsertInput;
  where: ProfileWhereUniqueInput;
};


export type MutationUpsertSiteLibraryArgs = {
  upsert: SiteLibraryUpsertInput;
  where: SiteLibraryWhereUniqueInput;
};


export type MutationUpsertTestimonialArgs = {
  upsert: TestimonialUpsertInput;
  where: TestimonialWhereUniqueInput;
};

export type Navigation = Entity & Node & {
  __typename?: 'Navigation';
  /** The time the document was created */
  createdAt: Scalars['DateTime'];
  /** User that created this document */
  createdBy?: Maybe<User>;
  /** Get the document in other stages */
  documentInStages: Array<Navigation>;
  footerColumns: Array<FooterColumn>;
  footerItems: Array<NavigationItem>;
  footerWrapperCssClass?: Maybe<Scalars['String']>;
  /** List of Navigation versions */
  history: Array<Version>;
  /** The unique identifier */
  id: Scalars['ID'];
  items: Array<NavigationItem>;
  navigationLayoutStyle?: Maybe<NavigationLayout>;
  navigationLogo?: Maybe<Asset>;
  navigationWrapperCssClass?: Maybe<Scalars['String']>;
  pageNavigationSelection?: Maybe<PageNavigationSelection>;
  /** The time the document was published. Null on documents in draft stage. */
  publishedAt?: Maybe<Scalars['DateTime']>;
  /** User that last published this document */
  publishedBy?: Maybe<User>;
  scheduledIn: Array<ScheduledOperation>;
  /** System stage field */
  stage: Stage;
  /** The time the document was updated */
  updatedAt: Scalars['DateTime'];
  /** User that last updated this document */
  updatedBy?: Maybe<User>;
};


export type NavigationCreatedByArgs = {
  forceParentLocale?: InputMaybe<Scalars['Boolean']>;
  locales?: InputMaybe<Array<Locale>>;
};


export type NavigationDocumentInStagesArgs = {
  includeCurrent?: Scalars['Boolean'];
  inheritLocale?: Scalars['Boolean'];
  stages?: Array<Stage>;
};


export type NavigationFooterColumnsArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  forceParentLocale?: InputMaybe<Scalars['Boolean']>;
  last?: InputMaybe<Scalars['Int']>;
  locales?: InputMaybe<Array<Locale>>;
  orderBy?: InputMaybe<FooterColumnOrderByInput>;
  skip?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<FooterColumnWhereInput>;
};


export type NavigationFooterItemsArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  forceParentLocale?: InputMaybe<Scalars['Boolean']>;
  last?: InputMaybe<Scalars['Int']>;
  locales?: InputMaybe<Array<Locale>>;
  orderBy?: InputMaybe<NavigationItemOrderByInput>;
  skip?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<NavigationItemWhereInput>;
};


export type NavigationHistoryArgs = {
  limit?: Scalars['Int'];
  skip?: Scalars['Int'];
  stageOverride?: InputMaybe<Stage>;
};


export type NavigationItemsArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  forceParentLocale?: InputMaybe<Scalars['Boolean']>;
  last?: InputMaybe<Scalars['Int']>;
  locales?: InputMaybe<Array<Locale>>;
  orderBy?: InputMaybe<NavigationItemOrderByInput>;
  skip?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<NavigationItemWhereInput>;
};


export type NavigationNavigationLogoArgs = {
  forceParentLocale?: InputMaybe<Scalars['Boolean']>;
  locales?: InputMaybe<Array<Locale>>;
};


export type NavigationPublishedByArgs = {
  forceParentLocale?: InputMaybe<Scalars['Boolean']>;
  locales?: InputMaybe<Array<Locale>>;
};


export type NavigationScheduledInArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  forceParentLocale?: InputMaybe<Scalars['Boolean']>;
  last?: InputMaybe<Scalars['Int']>;
  locales?: InputMaybe<Array<Locale>>;
  skip?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<ScheduledOperationWhereInput>;
};


export type NavigationUpdatedByArgs = {
  forceParentLocale?: InputMaybe<Scalars['Boolean']>;
  locales?: InputMaybe<Array<Locale>>;
};

export type NavigationConnectInput = {
  /** Allow to specify document position in list of connected documents, will default to appending at end of list */
  position?: InputMaybe<ConnectPositionInput>;
  /** Document to connect */
  where: NavigationWhereUniqueInput;
};

/** A connection to a list of items. */
export type NavigationConnection = {
  __typename?: 'NavigationConnection';
  aggregate: Aggregate;
  /** A list of edges. */
  edges: Array<NavigationEdge>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
};

export type NavigationCreateInput = {
  createdAt?: InputMaybe<Scalars['DateTime']>;
  footerColumns?: InputMaybe<FooterColumnCreateManyInlineInput>;
  footerItems?: InputMaybe<NavigationItemCreateManyInlineInput>;
  footerWrapperCssClass?: InputMaybe<Scalars['String']>;
  items?: InputMaybe<NavigationItemCreateManyInlineInput>;
  navigationLayoutStyle?: InputMaybe<NavigationLayout>;
  navigationLogo?: InputMaybe<AssetCreateOneInlineInput>;
  navigationWrapperCssClass?: InputMaybe<Scalars['String']>;
  pageNavigationSelection?: InputMaybe<PageNavigationSelection>;
  updatedAt?: InputMaybe<Scalars['DateTime']>;
};

export type NavigationCreateManyInlineInput = {
  /** Connect multiple existing Navigation documents */
  connect?: InputMaybe<Array<NavigationWhereUniqueInput>>;
  /** Create and connect multiple existing Navigation documents */
  create?: InputMaybe<Array<NavigationCreateInput>>;
};

export type NavigationCreateOneInlineInput = {
  /** Connect one existing Navigation document */
  connect?: InputMaybe<NavigationWhereUniqueInput>;
  /** Create and connect one Navigation document */
  create?: InputMaybe<NavigationCreateInput>;
};

/** An edge in a connection. */
export type NavigationEdge = {
  __typename?: 'NavigationEdge';
  /** A cursor for use in pagination. */
  cursor: Scalars['String'];
  /** The item at the end of the edge. */
  node: Navigation;
};

export type NavigationItem = Entity & {
  __typename?: 'NavigationItem';
  cssClass?: Maybe<Scalars['String']>;
  /** The unique identifier */
  id: Scalars['ID'];
  image?: Maybe<Asset>;
  items: Array<NavigationItem>;
  label?: Maybe<Scalars['String']>;
  link?: Maybe<Scalars['String']>;
  primaryItem?: Maybe<Scalars['Boolean']>;
  sameTab?: Maybe<Scalars['Boolean']>;
  /** System stage field */
  stage: Stage;
};


export type NavigationItemImageArgs = {
  forceParentLocale?: InputMaybe<Scalars['Boolean']>;
  locales?: InputMaybe<Array<Locale>>;
};


export type NavigationItemItemsArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  forceParentLocale?: InputMaybe<Scalars['Boolean']>;
  last?: InputMaybe<Scalars['Int']>;
  locales?: InputMaybe<Array<Locale>>;
  orderBy?: InputMaybe<NavigationItemOrderByInput>;
  skip?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<NavigationItemWhereInput>;
};

export type NavigationItemConnectInput = {
  /** Allow to specify document position in list of connected documents, will default to appending at end of list */
  position?: InputMaybe<ConnectPositionInput>;
  /** Document to connect */
  where: NavigationItemWhereUniqueInput;
};

/** A connection to a list of items. */
export type NavigationItemConnection = {
  __typename?: 'NavigationItemConnection';
  aggregate: Aggregate;
  /** A list of edges. */
  edges: Array<NavigationItemEdge>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
};

export type NavigationItemCreateInput = {
  cssClass?: InputMaybe<Scalars['String']>;
  image?: InputMaybe<AssetCreateOneInlineInput>;
  items?: InputMaybe<NavigationItemCreateManyInlineInput>;
  label?: InputMaybe<Scalars['String']>;
  link?: InputMaybe<Scalars['String']>;
  primaryItem?: InputMaybe<Scalars['Boolean']>;
  sameTab?: InputMaybe<Scalars['Boolean']>;
};

export type NavigationItemCreateManyInlineInput = {
  /** Create and connect multiple existing NavigationItem documents */
  create?: InputMaybe<Array<NavigationItemCreateInput>>;
};

export type NavigationItemCreateOneInlineInput = {
  /** Create and connect one NavigationItem document */
  create?: InputMaybe<NavigationItemCreateInput>;
};

export type NavigationItemCreateWithPositionInput = {
  /** Document to create */
  data: NavigationItemCreateInput;
  /** Position in the list of existing component instances, will default to appending at the end of list */
  position?: InputMaybe<ConnectPositionInput>;
};

/** An edge in a connection. */
export type NavigationItemEdge = {
  __typename?: 'NavigationItemEdge';
  /** A cursor for use in pagination. */
  cursor: Scalars['String'];
  /** The item at the end of the edge. */
  node: NavigationItem;
};

/** Identifies documents */
export type NavigationItemManyWhereInput = {
  /** Logical AND on all given filters. */
  AND?: InputMaybe<Array<NavigationItemWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: InputMaybe<Array<NavigationItemWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: InputMaybe<Array<NavigationItemWhereInput>>;
  /** Contains search across all appropriate fields. */
  _search?: InputMaybe<Scalars['String']>;
  cssClass?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  cssClass_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  cssClass_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  cssClass_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Any other value that exists and is not equal to the given value. */
  cssClass_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  cssClass_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  cssClass_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  cssClass_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  cssClass_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  cssClass_starts_with?: InputMaybe<Scalars['String']>;
  id?: InputMaybe<Scalars['ID']>;
  /** All values containing the given string. */
  id_contains?: InputMaybe<Scalars['ID']>;
  /** All values ending with the given string. */
  id_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are contained in given list. */
  id_in?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** Any other value that exists and is not equal to the given value. */
  id_not?: InputMaybe<Scalars['ID']>;
  /** All values not containing the given string. */
  id_not_contains?: InputMaybe<Scalars['ID']>;
  /** All values not ending with the given string */
  id_not_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are not contained in given list. */
  id_not_in?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** All values not starting with the given string. */
  id_not_starts_with?: InputMaybe<Scalars['ID']>;
  /** All values starting with the given string. */
  id_starts_with?: InputMaybe<Scalars['ID']>;
  image?: InputMaybe<AssetWhereInput>;
  items_every?: InputMaybe<NavigationItemWhereInput>;
  items_none?: InputMaybe<NavigationItemWhereInput>;
  items_some?: InputMaybe<NavigationItemWhereInput>;
  label?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  label_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  label_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  label_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Any other value that exists and is not equal to the given value. */
  label_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  label_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  label_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  label_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  label_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  label_starts_with?: InputMaybe<Scalars['String']>;
  link?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  link_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  link_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  link_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Any other value that exists and is not equal to the given value. */
  link_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  link_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  link_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  link_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  link_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  link_starts_with?: InputMaybe<Scalars['String']>;
  primaryItem?: InputMaybe<Scalars['Boolean']>;
  /** Any other value that exists and is not equal to the given value. */
  primaryItem_not?: InputMaybe<Scalars['Boolean']>;
  sameTab?: InputMaybe<Scalars['Boolean']>;
  /** Any other value that exists and is not equal to the given value. */
  sameTab_not?: InputMaybe<Scalars['Boolean']>;
};

export enum NavigationItemOrderByInput {
  CssClassAsc = 'cssClass_ASC',
  CssClassDesc = 'cssClass_DESC',
  IdAsc = 'id_ASC',
  IdDesc = 'id_DESC',
  LabelAsc = 'label_ASC',
  LabelDesc = 'label_DESC',
  LinkAsc = 'link_ASC',
  LinkDesc = 'link_DESC',
  PrimaryItemAsc = 'primaryItem_ASC',
  PrimaryItemDesc = 'primaryItem_DESC',
  SameTabAsc = 'sameTab_ASC',
  SameTabDesc = 'sameTab_DESC'
}

export type NavigationItemParent = FooterColumn | Navigation | NavigationItem;

export type NavigationItemParentConnectInput = {
  FooterColumn?: InputMaybe<FooterColumnConnectInput>;
  Navigation?: InputMaybe<NavigationConnectInput>;
  NavigationItem?: InputMaybe<NavigationItemConnectInput>;
};

export type NavigationItemParentCreateInput = {
  FooterColumn?: InputMaybe<FooterColumnCreateInput>;
  Navigation?: InputMaybe<NavigationCreateInput>;
  NavigationItem?: InputMaybe<NavigationItemCreateInput>;
};

export type NavigationItemParentCreateManyInlineInput = {
  /** Connect multiple existing NavigationItemParent documents */
  connect?: InputMaybe<Array<NavigationItemParentWhereUniqueInput>>;
  /** Create and connect multiple existing NavigationItemParent documents */
  create?: InputMaybe<Array<NavigationItemParentCreateInput>>;
};

export type NavigationItemParentCreateOneInlineInput = {
  /** Connect one existing NavigationItemParent document */
  connect?: InputMaybe<NavigationItemParentWhereUniqueInput>;
  /** Create and connect one NavigationItemParent document */
  create?: InputMaybe<NavigationItemParentCreateInput>;
};

export type NavigationItemParentUpdateInput = {
  FooterColumn?: InputMaybe<FooterColumnUpdateInput>;
  Navigation?: InputMaybe<NavigationUpdateInput>;
  NavigationItem?: InputMaybe<NavigationItemUpdateInput>;
};

export type NavigationItemParentUpdateManyInlineInput = {
  /** Connect multiple existing NavigationItemParent documents */
  connect?: InputMaybe<Array<NavigationItemParentConnectInput>>;
  /** Create and connect multiple NavigationItemParent documents */
  create?: InputMaybe<Array<NavigationItemParentCreateInput>>;
  /** Delete multiple NavigationItemParent documents */
  delete?: InputMaybe<Array<NavigationItemParentWhereUniqueInput>>;
  /** Disconnect multiple NavigationItemParent documents */
  disconnect?: InputMaybe<Array<NavigationItemParentWhereUniqueInput>>;
  /** Override currently-connected documents with multiple existing NavigationItemParent documents */
  set?: InputMaybe<Array<NavigationItemParentWhereUniqueInput>>;
  /** Update multiple NavigationItemParent documents */
  update?: InputMaybe<Array<NavigationItemParentUpdateWithNestedWhereUniqueInput>>;
  /** Upsert multiple NavigationItemParent documents */
  upsert?: InputMaybe<Array<NavigationItemParentUpsertWithNestedWhereUniqueInput>>;
};

export type NavigationItemParentUpdateManyWithNestedWhereInput = {
  FooterColumn?: InputMaybe<FooterColumnUpdateManyWithNestedWhereInput>;
  Navigation?: InputMaybe<NavigationUpdateManyWithNestedWhereInput>;
  NavigationItem?: InputMaybe<NavigationItemUpdateManyWithNestedWhereInput>;
};

export type NavigationItemParentUpdateOneInlineInput = {
  /** Connect existing NavigationItemParent document */
  connect?: InputMaybe<NavigationItemParentWhereUniqueInput>;
  /** Create and connect one NavigationItemParent document */
  create?: InputMaybe<NavigationItemParentCreateInput>;
  /** Delete currently connected NavigationItemParent document */
  delete?: InputMaybe<Scalars['Boolean']>;
  /** Disconnect currently connected NavigationItemParent document */
  disconnect?: InputMaybe<Scalars['Boolean']>;
  /** Update single NavigationItemParent document */
  update?: InputMaybe<NavigationItemParentUpdateWithNestedWhereUniqueInput>;
  /** Upsert single NavigationItemParent document */
  upsert?: InputMaybe<NavigationItemParentUpsertWithNestedWhereUniqueInput>;
};

export type NavigationItemParentUpdateWithNestedWhereUniqueInput = {
  FooterColumn?: InputMaybe<FooterColumnUpdateWithNestedWhereUniqueInput>;
  Navigation?: InputMaybe<NavigationUpdateWithNestedWhereUniqueInput>;
  NavigationItem?: InputMaybe<NavigationItemUpdateWithNestedWhereUniqueInput>;
};

export type NavigationItemParentUpsertWithNestedWhereUniqueInput = {
  FooterColumn?: InputMaybe<FooterColumnUpsertWithNestedWhereUniqueInput>;
  Navigation?: InputMaybe<NavigationUpsertWithNestedWhereUniqueInput>;
  NavigationItem?: InputMaybe<NavigationItemUpsertWithNestedWhereUniqueInput>;
};

export type NavigationItemParentWhereInput = {
  FooterColumn?: InputMaybe<FooterColumnWhereInput>;
  Navigation?: InputMaybe<NavigationWhereInput>;
  NavigationItem?: InputMaybe<NavigationItemWhereInput>;
};

export type NavigationItemParentWhereUniqueInput = {
  FooterColumn?: InputMaybe<FooterColumnWhereUniqueInput>;
  Navigation?: InputMaybe<NavigationWhereUniqueInput>;
  NavigationItem?: InputMaybe<NavigationItemWhereUniqueInput>;
};

export type NavigationItemUpdateInput = {
  cssClass?: InputMaybe<Scalars['String']>;
  image?: InputMaybe<AssetUpdateOneInlineInput>;
  items?: InputMaybe<NavigationItemUpdateManyInlineInput>;
  label?: InputMaybe<Scalars['String']>;
  link?: InputMaybe<Scalars['String']>;
  primaryItem?: InputMaybe<Scalars['Boolean']>;
  sameTab?: InputMaybe<Scalars['Boolean']>;
};

export type NavigationItemUpdateManyInlineInput = {
  /** Create and connect multiple NavigationItem component instances */
  create?: InputMaybe<Array<NavigationItemCreateWithPositionInput>>;
  /** Delete multiple NavigationItem documents */
  delete?: InputMaybe<Array<NavigationItemWhereUniqueInput>>;
  /** Update multiple NavigationItem component instances */
  update?: InputMaybe<Array<NavigationItemUpdateWithNestedWhereUniqueAndPositionInput>>;
  /** Upsert multiple NavigationItem component instances */
  upsert?: InputMaybe<Array<NavigationItemUpsertWithNestedWhereUniqueAndPositionInput>>;
};

export type NavigationItemUpdateManyInput = {
  cssClass?: InputMaybe<Scalars['String']>;
  label?: InputMaybe<Scalars['String']>;
  link?: InputMaybe<Scalars['String']>;
  primaryItem?: InputMaybe<Scalars['Boolean']>;
  sameTab?: InputMaybe<Scalars['Boolean']>;
};

export type NavigationItemUpdateManyWithNestedWhereInput = {
  /** Update many input */
  data: NavigationItemUpdateManyInput;
  /** Document search */
  where: NavigationItemWhereInput;
};

export type NavigationItemUpdateOneInlineInput = {
  /** Create and connect one NavigationItem document */
  create?: InputMaybe<NavigationItemCreateInput>;
  /** Delete currently connected NavigationItem document */
  delete?: InputMaybe<Scalars['Boolean']>;
  /** Update single NavigationItem document */
  update?: InputMaybe<NavigationItemUpdateWithNestedWhereUniqueInput>;
  /** Upsert single NavigationItem document */
  upsert?: InputMaybe<NavigationItemUpsertWithNestedWhereUniqueInput>;
};

export type NavigationItemUpdateWithNestedWhereUniqueAndPositionInput = {
  /** Document to update */
  data?: InputMaybe<NavigationItemUpdateInput>;
  /** Position in the list of existing component instances, will default to appending at the end of list */
  position?: InputMaybe<ConnectPositionInput>;
  /** Unique component instance search */
  where: NavigationItemWhereUniqueInput;
};

export type NavigationItemUpdateWithNestedWhereUniqueInput = {
  /** Document to update */
  data: NavigationItemUpdateInput;
  /** Unique document search */
  where: NavigationItemWhereUniqueInput;
};

export type NavigationItemUpsertInput = {
  /** Create document if it didn't exist */
  create: NavigationItemCreateInput;
  /** Update document if it exists */
  update: NavigationItemUpdateInput;
};

export type NavigationItemUpsertWithNestedWhereUniqueAndPositionInput = {
  /** Document to upsert */
  data?: InputMaybe<NavigationItemUpsertInput>;
  /** Position in the list of existing component instances, will default to appending at the end of list */
  position?: InputMaybe<ConnectPositionInput>;
  /** Unique component instance search */
  where: NavigationItemWhereUniqueInput;
};

export type NavigationItemUpsertWithNestedWhereUniqueInput = {
  /** Upsert data */
  data: NavigationItemUpsertInput;
  /** Unique document search */
  where: NavigationItemWhereUniqueInput;
};

/** Identifies documents */
export type NavigationItemWhereInput = {
  /** Logical AND on all given filters. */
  AND?: InputMaybe<Array<NavigationItemWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: InputMaybe<Array<NavigationItemWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: InputMaybe<Array<NavigationItemWhereInput>>;
  /** Contains search across all appropriate fields. */
  _search?: InputMaybe<Scalars['String']>;
  cssClass?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  cssClass_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  cssClass_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  cssClass_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Any other value that exists and is not equal to the given value. */
  cssClass_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  cssClass_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  cssClass_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  cssClass_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  cssClass_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  cssClass_starts_with?: InputMaybe<Scalars['String']>;
  id?: InputMaybe<Scalars['ID']>;
  /** All values containing the given string. */
  id_contains?: InputMaybe<Scalars['ID']>;
  /** All values ending with the given string. */
  id_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are contained in given list. */
  id_in?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** Any other value that exists and is not equal to the given value. */
  id_not?: InputMaybe<Scalars['ID']>;
  /** All values not containing the given string. */
  id_not_contains?: InputMaybe<Scalars['ID']>;
  /** All values not ending with the given string */
  id_not_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are not contained in given list. */
  id_not_in?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** All values not starting with the given string. */
  id_not_starts_with?: InputMaybe<Scalars['ID']>;
  /** All values starting with the given string. */
  id_starts_with?: InputMaybe<Scalars['ID']>;
  image?: InputMaybe<AssetWhereInput>;
  items_every?: InputMaybe<NavigationItemWhereInput>;
  items_none?: InputMaybe<NavigationItemWhereInput>;
  items_some?: InputMaybe<NavigationItemWhereInput>;
  label?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  label_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  label_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  label_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Any other value that exists and is not equal to the given value. */
  label_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  label_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  label_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  label_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  label_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  label_starts_with?: InputMaybe<Scalars['String']>;
  link?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  link_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  link_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  link_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Any other value that exists and is not equal to the given value. */
  link_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  link_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  link_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  link_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  link_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  link_starts_with?: InputMaybe<Scalars['String']>;
  primaryItem?: InputMaybe<Scalars['Boolean']>;
  /** Any other value that exists and is not equal to the given value. */
  primaryItem_not?: InputMaybe<Scalars['Boolean']>;
  sameTab?: InputMaybe<Scalars['Boolean']>;
  /** Any other value that exists and is not equal to the given value. */
  sameTab_not?: InputMaybe<Scalars['Boolean']>;
};

/** References NavigationItem record uniquely */
export type NavigationItemWhereUniqueInput = {
  id?: InputMaybe<Scalars['ID']>;
};

export enum NavigationLayout {
  Between = 'between',
  Center = 'center',
  Circle = 'circle',
  Dashboard = 'dashboard',
  Dual = 'dual',
  Mega = 'mega',
  Minimal = 'minimal',
  Progress = 'progress',
  Reverse = 'reverse',
  Space = 'space',
  Start = 'start',
  Transparent = 'transparent',
  Universal = 'universal',
  Vertical = 'vertical'
}

/** Identifies documents */
export type NavigationManyWhereInput = {
  /** Logical AND on all given filters. */
  AND?: InputMaybe<Array<NavigationWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: InputMaybe<Array<NavigationWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: InputMaybe<Array<NavigationWhereInput>>;
  /** Contains search across all appropriate fields. */
  _search?: InputMaybe<Scalars['String']>;
  createdAt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  createdAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  createdAt_gte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  createdAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  /** All values less than the given value. */
  createdAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  createdAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** Any other value that exists and is not equal to the given value. */
  createdAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not contained in given list. */
  createdAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  createdBy?: InputMaybe<UserWhereInput>;
  documentInStages_every?: InputMaybe<NavigationWhereStageInput>;
  documentInStages_none?: InputMaybe<NavigationWhereStageInput>;
  documentInStages_some?: InputMaybe<NavigationWhereStageInput>;
  footerColumns_every?: InputMaybe<FooterColumnWhereInput>;
  footerColumns_none?: InputMaybe<FooterColumnWhereInput>;
  footerColumns_some?: InputMaybe<FooterColumnWhereInput>;
  footerItems_every?: InputMaybe<NavigationItemWhereInput>;
  footerItems_none?: InputMaybe<NavigationItemWhereInput>;
  footerItems_some?: InputMaybe<NavigationItemWhereInput>;
  footerWrapperCssClass?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  footerWrapperCssClass_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  footerWrapperCssClass_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  footerWrapperCssClass_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Any other value that exists and is not equal to the given value. */
  footerWrapperCssClass_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  footerWrapperCssClass_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  footerWrapperCssClass_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  footerWrapperCssClass_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  footerWrapperCssClass_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  footerWrapperCssClass_starts_with?: InputMaybe<Scalars['String']>;
  id?: InputMaybe<Scalars['ID']>;
  /** All values containing the given string. */
  id_contains?: InputMaybe<Scalars['ID']>;
  /** All values ending with the given string. */
  id_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are contained in given list. */
  id_in?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** Any other value that exists and is not equal to the given value. */
  id_not?: InputMaybe<Scalars['ID']>;
  /** All values not containing the given string. */
  id_not_contains?: InputMaybe<Scalars['ID']>;
  /** All values not ending with the given string */
  id_not_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are not contained in given list. */
  id_not_in?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** All values not starting with the given string. */
  id_not_starts_with?: InputMaybe<Scalars['ID']>;
  /** All values starting with the given string. */
  id_starts_with?: InputMaybe<Scalars['ID']>;
  items_every?: InputMaybe<NavigationItemWhereInput>;
  items_none?: InputMaybe<NavigationItemWhereInput>;
  items_some?: InputMaybe<NavigationItemWhereInput>;
  navigationLayoutStyle?: InputMaybe<NavigationLayout>;
  /** All values that are contained in given list. */
  navigationLayoutStyle_in?: InputMaybe<Array<InputMaybe<NavigationLayout>>>;
  /** Any other value that exists and is not equal to the given value. */
  navigationLayoutStyle_not?: InputMaybe<NavigationLayout>;
  /** All values that are not contained in given list. */
  navigationLayoutStyle_not_in?: InputMaybe<Array<InputMaybe<NavigationLayout>>>;
  navigationLogo?: InputMaybe<AssetWhereInput>;
  navigationWrapperCssClass?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  navigationWrapperCssClass_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  navigationWrapperCssClass_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  navigationWrapperCssClass_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Any other value that exists and is not equal to the given value. */
  navigationWrapperCssClass_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  navigationWrapperCssClass_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  navigationWrapperCssClass_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  navigationWrapperCssClass_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  navigationWrapperCssClass_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  navigationWrapperCssClass_starts_with?: InputMaybe<Scalars['String']>;
  pageNavigationSelection?: InputMaybe<PageNavigationSelection>;
  /** All values that are contained in given list. */
  pageNavigationSelection_in?: InputMaybe<Array<InputMaybe<PageNavigationSelection>>>;
  /** Any other value that exists and is not equal to the given value. */
  pageNavigationSelection_not?: InputMaybe<PageNavigationSelection>;
  /** All values that are not contained in given list. */
  pageNavigationSelection_not_in?: InputMaybe<Array<InputMaybe<PageNavigationSelection>>>;
  publishedAt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  publishedAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  publishedAt_gte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  publishedAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  /** All values less than the given value. */
  publishedAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  publishedAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** Any other value that exists and is not equal to the given value. */
  publishedAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not contained in given list. */
  publishedAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  publishedBy?: InputMaybe<UserWhereInput>;
  scheduledIn_every?: InputMaybe<ScheduledOperationWhereInput>;
  scheduledIn_none?: InputMaybe<ScheduledOperationWhereInput>;
  scheduledIn_some?: InputMaybe<ScheduledOperationWhereInput>;
  updatedAt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  updatedAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  updatedAt_gte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  updatedAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  /** All values less than the given value. */
  updatedAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  updatedAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** Any other value that exists and is not equal to the given value. */
  updatedAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not contained in given list. */
  updatedAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  updatedBy?: InputMaybe<UserWhereInput>;
};

export enum NavigationOrderByInput {
  CreatedAtAsc = 'createdAt_ASC',
  CreatedAtDesc = 'createdAt_DESC',
  FooterWrapperCssClassAsc = 'footerWrapperCssClass_ASC',
  FooterWrapperCssClassDesc = 'footerWrapperCssClass_DESC',
  IdAsc = 'id_ASC',
  IdDesc = 'id_DESC',
  NavigationLayoutStyleAsc = 'navigationLayoutStyle_ASC',
  NavigationLayoutStyleDesc = 'navigationLayoutStyle_DESC',
  NavigationWrapperCssClassAsc = 'navigationWrapperCssClass_ASC',
  NavigationWrapperCssClassDesc = 'navigationWrapperCssClass_DESC',
  PageNavigationSelectionAsc = 'pageNavigationSelection_ASC',
  PageNavigationSelectionDesc = 'pageNavigationSelection_DESC',
  PublishedAtAsc = 'publishedAt_ASC',
  PublishedAtDesc = 'publishedAt_DESC',
  UpdatedAtAsc = 'updatedAt_ASC',
  UpdatedAtDesc = 'updatedAt_DESC'
}

export type NavigationUpdateInput = {
  footerColumns?: InputMaybe<FooterColumnUpdateManyInlineInput>;
  footerItems?: InputMaybe<NavigationItemUpdateManyInlineInput>;
  footerWrapperCssClass?: InputMaybe<Scalars['String']>;
  items?: InputMaybe<NavigationItemUpdateManyInlineInput>;
  navigationLayoutStyle?: InputMaybe<NavigationLayout>;
  navigationLogo?: InputMaybe<AssetUpdateOneInlineInput>;
  navigationWrapperCssClass?: InputMaybe<Scalars['String']>;
  pageNavigationSelection?: InputMaybe<PageNavigationSelection>;
};

export type NavigationUpdateManyInlineInput = {
  /** Connect multiple existing Navigation documents */
  connect?: InputMaybe<Array<NavigationConnectInput>>;
  /** Create and connect multiple Navigation documents */
  create?: InputMaybe<Array<NavigationCreateInput>>;
  /** Delete multiple Navigation documents */
  delete?: InputMaybe<Array<NavigationWhereUniqueInput>>;
  /** Disconnect multiple Navigation documents */
  disconnect?: InputMaybe<Array<NavigationWhereUniqueInput>>;
  /** Override currently-connected documents with multiple existing Navigation documents */
  set?: InputMaybe<Array<NavigationWhereUniqueInput>>;
  /** Update multiple Navigation documents */
  update?: InputMaybe<Array<NavigationUpdateWithNestedWhereUniqueInput>>;
  /** Upsert multiple Navigation documents */
  upsert?: InputMaybe<Array<NavigationUpsertWithNestedWhereUniqueInput>>;
};

export type NavigationUpdateManyInput = {
  footerWrapperCssClass?: InputMaybe<Scalars['String']>;
  navigationLayoutStyle?: InputMaybe<NavigationLayout>;
  navigationWrapperCssClass?: InputMaybe<Scalars['String']>;
};

export type NavigationUpdateManyWithNestedWhereInput = {
  /** Update many input */
  data: NavigationUpdateManyInput;
  /** Document search */
  where: NavigationWhereInput;
};

export type NavigationUpdateOneInlineInput = {
  /** Connect existing Navigation document */
  connect?: InputMaybe<NavigationWhereUniqueInput>;
  /** Create and connect one Navigation document */
  create?: InputMaybe<NavigationCreateInput>;
  /** Delete currently connected Navigation document */
  delete?: InputMaybe<Scalars['Boolean']>;
  /** Disconnect currently connected Navigation document */
  disconnect?: InputMaybe<Scalars['Boolean']>;
  /** Update single Navigation document */
  update?: InputMaybe<NavigationUpdateWithNestedWhereUniqueInput>;
  /** Upsert single Navigation document */
  upsert?: InputMaybe<NavigationUpsertWithNestedWhereUniqueInput>;
};

export type NavigationUpdateWithNestedWhereUniqueInput = {
  /** Document to update */
  data: NavigationUpdateInput;
  /** Unique document search */
  where: NavigationWhereUniqueInput;
};

export type NavigationUpsertInput = {
  /** Create document if it didn't exist */
  create: NavigationCreateInput;
  /** Update document if it exists */
  update: NavigationUpdateInput;
};

export type NavigationUpsertWithNestedWhereUniqueInput = {
  /** Upsert data */
  data: NavigationUpsertInput;
  /** Unique document search */
  where: NavigationWhereUniqueInput;
};

/** This contains a set of filters that can be used to compare values internally */
export type NavigationWhereComparatorInput = {
  /** This field can be used to request to check if the entry is outdated by internal comparison */
  outdated_to?: InputMaybe<Scalars['Boolean']>;
};

/** Identifies documents */
export type NavigationWhereInput = {
  /** Logical AND on all given filters. */
  AND?: InputMaybe<Array<NavigationWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: InputMaybe<Array<NavigationWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: InputMaybe<Array<NavigationWhereInput>>;
  /** Contains search across all appropriate fields. */
  _search?: InputMaybe<Scalars['String']>;
  createdAt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  createdAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  createdAt_gte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  createdAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  /** All values less than the given value. */
  createdAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  createdAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** Any other value that exists and is not equal to the given value. */
  createdAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not contained in given list. */
  createdAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  createdBy?: InputMaybe<UserWhereInput>;
  documentInStages_every?: InputMaybe<NavigationWhereStageInput>;
  documentInStages_none?: InputMaybe<NavigationWhereStageInput>;
  documentInStages_some?: InputMaybe<NavigationWhereStageInput>;
  footerColumns_every?: InputMaybe<FooterColumnWhereInput>;
  footerColumns_none?: InputMaybe<FooterColumnWhereInput>;
  footerColumns_some?: InputMaybe<FooterColumnWhereInput>;
  footerItems_every?: InputMaybe<NavigationItemWhereInput>;
  footerItems_none?: InputMaybe<NavigationItemWhereInput>;
  footerItems_some?: InputMaybe<NavigationItemWhereInput>;
  footerWrapperCssClass?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  footerWrapperCssClass_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  footerWrapperCssClass_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  footerWrapperCssClass_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Any other value that exists and is not equal to the given value. */
  footerWrapperCssClass_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  footerWrapperCssClass_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  footerWrapperCssClass_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  footerWrapperCssClass_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  footerWrapperCssClass_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  footerWrapperCssClass_starts_with?: InputMaybe<Scalars['String']>;
  id?: InputMaybe<Scalars['ID']>;
  /** All values containing the given string. */
  id_contains?: InputMaybe<Scalars['ID']>;
  /** All values ending with the given string. */
  id_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are contained in given list. */
  id_in?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** Any other value that exists and is not equal to the given value. */
  id_not?: InputMaybe<Scalars['ID']>;
  /** All values not containing the given string. */
  id_not_contains?: InputMaybe<Scalars['ID']>;
  /** All values not ending with the given string */
  id_not_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are not contained in given list. */
  id_not_in?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** All values not starting with the given string. */
  id_not_starts_with?: InputMaybe<Scalars['ID']>;
  /** All values starting with the given string. */
  id_starts_with?: InputMaybe<Scalars['ID']>;
  items_every?: InputMaybe<NavigationItemWhereInput>;
  items_none?: InputMaybe<NavigationItemWhereInput>;
  items_some?: InputMaybe<NavigationItemWhereInput>;
  navigationLayoutStyle?: InputMaybe<NavigationLayout>;
  /** All values that are contained in given list. */
  navigationLayoutStyle_in?: InputMaybe<Array<InputMaybe<NavigationLayout>>>;
  /** Any other value that exists and is not equal to the given value. */
  navigationLayoutStyle_not?: InputMaybe<NavigationLayout>;
  /** All values that are not contained in given list. */
  navigationLayoutStyle_not_in?: InputMaybe<Array<InputMaybe<NavigationLayout>>>;
  navigationLogo?: InputMaybe<AssetWhereInput>;
  navigationWrapperCssClass?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  navigationWrapperCssClass_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  navigationWrapperCssClass_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  navigationWrapperCssClass_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Any other value that exists and is not equal to the given value. */
  navigationWrapperCssClass_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  navigationWrapperCssClass_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  navigationWrapperCssClass_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  navigationWrapperCssClass_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  navigationWrapperCssClass_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  navigationWrapperCssClass_starts_with?: InputMaybe<Scalars['String']>;
  pageNavigationSelection?: InputMaybe<PageNavigationSelection>;
  /** All values that are contained in given list. */
  pageNavigationSelection_in?: InputMaybe<Array<InputMaybe<PageNavigationSelection>>>;
  /** Any other value that exists and is not equal to the given value. */
  pageNavigationSelection_not?: InputMaybe<PageNavigationSelection>;
  /** All values that are not contained in given list. */
  pageNavigationSelection_not_in?: InputMaybe<Array<InputMaybe<PageNavigationSelection>>>;
  publishedAt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  publishedAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  publishedAt_gte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  publishedAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  /** All values less than the given value. */
  publishedAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  publishedAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** Any other value that exists and is not equal to the given value. */
  publishedAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not contained in given list. */
  publishedAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  publishedBy?: InputMaybe<UserWhereInput>;
  scheduledIn_every?: InputMaybe<ScheduledOperationWhereInput>;
  scheduledIn_none?: InputMaybe<ScheduledOperationWhereInput>;
  scheduledIn_some?: InputMaybe<ScheduledOperationWhereInput>;
  updatedAt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  updatedAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  updatedAt_gte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  updatedAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  /** All values less than the given value. */
  updatedAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  updatedAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** Any other value that exists and is not equal to the given value. */
  updatedAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not contained in given list. */
  updatedAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  updatedBy?: InputMaybe<UserWhereInput>;
};

/** The document in stages filter allows specifying a stage entry to cross compare the same document between different stages */
export type NavigationWhereStageInput = {
  /** Logical AND on all given filters. */
  AND?: InputMaybe<Array<NavigationWhereStageInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: InputMaybe<Array<NavigationWhereStageInput>>;
  /** Logical OR on all given filters. */
  OR?: InputMaybe<Array<NavigationWhereStageInput>>;
  /** This field contains fields which can be set as true or false to specify an internal comparison */
  compareWithParent?: InputMaybe<NavigationWhereComparatorInput>;
  /** Specify the stage to compare with */
  stage?: InputMaybe<Stage>;
};

/** References Navigation record uniquely */
export type NavigationWhereUniqueInput = {
  id?: InputMaybe<Scalars['ID']>;
  pageNavigationSelection?: InputMaybe<PageNavigationSelection>;
};

export enum NetlifyFormFields {
  Email = 'email',
  Message = 'message',
  Name = 'name',
  Phone = 'phone'
}

/** An object with an ID */
export type Node = {
  /** The id of the object. */
  id: Scalars['ID'];
  /** The Stage of an object */
  stage: Stage;
};

export type Page = Entity & Node & {
  __typename?: 'Page';
  contentPageJson?: Maybe<Scalars['Json']>;
  /** The time the document was created */
  createdAt: Scalars['DateTime'];
  /** User that created this document */
  createdBy?: Maybe<User>;
  /** Get the document in other stages */
  documentInStages: Array<Page>;
  heroImage?: Maybe<Asset>;
  hideFooter?: Maybe<Scalars['Boolean']>;
  hideHeader?: Maybe<Scalars['Boolean']>;
  hideNav?: Maybe<Scalars['Boolean']>;
  /** List of Page versions */
  history: Array<Version>;
  /** The unique identifier */
  id: Scalars['ID'];
  layoutBlocks: Array<LayoutBlock>;
  noIndex?: Maybe<Scalars['Boolean']>;
  pageNavigationSelection?: Maybe<PageNavigationSelection>;
  pageSlug?: Maybe<Scalars['String']>;
  pageWidthStyle?: Maybe<PageWidthStyle>;
  parentPage?: Maybe<ParentPage>;
  popup?: Maybe<Popup>;
  /** The time the document was published. Null on documents in draft stage. */
  publishedAt?: Maybe<Scalars['DateTime']>;
  /** User that last published this document */
  publishedBy?: Maybe<User>;
  scheduledIn: Array<ScheduledOperation>;
  setHomePage?: Maybe<Scalars['Boolean']>;
  /** System stage field */
  stage: Stage;
  subtitle?: Maybe<Scalars['String']>;
  title?: Maybe<Scalars['String']>;
  /** The time the document was updated */
  updatedAt: Scalars['DateTime'];
  /** User that last updated this document */
  updatedBy?: Maybe<User>;
  whatsAppContactNumberFloatingButton?: Maybe<Scalars['String']>;
};


export type PageCreatedByArgs = {
  forceParentLocale?: InputMaybe<Scalars['Boolean']>;
  locales?: InputMaybe<Array<Locale>>;
};


export type PageDocumentInStagesArgs = {
  includeCurrent?: Scalars['Boolean'];
  inheritLocale?: Scalars['Boolean'];
  stages?: Array<Stage>;
};


export type PageHeroImageArgs = {
  forceParentLocale?: InputMaybe<Scalars['Boolean']>;
  locales?: InputMaybe<Array<Locale>>;
};


export type PageHistoryArgs = {
  limit?: Scalars['Int'];
  skip?: Scalars['Int'];
  stageOverride?: InputMaybe<Stage>;
};


export type PageLayoutBlocksArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  forceParentLocale?: InputMaybe<Scalars['Boolean']>;
  last?: InputMaybe<Scalars['Int']>;
  locales?: InputMaybe<Array<Locale>>;
  orderBy?: InputMaybe<LayoutBlockOrderByInput>;
  skip?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<LayoutBlockWhereInput>;
};


export type PagePopupArgs = {
  forceParentLocale?: InputMaybe<Scalars['Boolean']>;
  locales?: InputMaybe<Array<Locale>>;
};


export type PagePublishedByArgs = {
  forceParentLocale?: InputMaybe<Scalars['Boolean']>;
  locales?: InputMaybe<Array<Locale>>;
};


export type PageScheduledInArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  forceParentLocale?: InputMaybe<Scalars['Boolean']>;
  last?: InputMaybe<Scalars['Int']>;
  locales?: InputMaybe<Array<Locale>>;
  skip?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<ScheduledOperationWhereInput>;
};


export type PageUpdatedByArgs = {
  forceParentLocale?: InputMaybe<Scalars['Boolean']>;
  locales?: InputMaybe<Array<Locale>>;
};

export type PageConnectInput = {
  /** Allow to specify document position in list of connected documents, will default to appending at end of list */
  position?: InputMaybe<ConnectPositionInput>;
  /** Document to connect */
  where: PageWhereUniqueInput;
};

/** A connection to a list of items. */
export type PageConnection = {
  __typename?: 'PageConnection';
  aggregate: Aggregate;
  /** A list of edges. */
  edges: Array<PageEdge>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
};

export type PageCreateInput = {
  contentPageJson?: InputMaybe<Scalars['Json']>;
  createdAt?: InputMaybe<Scalars['DateTime']>;
  heroImage?: InputMaybe<AssetCreateOneInlineInput>;
  hideFooter?: InputMaybe<Scalars['Boolean']>;
  hideHeader?: InputMaybe<Scalars['Boolean']>;
  hideNav?: InputMaybe<Scalars['Boolean']>;
  layoutBlocks?: InputMaybe<LayoutBlockCreateManyInlineInput>;
  noIndex?: InputMaybe<Scalars['Boolean']>;
  pageNavigationSelection?: InputMaybe<PageNavigationSelection>;
  pageSlug?: InputMaybe<Scalars['String']>;
  pageWidthStyle?: InputMaybe<PageWidthStyle>;
  parentPage?: InputMaybe<ParentPage>;
  popup?: InputMaybe<PopupCreateOneInlineInput>;
  setHomePage?: InputMaybe<Scalars['Boolean']>;
  subtitle?: InputMaybe<Scalars['String']>;
  title?: InputMaybe<Scalars['String']>;
  updatedAt?: InputMaybe<Scalars['DateTime']>;
  whatsAppContactNumberFloatingButton?: InputMaybe<Scalars['String']>;
};

export type PageCreateManyInlineInput = {
  /** Connect multiple existing Page documents */
  connect?: InputMaybe<Array<PageWhereUniqueInput>>;
  /** Create and connect multiple existing Page documents */
  create?: InputMaybe<Array<PageCreateInput>>;
};

export type PageCreateOneInlineInput = {
  /** Connect one existing Page document */
  connect?: InputMaybe<PageWhereUniqueInput>;
  /** Create and connect one Page document */
  create?: InputMaybe<PageCreateInput>;
};

/** An edge in a connection. */
export type PageEdge = {
  __typename?: 'PageEdge';
  /** A cursor for use in pagination. */
  cursor: Scalars['String'];
  /** The item at the end of the edge. */
  node: Page;
};

/** Information about pagination in a connection. */
export type PageInfo = {
  __typename?: 'PageInfo';
  /** When paginating forwards, the cursor to continue. */
  endCursor?: Maybe<Scalars['String']>;
  /** When paginating forwards, are there more items? */
  hasNextPage: Scalars['Boolean'];
  /** When paginating backwards, are there more items? */
  hasPreviousPage: Scalars['Boolean'];
  /** Number of items in the current page. */
  pageSize?: Maybe<Scalars['Int']>;
  /** When paginating backwards, the cursor to continue. */
  startCursor?: Maybe<Scalars['String']>;
};

/** Identifies documents */
export type PageManyWhereInput = {
  /** Logical AND on all given filters. */
  AND?: InputMaybe<Array<PageWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: InputMaybe<Array<PageWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: InputMaybe<Array<PageWhereInput>>;
  /** Contains search across all appropriate fields. */
  _search?: InputMaybe<Scalars['String']>;
  /** All values containing the given json path. */
  contentPageJson_json_path_exists?: InputMaybe<Scalars['String']>;
  /**
   * Recursively tries to find the provided JSON scalar value inside the field.
   * It does use an exact match when comparing values.
   * If you pass `null` as value the filter will be ignored.
   * Note: This filter fails if you try to look for a non scalar JSON value!
   */
  contentPageJson_value_recursive?: InputMaybe<Scalars['Json']>;
  createdAt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  createdAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  createdAt_gte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  createdAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  /** All values less than the given value. */
  createdAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  createdAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** Any other value that exists and is not equal to the given value. */
  createdAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not contained in given list. */
  createdAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  createdBy?: InputMaybe<UserWhereInput>;
  documentInStages_every?: InputMaybe<PageWhereStageInput>;
  documentInStages_none?: InputMaybe<PageWhereStageInput>;
  documentInStages_some?: InputMaybe<PageWhereStageInput>;
  heroImage?: InputMaybe<AssetWhereInput>;
  hideFooter?: InputMaybe<Scalars['Boolean']>;
  /** Any other value that exists and is not equal to the given value. */
  hideFooter_not?: InputMaybe<Scalars['Boolean']>;
  hideHeader?: InputMaybe<Scalars['Boolean']>;
  /** Any other value that exists and is not equal to the given value. */
  hideHeader_not?: InputMaybe<Scalars['Boolean']>;
  hideNav?: InputMaybe<Scalars['Boolean']>;
  /** Any other value that exists and is not equal to the given value. */
  hideNav_not?: InputMaybe<Scalars['Boolean']>;
  id?: InputMaybe<Scalars['ID']>;
  /** All values containing the given string. */
  id_contains?: InputMaybe<Scalars['ID']>;
  /** All values ending with the given string. */
  id_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are contained in given list. */
  id_in?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** Any other value that exists and is not equal to the given value. */
  id_not?: InputMaybe<Scalars['ID']>;
  /** All values not containing the given string. */
  id_not_contains?: InputMaybe<Scalars['ID']>;
  /** All values not ending with the given string */
  id_not_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are not contained in given list. */
  id_not_in?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** All values not starting with the given string. */
  id_not_starts_with?: InputMaybe<Scalars['ID']>;
  /** All values starting with the given string. */
  id_starts_with?: InputMaybe<Scalars['ID']>;
  layoutBlocks_every?: InputMaybe<LayoutBlockWhereInput>;
  layoutBlocks_none?: InputMaybe<LayoutBlockWhereInput>;
  layoutBlocks_some?: InputMaybe<LayoutBlockWhereInput>;
  noIndex?: InputMaybe<Scalars['Boolean']>;
  /** Any other value that exists and is not equal to the given value. */
  noIndex_not?: InputMaybe<Scalars['Boolean']>;
  pageNavigationSelection?: InputMaybe<PageNavigationSelection>;
  /** All values that are contained in given list. */
  pageNavigationSelection_in?: InputMaybe<Array<InputMaybe<PageNavigationSelection>>>;
  /** Any other value that exists and is not equal to the given value. */
  pageNavigationSelection_not?: InputMaybe<PageNavigationSelection>;
  /** All values that are not contained in given list. */
  pageNavigationSelection_not_in?: InputMaybe<Array<InputMaybe<PageNavigationSelection>>>;
  pageSlug?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  pageSlug_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  pageSlug_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  pageSlug_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Any other value that exists and is not equal to the given value. */
  pageSlug_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  pageSlug_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  pageSlug_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  pageSlug_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  pageSlug_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  pageSlug_starts_with?: InputMaybe<Scalars['String']>;
  pageWidthStyle?: InputMaybe<PageWidthStyle>;
  /** All values that are contained in given list. */
  pageWidthStyle_in?: InputMaybe<Array<InputMaybe<PageWidthStyle>>>;
  /** Any other value that exists and is not equal to the given value. */
  pageWidthStyle_not?: InputMaybe<PageWidthStyle>;
  /** All values that are not contained in given list. */
  pageWidthStyle_not_in?: InputMaybe<Array<InputMaybe<PageWidthStyle>>>;
  parentPage?: InputMaybe<ParentPage>;
  /** All values that are contained in given list. */
  parentPage_in?: InputMaybe<Array<InputMaybe<ParentPage>>>;
  /** Any other value that exists and is not equal to the given value. */
  parentPage_not?: InputMaybe<ParentPage>;
  /** All values that are not contained in given list. */
  parentPage_not_in?: InputMaybe<Array<InputMaybe<ParentPage>>>;
  popup?: InputMaybe<PopupWhereInput>;
  publishedAt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  publishedAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  publishedAt_gte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  publishedAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  /** All values less than the given value. */
  publishedAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  publishedAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** Any other value that exists and is not equal to the given value. */
  publishedAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not contained in given list. */
  publishedAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  publishedBy?: InputMaybe<UserWhereInput>;
  scheduledIn_every?: InputMaybe<ScheduledOperationWhereInput>;
  scheduledIn_none?: InputMaybe<ScheduledOperationWhereInput>;
  scheduledIn_some?: InputMaybe<ScheduledOperationWhereInput>;
  setHomePage?: InputMaybe<Scalars['Boolean']>;
  /** Any other value that exists and is not equal to the given value. */
  setHomePage_not?: InputMaybe<Scalars['Boolean']>;
  subtitle?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  subtitle_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  subtitle_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  subtitle_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Any other value that exists and is not equal to the given value. */
  subtitle_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  subtitle_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  subtitle_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  subtitle_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  subtitle_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  subtitle_starts_with?: InputMaybe<Scalars['String']>;
  title?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  title_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  title_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  title_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Any other value that exists and is not equal to the given value. */
  title_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  title_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  title_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  title_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  title_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  title_starts_with?: InputMaybe<Scalars['String']>;
  updatedAt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  updatedAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  updatedAt_gte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  updatedAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  /** All values less than the given value. */
  updatedAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  updatedAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** Any other value that exists and is not equal to the given value. */
  updatedAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not contained in given list. */
  updatedAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  updatedBy?: InputMaybe<UserWhereInput>;
  whatsAppContactNumberFloatingButton?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  whatsAppContactNumberFloatingButton_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  whatsAppContactNumberFloatingButton_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  whatsAppContactNumberFloatingButton_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Any other value that exists and is not equal to the given value. */
  whatsAppContactNumberFloatingButton_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  whatsAppContactNumberFloatingButton_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  whatsAppContactNumberFloatingButton_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  whatsAppContactNumberFloatingButton_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  whatsAppContactNumberFloatingButton_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  whatsAppContactNumberFloatingButton_starts_with?: InputMaybe<Scalars['String']>;
};

export enum PageNavigationSelection {
  Primary = 'primary',
  Secondary = 'secondary'
}

export enum PageOrderByInput {
  CreatedAtAsc = 'createdAt_ASC',
  CreatedAtDesc = 'createdAt_DESC',
  HideFooterAsc = 'hideFooter_ASC',
  HideFooterDesc = 'hideFooter_DESC',
  HideHeaderAsc = 'hideHeader_ASC',
  HideHeaderDesc = 'hideHeader_DESC',
  HideNavAsc = 'hideNav_ASC',
  HideNavDesc = 'hideNav_DESC',
  IdAsc = 'id_ASC',
  IdDesc = 'id_DESC',
  NoIndexAsc = 'noIndex_ASC',
  NoIndexDesc = 'noIndex_DESC',
  PageNavigationSelectionAsc = 'pageNavigationSelection_ASC',
  PageNavigationSelectionDesc = 'pageNavigationSelection_DESC',
  PageSlugAsc = 'pageSlug_ASC',
  PageSlugDesc = 'pageSlug_DESC',
  PageWidthStyleAsc = 'pageWidthStyle_ASC',
  PageWidthStyleDesc = 'pageWidthStyle_DESC',
  ParentPageAsc = 'parentPage_ASC',
  ParentPageDesc = 'parentPage_DESC',
  PublishedAtAsc = 'publishedAt_ASC',
  PublishedAtDesc = 'publishedAt_DESC',
  SetHomePageAsc = 'setHomePage_ASC',
  SetHomePageDesc = 'setHomePage_DESC',
  SubtitleAsc = 'subtitle_ASC',
  SubtitleDesc = 'subtitle_DESC',
  TitleAsc = 'title_ASC',
  TitleDesc = 'title_DESC',
  UpdatedAtAsc = 'updatedAt_ASC',
  UpdatedAtDesc = 'updatedAt_DESC',
  WhatsAppContactNumberFloatingButtonAsc = 'whatsAppContactNumberFloatingButton_ASC',
  WhatsAppContactNumberFloatingButtonDesc = 'whatsAppContactNumberFloatingButton_DESC'
}

export type PageUpdateInput = {
  contentPageJson?: InputMaybe<Scalars['Json']>;
  heroImage?: InputMaybe<AssetUpdateOneInlineInput>;
  hideFooter?: InputMaybe<Scalars['Boolean']>;
  hideHeader?: InputMaybe<Scalars['Boolean']>;
  hideNav?: InputMaybe<Scalars['Boolean']>;
  layoutBlocks?: InputMaybe<LayoutBlockUpdateManyInlineInput>;
  noIndex?: InputMaybe<Scalars['Boolean']>;
  pageNavigationSelection?: InputMaybe<PageNavigationSelection>;
  pageSlug?: InputMaybe<Scalars['String']>;
  pageWidthStyle?: InputMaybe<PageWidthStyle>;
  parentPage?: InputMaybe<ParentPage>;
  popup?: InputMaybe<PopupUpdateOneInlineInput>;
  setHomePage?: InputMaybe<Scalars['Boolean']>;
  subtitle?: InputMaybe<Scalars['String']>;
  title?: InputMaybe<Scalars['String']>;
  whatsAppContactNumberFloatingButton?: InputMaybe<Scalars['String']>;
};

export type PageUpdateManyInlineInput = {
  /** Connect multiple existing Page documents */
  connect?: InputMaybe<Array<PageConnectInput>>;
  /** Create and connect multiple Page documents */
  create?: InputMaybe<Array<PageCreateInput>>;
  /** Delete multiple Page documents */
  delete?: InputMaybe<Array<PageWhereUniqueInput>>;
  /** Disconnect multiple Page documents */
  disconnect?: InputMaybe<Array<PageWhereUniqueInput>>;
  /** Override currently-connected documents with multiple existing Page documents */
  set?: InputMaybe<Array<PageWhereUniqueInput>>;
  /** Update multiple Page documents */
  update?: InputMaybe<Array<PageUpdateWithNestedWhereUniqueInput>>;
  /** Upsert multiple Page documents */
  upsert?: InputMaybe<Array<PageUpsertWithNestedWhereUniqueInput>>;
};

export type PageUpdateManyInput = {
  contentPageJson?: InputMaybe<Scalars['Json']>;
  hideFooter?: InputMaybe<Scalars['Boolean']>;
  hideHeader?: InputMaybe<Scalars['Boolean']>;
  hideNav?: InputMaybe<Scalars['Boolean']>;
  noIndex?: InputMaybe<Scalars['Boolean']>;
  pageNavigationSelection?: InputMaybe<PageNavigationSelection>;
  pageWidthStyle?: InputMaybe<PageWidthStyle>;
  parentPage?: InputMaybe<ParentPage>;
  subtitle?: InputMaybe<Scalars['String']>;
  title?: InputMaybe<Scalars['String']>;
  whatsAppContactNumberFloatingButton?: InputMaybe<Scalars['String']>;
};

export type PageUpdateManyWithNestedWhereInput = {
  /** Update many input */
  data: PageUpdateManyInput;
  /** Document search */
  where: PageWhereInput;
};

export type PageUpdateOneInlineInput = {
  /** Connect existing Page document */
  connect?: InputMaybe<PageWhereUniqueInput>;
  /** Create and connect one Page document */
  create?: InputMaybe<PageCreateInput>;
  /** Delete currently connected Page document */
  delete?: InputMaybe<Scalars['Boolean']>;
  /** Disconnect currently connected Page document */
  disconnect?: InputMaybe<Scalars['Boolean']>;
  /** Update single Page document */
  update?: InputMaybe<PageUpdateWithNestedWhereUniqueInput>;
  /** Upsert single Page document */
  upsert?: InputMaybe<PageUpsertWithNestedWhereUniqueInput>;
};

export type PageUpdateWithNestedWhereUniqueInput = {
  /** Document to update */
  data: PageUpdateInput;
  /** Unique document search */
  where: PageWhereUniqueInput;
};

export type PageUpsertInput = {
  /** Create document if it didn't exist */
  create: PageCreateInput;
  /** Update document if it exists */
  update: PageUpdateInput;
};

export type PageUpsertWithNestedWhereUniqueInput = {
  /** Upsert data */
  data: PageUpsertInput;
  /** Unique document search */
  where: PageWhereUniqueInput;
};

/** This contains a set of filters that can be used to compare values internally */
export type PageWhereComparatorInput = {
  /** This field can be used to request to check if the entry is outdated by internal comparison */
  outdated_to?: InputMaybe<Scalars['Boolean']>;
};

/** Identifies documents */
export type PageWhereInput = {
  /** Logical AND on all given filters. */
  AND?: InputMaybe<Array<PageWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: InputMaybe<Array<PageWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: InputMaybe<Array<PageWhereInput>>;
  /** Contains search across all appropriate fields. */
  _search?: InputMaybe<Scalars['String']>;
  /** All values containing the given json path. */
  contentPageJson_json_path_exists?: InputMaybe<Scalars['String']>;
  /**
   * Recursively tries to find the provided JSON scalar value inside the field.
   * It does use an exact match when comparing values.
   * If you pass `null` as value the filter will be ignored.
   * Note: This filter fails if you try to look for a non scalar JSON value!
   */
  contentPageJson_value_recursive?: InputMaybe<Scalars['Json']>;
  createdAt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  createdAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  createdAt_gte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  createdAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  /** All values less than the given value. */
  createdAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  createdAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** Any other value that exists and is not equal to the given value. */
  createdAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not contained in given list. */
  createdAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  createdBy?: InputMaybe<UserWhereInput>;
  documentInStages_every?: InputMaybe<PageWhereStageInput>;
  documentInStages_none?: InputMaybe<PageWhereStageInput>;
  documentInStages_some?: InputMaybe<PageWhereStageInput>;
  heroImage?: InputMaybe<AssetWhereInput>;
  hideFooter?: InputMaybe<Scalars['Boolean']>;
  /** Any other value that exists and is not equal to the given value. */
  hideFooter_not?: InputMaybe<Scalars['Boolean']>;
  hideHeader?: InputMaybe<Scalars['Boolean']>;
  /** Any other value that exists and is not equal to the given value. */
  hideHeader_not?: InputMaybe<Scalars['Boolean']>;
  hideNav?: InputMaybe<Scalars['Boolean']>;
  /** Any other value that exists and is not equal to the given value. */
  hideNav_not?: InputMaybe<Scalars['Boolean']>;
  id?: InputMaybe<Scalars['ID']>;
  /** All values containing the given string. */
  id_contains?: InputMaybe<Scalars['ID']>;
  /** All values ending with the given string. */
  id_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are contained in given list. */
  id_in?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** Any other value that exists and is not equal to the given value. */
  id_not?: InputMaybe<Scalars['ID']>;
  /** All values not containing the given string. */
  id_not_contains?: InputMaybe<Scalars['ID']>;
  /** All values not ending with the given string */
  id_not_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are not contained in given list. */
  id_not_in?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** All values not starting with the given string. */
  id_not_starts_with?: InputMaybe<Scalars['ID']>;
  /** All values starting with the given string. */
  id_starts_with?: InputMaybe<Scalars['ID']>;
  layoutBlocks_every?: InputMaybe<LayoutBlockWhereInput>;
  layoutBlocks_none?: InputMaybe<LayoutBlockWhereInput>;
  layoutBlocks_some?: InputMaybe<LayoutBlockWhereInput>;
  noIndex?: InputMaybe<Scalars['Boolean']>;
  /** Any other value that exists and is not equal to the given value. */
  noIndex_not?: InputMaybe<Scalars['Boolean']>;
  pageNavigationSelection?: InputMaybe<PageNavigationSelection>;
  /** All values that are contained in given list. */
  pageNavigationSelection_in?: InputMaybe<Array<InputMaybe<PageNavigationSelection>>>;
  /** Any other value that exists and is not equal to the given value. */
  pageNavigationSelection_not?: InputMaybe<PageNavigationSelection>;
  /** All values that are not contained in given list. */
  pageNavigationSelection_not_in?: InputMaybe<Array<InputMaybe<PageNavigationSelection>>>;
  pageSlug?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  pageSlug_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  pageSlug_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  pageSlug_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Any other value that exists and is not equal to the given value. */
  pageSlug_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  pageSlug_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  pageSlug_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  pageSlug_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  pageSlug_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  pageSlug_starts_with?: InputMaybe<Scalars['String']>;
  pageWidthStyle?: InputMaybe<PageWidthStyle>;
  /** All values that are contained in given list. */
  pageWidthStyle_in?: InputMaybe<Array<InputMaybe<PageWidthStyle>>>;
  /** Any other value that exists and is not equal to the given value. */
  pageWidthStyle_not?: InputMaybe<PageWidthStyle>;
  /** All values that are not contained in given list. */
  pageWidthStyle_not_in?: InputMaybe<Array<InputMaybe<PageWidthStyle>>>;
  parentPage?: InputMaybe<ParentPage>;
  /** All values that are contained in given list. */
  parentPage_in?: InputMaybe<Array<InputMaybe<ParentPage>>>;
  /** Any other value that exists and is not equal to the given value. */
  parentPage_not?: InputMaybe<ParentPage>;
  /** All values that are not contained in given list. */
  parentPage_not_in?: InputMaybe<Array<InputMaybe<ParentPage>>>;
  popup?: InputMaybe<PopupWhereInput>;
  publishedAt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  publishedAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  publishedAt_gte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  publishedAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  /** All values less than the given value. */
  publishedAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  publishedAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** Any other value that exists and is not equal to the given value. */
  publishedAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not contained in given list. */
  publishedAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  publishedBy?: InputMaybe<UserWhereInput>;
  scheduledIn_every?: InputMaybe<ScheduledOperationWhereInput>;
  scheduledIn_none?: InputMaybe<ScheduledOperationWhereInput>;
  scheduledIn_some?: InputMaybe<ScheduledOperationWhereInput>;
  setHomePage?: InputMaybe<Scalars['Boolean']>;
  /** Any other value that exists and is not equal to the given value. */
  setHomePage_not?: InputMaybe<Scalars['Boolean']>;
  subtitle?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  subtitle_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  subtitle_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  subtitle_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Any other value that exists and is not equal to the given value. */
  subtitle_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  subtitle_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  subtitle_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  subtitle_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  subtitle_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  subtitle_starts_with?: InputMaybe<Scalars['String']>;
  title?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  title_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  title_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  title_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Any other value that exists and is not equal to the given value. */
  title_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  title_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  title_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  title_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  title_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  title_starts_with?: InputMaybe<Scalars['String']>;
  updatedAt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  updatedAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  updatedAt_gte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  updatedAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  /** All values less than the given value. */
  updatedAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  updatedAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** Any other value that exists and is not equal to the given value. */
  updatedAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not contained in given list. */
  updatedAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  updatedBy?: InputMaybe<UserWhereInput>;
  whatsAppContactNumberFloatingButton?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  whatsAppContactNumberFloatingButton_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  whatsAppContactNumberFloatingButton_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  whatsAppContactNumberFloatingButton_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Any other value that exists and is not equal to the given value. */
  whatsAppContactNumberFloatingButton_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  whatsAppContactNumberFloatingButton_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  whatsAppContactNumberFloatingButton_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  whatsAppContactNumberFloatingButton_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  whatsAppContactNumberFloatingButton_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  whatsAppContactNumberFloatingButton_starts_with?: InputMaybe<Scalars['String']>;
};

/** The document in stages filter allows specifying a stage entry to cross compare the same document between different stages */
export type PageWhereStageInput = {
  /** Logical AND on all given filters. */
  AND?: InputMaybe<Array<PageWhereStageInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: InputMaybe<Array<PageWhereStageInput>>;
  /** Logical OR on all given filters. */
  OR?: InputMaybe<Array<PageWhereStageInput>>;
  /** This field contains fields which can be set as true or false to specify an internal comparison */
  compareWithParent?: InputMaybe<PageWhereComparatorInput>;
  /** Specify the stage to compare with */
  stage?: InputMaybe<Stage>;
};

/** References Page record uniquely */
export type PageWhereUniqueInput = {
  id?: InputMaybe<Scalars['ID']>;
  pageSlug?: InputMaybe<Scalars['String']>;
  setHomePage?: InputMaybe<Scalars['Boolean']>;
};

export enum PageWidthStyle {
  Content = 'Content',
  Full = 'Full',
  Angled = 'angled',
  Diagonal = 'diagonal',
  Modern = 'modern',
  Parallax = 'parallax',
  Sharp = 'sharp',
  Split = 'split',
  Video = 'video',
  Wavy = 'wavy'
}

export enum ParentPage {
  Service = 'service'
}

export type Popup = Entity & {
  __typename?: 'Popup';
  buttonOpenCss?: Maybe<Scalars['String']>;
  buttonOpenText?: Maybe<Scalars['String']>;
  duration?: Maybe<Scalars['Int']>;
  header?: Maybe<Scalars['String']>;
  /** The unique identifier */
  id: Scalars['ID'];
  openOnScroll: Scalars['Boolean'];
  popupContent: Array<LayoutBlockColumn>;
  /** System stage field */
  stage: Stage;
};


export type PopupPopupContentArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  forceParentLocale?: InputMaybe<Scalars['Boolean']>;
  last?: InputMaybe<Scalars['Int']>;
  locales?: InputMaybe<Array<Locale>>;
  orderBy?: InputMaybe<LayoutBlockColumnOrderByInput>;
  skip?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<LayoutBlockColumnWhereInput>;
};

export type PopupConnectInput = {
  /** Allow to specify document position in list of connected documents, will default to appending at end of list */
  position?: InputMaybe<ConnectPositionInput>;
  /** Document to connect */
  where: PopupWhereUniqueInput;
};

/** A connection to a list of items. */
export type PopupConnection = {
  __typename?: 'PopupConnection';
  aggregate: Aggregate;
  /** A list of edges. */
  edges: Array<PopupEdge>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
};

export type PopupCreateInput = {
  buttonOpenCss?: InputMaybe<Scalars['String']>;
  buttonOpenText?: InputMaybe<Scalars['String']>;
  duration?: InputMaybe<Scalars['Int']>;
  header?: InputMaybe<Scalars['String']>;
  openOnScroll: Scalars['Boolean'];
  popupContent?: InputMaybe<LayoutBlockColumnCreateManyInlineInput>;
};

export type PopupCreateManyInlineInput = {
  /** Create and connect multiple existing Popup documents */
  create?: InputMaybe<Array<PopupCreateInput>>;
};

export type PopupCreateOneInlineInput = {
  /** Create and connect one Popup document */
  create?: InputMaybe<PopupCreateInput>;
};

export type PopupCreateWithPositionInput = {
  /** Document to create */
  data: PopupCreateInput;
  /** Position in the list of existing component instances, will default to appending at the end of list */
  position?: InputMaybe<ConnectPositionInput>;
};

/** An edge in a connection. */
export type PopupEdge = {
  __typename?: 'PopupEdge';
  /** A cursor for use in pagination. */
  cursor: Scalars['String'];
  /** The item at the end of the edge. */
  node: Popup;
};

/** Identifies documents */
export type PopupManyWhereInput = {
  /** Logical AND on all given filters. */
  AND?: InputMaybe<Array<PopupWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: InputMaybe<Array<PopupWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: InputMaybe<Array<PopupWhereInput>>;
  /** Contains search across all appropriate fields. */
  _search?: InputMaybe<Scalars['String']>;
  buttonOpenCss?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  buttonOpenCss_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  buttonOpenCss_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  buttonOpenCss_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Any other value that exists and is not equal to the given value. */
  buttonOpenCss_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  buttonOpenCss_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  buttonOpenCss_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  buttonOpenCss_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  buttonOpenCss_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  buttonOpenCss_starts_with?: InputMaybe<Scalars['String']>;
  buttonOpenText?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  buttonOpenText_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  buttonOpenText_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  buttonOpenText_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Any other value that exists and is not equal to the given value. */
  buttonOpenText_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  buttonOpenText_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  buttonOpenText_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  buttonOpenText_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  buttonOpenText_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  buttonOpenText_starts_with?: InputMaybe<Scalars['String']>;
  duration?: InputMaybe<Scalars['Int']>;
  /** All values greater than the given value. */
  duration_gt?: InputMaybe<Scalars['Int']>;
  /** All values greater than or equal the given value. */
  duration_gte?: InputMaybe<Scalars['Int']>;
  /** All values that are contained in given list. */
  duration_in?: InputMaybe<Array<InputMaybe<Scalars['Int']>>>;
  /** All values less than the given value. */
  duration_lt?: InputMaybe<Scalars['Int']>;
  /** All values less than or equal the given value. */
  duration_lte?: InputMaybe<Scalars['Int']>;
  /** Any other value that exists and is not equal to the given value. */
  duration_not?: InputMaybe<Scalars['Int']>;
  /** All values that are not contained in given list. */
  duration_not_in?: InputMaybe<Array<InputMaybe<Scalars['Int']>>>;
  header?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  header_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  header_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  header_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Any other value that exists and is not equal to the given value. */
  header_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  header_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  header_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  header_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  header_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  header_starts_with?: InputMaybe<Scalars['String']>;
  id?: InputMaybe<Scalars['ID']>;
  /** All values containing the given string. */
  id_contains?: InputMaybe<Scalars['ID']>;
  /** All values ending with the given string. */
  id_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are contained in given list. */
  id_in?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** Any other value that exists and is not equal to the given value. */
  id_not?: InputMaybe<Scalars['ID']>;
  /** All values not containing the given string. */
  id_not_contains?: InputMaybe<Scalars['ID']>;
  /** All values not ending with the given string */
  id_not_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are not contained in given list. */
  id_not_in?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** All values not starting with the given string. */
  id_not_starts_with?: InputMaybe<Scalars['ID']>;
  /** All values starting with the given string. */
  id_starts_with?: InputMaybe<Scalars['ID']>;
  openOnScroll?: InputMaybe<Scalars['Boolean']>;
  /** Any other value that exists and is not equal to the given value. */
  openOnScroll_not?: InputMaybe<Scalars['Boolean']>;
  popupContent_every?: InputMaybe<LayoutBlockColumnWhereInput>;
  popupContent_none?: InputMaybe<LayoutBlockColumnWhereInput>;
  popupContent_some?: InputMaybe<LayoutBlockColumnWhereInput>;
};

export enum PopupOrderByInput {
  ButtonOpenCssAsc = 'buttonOpenCss_ASC',
  ButtonOpenCssDesc = 'buttonOpenCss_DESC',
  ButtonOpenTextAsc = 'buttonOpenText_ASC',
  ButtonOpenTextDesc = 'buttonOpenText_DESC',
  DurationAsc = 'duration_ASC',
  DurationDesc = 'duration_DESC',
  HeaderAsc = 'header_ASC',
  HeaderDesc = 'header_DESC',
  IdAsc = 'id_ASC',
  IdDesc = 'id_DESC',
  OpenOnScrollAsc = 'openOnScroll_ASC',
  OpenOnScrollDesc = 'openOnScroll_DESC'
}

export type PopupParent = Page;

export type PopupParentConnectInput = {
  Page?: InputMaybe<PageConnectInput>;
};

export type PopupParentCreateInput = {
  Page?: InputMaybe<PageCreateInput>;
};

export type PopupParentCreateManyInlineInput = {
  /** Connect multiple existing PopupParent documents */
  connect?: InputMaybe<Array<PopupParentWhereUniqueInput>>;
  /** Create and connect multiple existing PopupParent documents */
  create?: InputMaybe<Array<PopupParentCreateInput>>;
};

export type PopupParentCreateOneInlineInput = {
  /** Connect one existing PopupParent document */
  connect?: InputMaybe<PopupParentWhereUniqueInput>;
  /** Create and connect one PopupParent document */
  create?: InputMaybe<PopupParentCreateInput>;
};

export type PopupParentUpdateInput = {
  Page?: InputMaybe<PageUpdateInput>;
};

export type PopupParentUpdateManyInlineInput = {
  /** Connect multiple existing PopupParent documents */
  connect?: InputMaybe<Array<PopupParentConnectInput>>;
  /** Create and connect multiple PopupParent documents */
  create?: InputMaybe<Array<PopupParentCreateInput>>;
  /** Delete multiple PopupParent documents */
  delete?: InputMaybe<Array<PopupParentWhereUniqueInput>>;
  /** Disconnect multiple PopupParent documents */
  disconnect?: InputMaybe<Array<PopupParentWhereUniqueInput>>;
  /** Override currently-connected documents with multiple existing PopupParent documents */
  set?: InputMaybe<Array<PopupParentWhereUniqueInput>>;
  /** Update multiple PopupParent documents */
  update?: InputMaybe<Array<PopupParentUpdateWithNestedWhereUniqueInput>>;
  /** Upsert multiple PopupParent documents */
  upsert?: InputMaybe<Array<PopupParentUpsertWithNestedWhereUniqueInput>>;
};

export type PopupParentUpdateManyWithNestedWhereInput = {
  Page?: InputMaybe<PageUpdateManyWithNestedWhereInput>;
};

export type PopupParentUpdateOneInlineInput = {
  /** Connect existing PopupParent document */
  connect?: InputMaybe<PopupParentWhereUniqueInput>;
  /** Create and connect one PopupParent document */
  create?: InputMaybe<PopupParentCreateInput>;
  /** Delete currently connected PopupParent document */
  delete?: InputMaybe<Scalars['Boolean']>;
  /** Disconnect currently connected PopupParent document */
  disconnect?: InputMaybe<Scalars['Boolean']>;
  /** Update single PopupParent document */
  update?: InputMaybe<PopupParentUpdateWithNestedWhereUniqueInput>;
  /** Upsert single PopupParent document */
  upsert?: InputMaybe<PopupParentUpsertWithNestedWhereUniqueInput>;
};

export type PopupParentUpdateWithNestedWhereUniqueInput = {
  Page?: InputMaybe<PageUpdateWithNestedWhereUniqueInput>;
};

export type PopupParentUpsertWithNestedWhereUniqueInput = {
  Page?: InputMaybe<PageUpsertWithNestedWhereUniqueInput>;
};

export type PopupParentWhereInput = {
  Page?: InputMaybe<PageWhereInput>;
};

export type PopupParentWhereUniqueInput = {
  Page?: InputMaybe<PageWhereUniqueInput>;
};

export type PopupUpdateInput = {
  buttonOpenCss?: InputMaybe<Scalars['String']>;
  buttonOpenText?: InputMaybe<Scalars['String']>;
  duration?: InputMaybe<Scalars['Int']>;
  header?: InputMaybe<Scalars['String']>;
  openOnScroll?: InputMaybe<Scalars['Boolean']>;
  popupContent?: InputMaybe<LayoutBlockColumnUpdateManyInlineInput>;
};

export type PopupUpdateManyInlineInput = {
  /** Create and connect multiple Popup component instances */
  create?: InputMaybe<Array<PopupCreateWithPositionInput>>;
  /** Delete multiple Popup documents */
  delete?: InputMaybe<Array<PopupWhereUniqueInput>>;
  /** Update multiple Popup component instances */
  update?: InputMaybe<Array<PopupUpdateWithNestedWhereUniqueAndPositionInput>>;
  /** Upsert multiple Popup component instances */
  upsert?: InputMaybe<Array<PopupUpsertWithNestedWhereUniqueAndPositionInput>>;
};

export type PopupUpdateManyInput = {
  buttonOpenCss?: InputMaybe<Scalars['String']>;
  buttonOpenText?: InputMaybe<Scalars['String']>;
  duration?: InputMaybe<Scalars['Int']>;
  header?: InputMaybe<Scalars['String']>;
  openOnScroll?: InputMaybe<Scalars['Boolean']>;
};

export type PopupUpdateManyWithNestedWhereInput = {
  /** Update many input */
  data: PopupUpdateManyInput;
  /** Document search */
  where: PopupWhereInput;
};

export type PopupUpdateOneInlineInput = {
  /** Create and connect one Popup document */
  create?: InputMaybe<PopupCreateInput>;
  /** Delete currently connected Popup document */
  delete?: InputMaybe<Scalars['Boolean']>;
  /** Update single Popup document */
  update?: InputMaybe<PopupUpdateWithNestedWhereUniqueInput>;
  /** Upsert single Popup document */
  upsert?: InputMaybe<PopupUpsertWithNestedWhereUniqueInput>;
};

export type PopupUpdateWithNestedWhereUniqueAndPositionInput = {
  /** Document to update */
  data?: InputMaybe<PopupUpdateInput>;
  /** Position in the list of existing component instances, will default to appending at the end of list */
  position?: InputMaybe<ConnectPositionInput>;
  /** Unique component instance search */
  where: PopupWhereUniqueInput;
};

export type PopupUpdateWithNestedWhereUniqueInput = {
  /** Document to update */
  data: PopupUpdateInput;
  /** Unique document search */
  where: PopupWhereUniqueInput;
};

export type PopupUpsertInput = {
  /** Create document if it didn't exist */
  create: PopupCreateInput;
  /** Update document if it exists */
  update: PopupUpdateInput;
};

export type PopupUpsertWithNestedWhereUniqueAndPositionInput = {
  /** Document to upsert */
  data?: InputMaybe<PopupUpsertInput>;
  /** Position in the list of existing component instances, will default to appending at the end of list */
  position?: InputMaybe<ConnectPositionInput>;
  /** Unique component instance search */
  where: PopupWhereUniqueInput;
};

export type PopupUpsertWithNestedWhereUniqueInput = {
  /** Upsert data */
  data: PopupUpsertInput;
  /** Unique document search */
  where: PopupWhereUniqueInput;
};

/** Identifies documents */
export type PopupWhereInput = {
  /** Logical AND on all given filters. */
  AND?: InputMaybe<Array<PopupWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: InputMaybe<Array<PopupWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: InputMaybe<Array<PopupWhereInput>>;
  /** Contains search across all appropriate fields. */
  _search?: InputMaybe<Scalars['String']>;
  buttonOpenCss?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  buttonOpenCss_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  buttonOpenCss_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  buttonOpenCss_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Any other value that exists and is not equal to the given value. */
  buttonOpenCss_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  buttonOpenCss_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  buttonOpenCss_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  buttonOpenCss_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  buttonOpenCss_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  buttonOpenCss_starts_with?: InputMaybe<Scalars['String']>;
  buttonOpenText?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  buttonOpenText_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  buttonOpenText_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  buttonOpenText_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Any other value that exists and is not equal to the given value. */
  buttonOpenText_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  buttonOpenText_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  buttonOpenText_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  buttonOpenText_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  buttonOpenText_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  buttonOpenText_starts_with?: InputMaybe<Scalars['String']>;
  duration?: InputMaybe<Scalars['Int']>;
  /** All values greater than the given value. */
  duration_gt?: InputMaybe<Scalars['Int']>;
  /** All values greater than or equal the given value. */
  duration_gte?: InputMaybe<Scalars['Int']>;
  /** All values that are contained in given list. */
  duration_in?: InputMaybe<Array<InputMaybe<Scalars['Int']>>>;
  /** All values less than the given value. */
  duration_lt?: InputMaybe<Scalars['Int']>;
  /** All values less than or equal the given value. */
  duration_lte?: InputMaybe<Scalars['Int']>;
  /** Any other value that exists and is not equal to the given value. */
  duration_not?: InputMaybe<Scalars['Int']>;
  /** All values that are not contained in given list. */
  duration_not_in?: InputMaybe<Array<InputMaybe<Scalars['Int']>>>;
  header?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  header_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  header_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  header_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Any other value that exists and is not equal to the given value. */
  header_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  header_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  header_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  header_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  header_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  header_starts_with?: InputMaybe<Scalars['String']>;
  id?: InputMaybe<Scalars['ID']>;
  /** All values containing the given string. */
  id_contains?: InputMaybe<Scalars['ID']>;
  /** All values ending with the given string. */
  id_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are contained in given list. */
  id_in?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** Any other value that exists and is not equal to the given value. */
  id_not?: InputMaybe<Scalars['ID']>;
  /** All values not containing the given string. */
  id_not_contains?: InputMaybe<Scalars['ID']>;
  /** All values not ending with the given string */
  id_not_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are not contained in given list. */
  id_not_in?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** All values not starting with the given string. */
  id_not_starts_with?: InputMaybe<Scalars['ID']>;
  /** All values starting with the given string. */
  id_starts_with?: InputMaybe<Scalars['ID']>;
  openOnScroll?: InputMaybe<Scalars['Boolean']>;
  /** Any other value that exists and is not equal to the given value. */
  openOnScroll_not?: InputMaybe<Scalars['Boolean']>;
  popupContent_every?: InputMaybe<LayoutBlockColumnWhereInput>;
  popupContent_none?: InputMaybe<LayoutBlockColumnWhereInput>;
  popupContent_some?: InputMaybe<LayoutBlockColumnWhereInput>;
};

/** References Popup record uniquely */
export type PopupWhereUniqueInput = {
  id?: InputMaybe<Scalars['ID']>;
};

export type Product = Entity & Node & {
  __typename?: 'Product';
  /** The time the document was created */
  createdAt: Scalars['DateTime'];
  /** User that created this document */
  createdBy?: Maybe<User>;
  description?: Maybe<RichText>;
  /** Get the document in other stages */
  documentInStages: Array<Product>;
  enableProduct?: Maybe<Scalars['Boolean']>;
  gallery: Array<Asset>;
  /** List of Product versions */
  history: Array<Version>;
  iFrame?: Maybe<Scalars['String']>;
  /** The unique identifier */
  id: Scalars['ID'];
  name: Scalars['String'];
  price?: Maybe<Scalars['String']>;
  productJson?: Maybe<Scalars['Json']>;
  productSlug: Scalars['String'];
  productType: ProductType;
  /** The time the document was published. Null on documents in draft stage. */
  publishedAt?: Maybe<Scalars['DateTime']>;
  /** User that last published this document */
  publishedBy?: Maybe<User>;
  purchaseLabel?: Maybe<Scalars['String']>;
  purchaseLink?: Maybe<Scalars['String']>;
  scheduledIn: Array<ScheduledOperation>;
  sku?: Maybe<Scalars['String']>;
  /** System stage field */
  stage: Stage;
  /** The time the document was updated */
  updatedAt: Scalars['DateTime'];
  /** User that last updated this document */
  updatedBy?: Maybe<User>;
  vendor?: Maybe<Scalars['String']>;
  videoBox: Array<VideoBox>;
};


export type ProductCreatedByArgs = {
  forceParentLocale?: InputMaybe<Scalars['Boolean']>;
  locales?: InputMaybe<Array<Locale>>;
};


export type ProductDocumentInStagesArgs = {
  includeCurrent?: Scalars['Boolean'];
  inheritLocale?: Scalars['Boolean'];
  stages?: Array<Stage>;
};


export type ProductGalleryArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  forceParentLocale?: InputMaybe<Scalars['Boolean']>;
  last?: InputMaybe<Scalars['Int']>;
  locales?: InputMaybe<Array<Locale>>;
  orderBy?: InputMaybe<AssetOrderByInput>;
  skip?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<AssetWhereInput>;
};


export type ProductHistoryArgs = {
  limit?: Scalars['Int'];
  skip?: Scalars['Int'];
  stageOverride?: InputMaybe<Stage>;
};


export type ProductPublishedByArgs = {
  forceParentLocale?: InputMaybe<Scalars['Boolean']>;
  locales?: InputMaybe<Array<Locale>>;
};


export type ProductScheduledInArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  forceParentLocale?: InputMaybe<Scalars['Boolean']>;
  last?: InputMaybe<Scalars['Int']>;
  locales?: InputMaybe<Array<Locale>>;
  skip?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<ScheduledOperationWhereInput>;
};


export type ProductUpdatedByArgs = {
  forceParentLocale?: InputMaybe<Scalars['Boolean']>;
  locales?: InputMaybe<Array<Locale>>;
};


export type ProductVideoBoxArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  forceParentLocale?: InputMaybe<Scalars['Boolean']>;
  last?: InputMaybe<Scalars['Int']>;
  locales?: InputMaybe<Array<Locale>>;
  orderBy?: InputMaybe<VideoBoxOrderByInput>;
  skip?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<VideoBoxWhereInput>;
};

export type ProductConnectInput = {
  /** Allow to specify document position in list of connected documents, will default to appending at end of list */
  position?: InputMaybe<ConnectPositionInput>;
  /** Document to connect */
  where: ProductWhereUniqueInput;
};

/** A connection to a list of items. */
export type ProductConnection = {
  __typename?: 'ProductConnection';
  aggregate: Aggregate;
  /** A list of edges. */
  edges: Array<ProductEdge>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
};

export type ProductCreateInput = {
  createdAt?: InputMaybe<Scalars['DateTime']>;
  description?: InputMaybe<Scalars['RichTextAST']>;
  enableProduct?: InputMaybe<Scalars['Boolean']>;
  gallery?: InputMaybe<AssetCreateManyInlineInput>;
  iFrame?: InputMaybe<Scalars['String']>;
  name: Scalars['String'];
  price?: InputMaybe<Scalars['String']>;
  productJson?: InputMaybe<Scalars['Json']>;
  productSlug: Scalars['String'];
  productType: ProductType;
  purchaseLabel?: InputMaybe<Scalars['String']>;
  purchaseLink?: InputMaybe<Scalars['String']>;
  sku?: InputMaybe<Scalars['String']>;
  updatedAt?: InputMaybe<Scalars['DateTime']>;
  vendor?: InputMaybe<Scalars['String']>;
  videoBox?: InputMaybe<VideoBoxCreateManyInlineInput>;
};

export type ProductCreateManyInlineInput = {
  /** Connect multiple existing Product documents */
  connect?: InputMaybe<Array<ProductWhereUniqueInput>>;
  /** Create and connect multiple existing Product documents */
  create?: InputMaybe<Array<ProductCreateInput>>;
};

export type ProductCreateOneInlineInput = {
  /** Connect one existing Product document */
  connect?: InputMaybe<ProductWhereUniqueInput>;
  /** Create and connect one Product document */
  create?: InputMaybe<ProductCreateInput>;
};

/** An edge in a connection. */
export type ProductEdge = {
  __typename?: 'ProductEdge';
  /** A cursor for use in pagination. */
  cursor: Scalars['String'];
  /** The item at the end of the edge. */
  node: Product;
};

/** Identifies documents */
export type ProductManyWhereInput = {
  /** Logical AND on all given filters. */
  AND?: InputMaybe<Array<ProductWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: InputMaybe<Array<ProductWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: InputMaybe<Array<ProductWhereInput>>;
  /** Contains search across all appropriate fields. */
  _search?: InputMaybe<Scalars['String']>;
  createdAt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  createdAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  createdAt_gte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  createdAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  /** All values less than the given value. */
  createdAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  createdAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** Any other value that exists and is not equal to the given value. */
  createdAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not contained in given list. */
  createdAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  createdBy?: InputMaybe<UserWhereInput>;
  documentInStages_every?: InputMaybe<ProductWhereStageInput>;
  documentInStages_none?: InputMaybe<ProductWhereStageInput>;
  documentInStages_some?: InputMaybe<ProductWhereStageInput>;
  enableProduct?: InputMaybe<Scalars['Boolean']>;
  /** Any other value that exists and is not equal to the given value. */
  enableProduct_not?: InputMaybe<Scalars['Boolean']>;
  gallery_every?: InputMaybe<AssetWhereInput>;
  gallery_none?: InputMaybe<AssetWhereInput>;
  gallery_some?: InputMaybe<AssetWhereInput>;
  iFrame?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  iFrame_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  iFrame_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  iFrame_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Any other value that exists and is not equal to the given value. */
  iFrame_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  iFrame_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  iFrame_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  iFrame_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  iFrame_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  iFrame_starts_with?: InputMaybe<Scalars['String']>;
  id?: InputMaybe<Scalars['ID']>;
  /** All values containing the given string. */
  id_contains?: InputMaybe<Scalars['ID']>;
  /** All values ending with the given string. */
  id_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are contained in given list. */
  id_in?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** Any other value that exists and is not equal to the given value. */
  id_not?: InputMaybe<Scalars['ID']>;
  /** All values not containing the given string. */
  id_not_contains?: InputMaybe<Scalars['ID']>;
  /** All values not ending with the given string */
  id_not_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are not contained in given list. */
  id_not_in?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** All values not starting with the given string. */
  id_not_starts_with?: InputMaybe<Scalars['ID']>;
  /** All values starting with the given string. */
  id_starts_with?: InputMaybe<Scalars['ID']>;
  name?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  name_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  name_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  name_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Any other value that exists and is not equal to the given value. */
  name_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  name_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  name_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  name_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  name_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  name_starts_with?: InputMaybe<Scalars['String']>;
  price?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  price_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  price_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  price_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Any other value that exists and is not equal to the given value. */
  price_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  price_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  price_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  price_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  price_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  price_starts_with?: InputMaybe<Scalars['String']>;
  /** All values containing the given json path. */
  productJson_json_path_exists?: InputMaybe<Scalars['String']>;
  /**
   * Recursively tries to find the provided JSON scalar value inside the field.
   * It does use an exact match when comparing values.
   * If you pass `null` as value the filter will be ignored.
   * Note: This filter fails if you try to look for a non scalar JSON value!
   */
  productJson_value_recursive?: InputMaybe<Scalars['Json']>;
  productSlug?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  productSlug_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  productSlug_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  productSlug_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Any other value that exists and is not equal to the given value. */
  productSlug_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  productSlug_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  productSlug_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  productSlug_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  productSlug_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  productSlug_starts_with?: InputMaybe<Scalars['String']>;
  productType?: InputMaybe<ProductType>;
  /** All values that are contained in given list. */
  productType_in?: InputMaybe<Array<InputMaybe<ProductType>>>;
  /** Any other value that exists and is not equal to the given value. */
  productType_not?: InputMaybe<ProductType>;
  /** All values that are not contained in given list. */
  productType_not_in?: InputMaybe<Array<InputMaybe<ProductType>>>;
  publishedAt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  publishedAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  publishedAt_gte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  publishedAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  /** All values less than the given value. */
  publishedAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  publishedAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** Any other value that exists and is not equal to the given value. */
  publishedAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not contained in given list. */
  publishedAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  publishedBy?: InputMaybe<UserWhereInput>;
  purchaseLabel?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  purchaseLabel_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  purchaseLabel_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  purchaseLabel_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Any other value that exists and is not equal to the given value. */
  purchaseLabel_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  purchaseLabel_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  purchaseLabel_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  purchaseLabel_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  purchaseLabel_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  purchaseLabel_starts_with?: InputMaybe<Scalars['String']>;
  purchaseLink?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  purchaseLink_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  purchaseLink_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  purchaseLink_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Any other value that exists and is not equal to the given value. */
  purchaseLink_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  purchaseLink_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  purchaseLink_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  purchaseLink_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  purchaseLink_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  purchaseLink_starts_with?: InputMaybe<Scalars['String']>;
  scheduledIn_every?: InputMaybe<ScheduledOperationWhereInput>;
  scheduledIn_none?: InputMaybe<ScheduledOperationWhereInput>;
  scheduledIn_some?: InputMaybe<ScheduledOperationWhereInput>;
  sku?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  sku_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  sku_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  sku_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Any other value that exists and is not equal to the given value. */
  sku_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  sku_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  sku_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  sku_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  sku_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  sku_starts_with?: InputMaybe<Scalars['String']>;
  updatedAt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  updatedAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  updatedAt_gte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  updatedAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  /** All values less than the given value. */
  updatedAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  updatedAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** Any other value that exists and is not equal to the given value. */
  updatedAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not contained in given list. */
  updatedAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  updatedBy?: InputMaybe<UserWhereInput>;
  vendor?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  vendor_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  vendor_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  vendor_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Any other value that exists and is not equal to the given value. */
  vendor_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  vendor_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  vendor_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  vendor_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  vendor_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  vendor_starts_with?: InputMaybe<Scalars['String']>;
  videoBox_every?: InputMaybe<VideoBoxWhereInput>;
  videoBox_none?: InputMaybe<VideoBoxWhereInput>;
  videoBox_some?: InputMaybe<VideoBoxWhereInput>;
};

export enum ProductOrderByInput {
  CreatedAtAsc = 'createdAt_ASC',
  CreatedAtDesc = 'createdAt_DESC',
  EnableProductAsc = 'enableProduct_ASC',
  EnableProductDesc = 'enableProduct_DESC',
  IFrameAsc = 'iFrame_ASC',
  IFrameDesc = 'iFrame_DESC',
  IdAsc = 'id_ASC',
  IdDesc = 'id_DESC',
  NameAsc = 'name_ASC',
  NameDesc = 'name_DESC',
  PriceAsc = 'price_ASC',
  PriceDesc = 'price_DESC',
  ProductSlugAsc = 'productSlug_ASC',
  ProductSlugDesc = 'productSlug_DESC',
  ProductTypeAsc = 'productType_ASC',
  ProductTypeDesc = 'productType_DESC',
  PublishedAtAsc = 'publishedAt_ASC',
  PublishedAtDesc = 'publishedAt_DESC',
  PurchaseLabelAsc = 'purchaseLabel_ASC',
  PurchaseLabelDesc = 'purchaseLabel_DESC',
  PurchaseLinkAsc = 'purchaseLink_ASC',
  PurchaseLinkDesc = 'purchaseLink_DESC',
  SkuAsc = 'sku_ASC',
  SkuDesc = 'sku_DESC',
  UpdatedAtAsc = 'updatedAt_ASC',
  UpdatedAtDesc = 'updatedAt_DESC',
  VendorAsc = 'vendor_ASC',
  VendorDesc = 'vendor_DESC'
}

export enum ProductType {
  Store = 'store'
}

export type ProductUpdateInput = {
  description?: InputMaybe<Scalars['RichTextAST']>;
  enableProduct?: InputMaybe<Scalars['Boolean']>;
  gallery?: InputMaybe<AssetUpdateManyInlineInput>;
  iFrame?: InputMaybe<Scalars['String']>;
  name?: InputMaybe<Scalars['String']>;
  price?: InputMaybe<Scalars['String']>;
  productJson?: InputMaybe<Scalars['Json']>;
  productSlug?: InputMaybe<Scalars['String']>;
  productType?: InputMaybe<ProductType>;
  purchaseLabel?: InputMaybe<Scalars['String']>;
  purchaseLink?: InputMaybe<Scalars['String']>;
  sku?: InputMaybe<Scalars['String']>;
  vendor?: InputMaybe<Scalars['String']>;
  videoBox?: InputMaybe<VideoBoxUpdateManyInlineInput>;
};

export type ProductUpdateManyInlineInput = {
  /** Connect multiple existing Product documents */
  connect?: InputMaybe<Array<ProductConnectInput>>;
  /** Create and connect multiple Product documents */
  create?: InputMaybe<Array<ProductCreateInput>>;
  /** Delete multiple Product documents */
  delete?: InputMaybe<Array<ProductWhereUniqueInput>>;
  /** Disconnect multiple Product documents */
  disconnect?: InputMaybe<Array<ProductWhereUniqueInput>>;
  /** Override currently-connected documents with multiple existing Product documents */
  set?: InputMaybe<Array<ProductWhereUniqueInput>>;
  /** Update multiple Product documents */
  update?: InputMaybe<Array<ProductUpdateWithNestedWhereUniqueInput>>;
  /** Upsert multiple Product documents */
  upsert?: InputMaybe<Array<ProductUpsertWithNestedWhereUniqueInput>>;
};

export type ProductUpdateManyInput = {
  description?: InputMaybe<Scalars['RichTextAST']>;
  enableProduct?: InputMaybe<Scalars['Boolean']>;
  iFrame?: InputMaybe<Scalars['String']>;
  name?: InputMaybe<Scalars['String']>;
  price?: InputMaybe<Scalars['String']>;
  productJson?: InputMaybe<Scalars['Json']>;
  productType?: InputMaybe<ProductType>;
  purchaseLabel?: InputMaybe<Scalars['String']>;
  purchaseLink?: InputMaybe<Scalars['String']>;
  sku?: InputMaybe<Scalars['String']>;
  vendor?: InputMaybe<Scalars['String']>;
};

export type ProductUpdateManyWithNestedWhereInput = {
  /** Update many input */
  data: ProductUpdateManyInput;
  /** Document search */
  where: ProductWhereInput;
};

export type ProductUpdateOneInlineInput = {
  /** Connect existing Product document */
  connect?: InputMaybe<ProductWhereUniqueInput>;
  /** Create and connect one Product document */
  create?: InputMaybe<ProductCreateInput>;
  /** Delete currently connected Product document */
  delete?: InputMaybe<Scalars['Boolean']>;
  /** Disconnect currently connected Product document */
  disconnect?: InputMaybe<Scalars['Boolean']>;
  /** Update single Product document */
  update?: InputMaybe<ProductUpdateWithNestedWhereUniqueInput>;
  /** Upsert single Product document */
  upsert?: InputMaybe<ProductUpsertWithNestedWhereUniqueInput>;
};

export type ProductUpdateWithNestedWhereUniqueInput = {
  /** Document to update */
  data: ProductUpdateInput;
  /** Unique document search */
  where: ProductWhereUniqueInput;
};

export type ProductUpsertInput = {
  /** Create document if it didn't exist */
  create: ProductCreateInput;
  /** Update document if it exists */
  update: ProductUpdateInput;
};

export type ProductUpsertWithNestedWhereUniqueInput = {
  /** Upsert data */
  data: ProductUpsertInput;
  /** Unique document search */
  where: ProductWhereUniqueInput;
};

/** This contains a set of filters that can be used to compare values internally */
export type ProductWhereComparatorInput = {
  /** This field can be used to request to check if the entry is outdated by internal comparison */
  outdated_to?: InputMaybe<Scalars['Boolean']>;
};

/** Identifies documents */
export type ProductWhereInput = {
  /** Logical AND on all given filters. */
  AND?: InputMaybe<Array<ProductWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: InputMaybe<Array<ProductWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: InputMaybe<Array<ProductWhereInput>>;
  /** Contains search across all appropriate fields. */
  _search?: InputMaybe<Scalars['String']>;
  createdAt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  createdAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  createdAt_gte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  createdAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  /** All values less than the given value. */
  createdAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  createdAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** Any other value that exists and is not equal to the given value. */
  createdAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not contained in given list. */
  createdAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  createdBy?: InputMaybe<UserWhereInput>;
  documentInStages_every?: InputMaybe<ProductWhereStageInput>;
  documentInStages_none?: InputMaybe<ProductWhereStageInput>;
  documentInStages_some?: InputMaybe<ProductWhereStageInput>;
  enableProduct?: InputMaybe<Scalars['Boolean']>;
  /** Any other value that exists and is not equal to the given value. */
  enableProduct_not?: InputMaybe<Scalars['Boolean']>;
  gallery_every?: InputMaybe<AssetWhereInput>;
  gallery_none?: InputMaybe<AssetWhereInput>;
  gallery_some?: InputMaybe<AssetWhereInput>;
  iFrame?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  iFrame_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  iFrame_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  iFrame_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Any other value that exists and is not equal to the given value. */
  iFrame_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  iFrame_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  iFrame_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  iFrame_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  iFrame_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  iFrame_starts_with?: InputMaybe<Scalars['String']>;
  id?: InputMaybe<Scalars['ID']>;
  /** All values containing the given string. */
  id_contains?: InputMaybe<Scalars['ID']>;
  /** All values ending with the given string. */
  id_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are contained in given list. */
  id_in?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** Any other value that exists and is not equal to the given value. */
  id_not?: InputMaybe<Scalars['ID']>;
  /** All values not containing the given string. */
  id_not_contains?: InputMaybe<Scalars['ID']>;
  /** All values not ending with the given string */
  id_not_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are not contained in given list. */
  id_not_in?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** All values not starting with the given string. */
  id_not_starts_with?: InputMaybe<Scalars['ID']>;
  /** All values starting with the given string. */
  id_starts_with?: InputMaybe<Scalars['ID']>;
  name?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  name_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  name_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  name_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Any other value that exists and is not equal to the given value. */
  name_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  name_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  name_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  name_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  name_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  name_starts_with?: InputMaybe<Scalars['String']>;
  price?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  price_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  price_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  price_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Any other value that exists and is not equal to the given value. */
  price_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  price_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  price_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  price_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  price_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  price_starts_with?: InputMaybe<Scalars['String']>;
  /** All values containing the given json path. */
  productJson_json_path_exists?: InputMaybe<Scalars['String']>;
  /**
   * Recursively tries to find the provided JSON scalar value inside the field.
   * It does use an exact match when comparing values.
   * If you pass `null` as value the filter will be ignored.
   * Note: This filter fails if you try to look for a non scalar JSON value!
   */
  productJson_value_recursive?: InputMaybe<Scalars['Json']>;
  productSlug?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  productSlug_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  productSlug_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  productSlug_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Any other value that exists and is not equal to the given value. */
  productSlug_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  productSlug_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  productSlug_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  productSlug_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  productSlug_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  productSlug_starts_with?: InputMaybe<Scalars['String']>;
  productType?: InputMaybe<ProductType>;
  /** All values that are contained in given list. */
  productType_in?: InputMaybe<Array<InputMaybe<ProductType>>>;
  /** Any other value that exists and is not equal to the given value. */
  productType_not?: InputMaybe<ProductType>;
  /** All values that are not contained in given list. */
  productType_not_in?: InputMaybe<Array<InputMaybe<ProductType>>>;
  publishedAt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  publishedAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  publishedAt_gte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  publishedAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  /** All values less than the given value. */
  publishedAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  publishedAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** Any other value that exists and is not equal to the given value. */
  publishedAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not contained in given list. */
  publishedAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  publishedBy?: InputMaybe<UserWhereInput>;
  purchaseLabel?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  purchaseLabel_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  purchaseLabel_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  purchaseLabel_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Any other value that exists and is not equal to the given value. */
  purchaseLabel_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  purchaseLabel_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  purchaseLabel_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  purchaseLabel_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  purchaseLabel_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  purchaseLabel_starts_with?: InputMaybe<Scalars['String']>;
  purchaseLink?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  purchaseLink_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  purchaseLink_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  purchaseLink_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Any other value that exists and is not equal to the given value. */
  purchaseLink_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  purchaseLink_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  purchaseLink_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  purchaseLink_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  purchaseLink_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  purchaseLink_starts_with?: InputMaybe<Scalars['String']>;
  scheduledIn_every?: InputMaybe<ScheduledOperationWhereInput>;
  scheduledIn_none?: InputMaybe<ScheduledOperationWhereInput>;
  scheduledIn_some?: InputMaybe<ScheduledOperationWhereInput>;
  sku?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  sku_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  sku_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  sku_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Any other value that exists and is not equal to the given value. */
  sku_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  sku_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  sku_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  sku_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  sku_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  sku_starts_with?: InputMaybe<Scalars['String']>;
  updatedAt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  updatedAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  updatedAt_gte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  updatedAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  /** All values less than the given value. */
  updatedAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  updatedAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** Any other value that exists and is not equal to the given value. */
  updatedAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not contained in given list. */
  updatedAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  updatedBy?: InputMaybe<UserWhereInput>;
  vendor?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  vendor_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  vendor_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  vendor_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Any other value that exists and is not equal to the given value. */
  vendor_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  vendor_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  vendor_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  vendor_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  vendor_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  vendor_starts_with?: InputMaybe<Scalars['String']>;
  videoBox_every?: InputMaybe<VideoBoxWhereInput>;
  videoBox_none?: InputMaybe<VideoBoxWhereInput>;
  videoBox_some?: InputMaybe<VideoBoxWhereInput>;
};

/** The document in stages filter allows specifying a stage entry to cross compare the same document between different stages */
export type ProductWhereStageInput = {
  /** Logical AND on all given filters. */
  AND?: InputMaybe<Array<ProductWhereStageInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: InputMaybe<Array<ProductWhereStageInput>>;
  /** Logical OR on all given filters. */
  OR?: InputMaybe<Array<ProductWhereStageInput>>;
  /** This field contains fields which can be set as true or false to specify an internal comparison */
  compareWithParent?: InputMaybe<ProductWhereComparatorInput>;
  /** Specify the stage to compare with */
  stage?: InputMaybe<Stage>;
};

/** References Product record uniquely */
export type ProductWhereUniqueInput = {
  id?: InputMaybe<Scalars['ID']>;
  productSlug?: InputMaybe<Scalars['String']>;
};

export type Profile = Entity & Node & {
  __typename?: 'Profile';
  appleMusicLink?: Maybe<Scalars['String']>;
  avatarImage?: Maybe<Asset>;
  bandsInTownKey?: Maybe<Scalars['String']>;
  calendlyLink?: Maybe<Scalars['String']>;
  contactQuery: Array<ContactQueries>;
  /** The time the document was created */
  createdAt: Scalars['DateTime'];
  /** User that created this document */
  createdBy?: Maybe<User>;
  displayVcf?: Maybe<Scalars['Boolean']>;
  /** Get the document in other stages */
  documentInStages: Array<Profile>;
  email?: Maybe<Scalars['String']>;
  epkLink?: Maybe<Scalars['String']>;
  externalLink?: Maybe<Scalars['String']>;
  facebookLink?: Maybe<Scalars['String']>;
  fullBio?: Maybe<RichText>;
  heroImage?: Maybe<Asset>;
  /** List of Profile versions */
  history: Array<Version>;
  iFrame?: Maybe<Scalars['String']>;
  /** The unique identifier */
  id: Scalars['ID'];
  imageGallery: Array<Asset>;
  instagramLink?: Maybe<Scalars['String']>;
  linkedinLink?: Maybe<Scalars['String']>;
  miniBio?: Maybe<Scalars['String']>;
  name?: Maybe<Scalars['String']>;
  order?: Maybe<Scalars['Int']>;
  pandoraLink?: Maybe<Scalars['String']>;
  phoneNumber?: Maybe<Scalars['String']>;
  portfolioGallery: Array<Asset>;
  primaryProfile?: Maybe<Scalars['Boolean']>;
  profileJson?: Maybe<Scalars['Json']>;
  profileLogo?: Maybe<Asset>;
  profilePageLayoutStyle?: Maybe<ProfilePageLayoutStyle>;
  profileSlug?: Maybe<Scalars['String']>;
  profileType: ProfilesSelect;
  /** The time the document was published. Null on documents in draft stage. */
  publishedAt?: Maybe<Scalars['DateTime']>;
  /** User that last published this document */
  publishedBy?: Maybe<User>;
  role?: Maybe<Scalars['String']>;
  scheduledIn: Array<ScheduledOperation>;
  snapchatLink?: Maybe<Scalars['String']>;
  soundcloudLink?: Maybe<Scalars['String']>;
  spotifyLink?: Maybe<Scalars['String']>;
  /** System stage field */
  stage: Stage;
  threadsLink?: Maybe<Scalars['String']>;
  tikTokLink?: Maybe<Scalars['String']>;
  tourWidgetiFrame?: Maybe<Scalars['String']>;
  twitterLink?: Maybe<Scalars['String']>;
  /** The time the document was updated */
  updatedAt: Scalars['DateTime'];
  /** User that last updated this document */
  updatedBy?: Maybe<User>;
  videoBox: Array<VideoBox>;
  websiteLink?: Maybe<Scalars['String']>;
  youtubeLink?: Maybe<Scalars['String']>;
};


export type ProfileAvatarImageArgs = {
  forceParentLocale?: InputMaybe<Scalars['Boolean']>;
  locales?: InputMaybe<Array<Locale>>;
};


export type ProfileCreatedByArgs = {
  forceParentLocale?: InputMaybe<Scalars['Boolean']>;
  locales?: InputMaybe<Array<Locale>>;
};


export type ProfileDocumentInStagesArgs = {
  includeCurrent?: Scalars['Boolean'];
  inheritLocale?: Scalars['Boolean'];
  stages?: Array<Stage>;
};


export type ProfileHeroImageArgs = {
  forceParentLocale?: InputMaybe<Scalars['Boolean']>;
  locales?: InputMaybe<Array<Locale>>;
};


export type ProfileHistoryArgs = {
  limit?: Scalars['Int'];
  skip?: Scalars['Int'];
  stageOverride?: InputMaybe<Stage>;
};


export type ProfileImageGalleryArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  forceParentLocale?: InputMaybe<Scalars['Boolean']>;
  last?: InputMaybe<Scalars['Int']>;
  locales?: InputMaybe<Array<Locale>>;
  orderBy?: InputMaybe<AssetOrderByInput>;
  skip?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<AssetWhereInput>;
};


export type ProfilePortfolioGalleryArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  forceParentLocale?: InputMaybe<Scalars['Boolean']>;
  last?: InputMaybe<Scalars['Int']>;
  locales?: InputMaybe<Array<Locale>>;
  orderBy?: InputMaybe<AssetOrderByInput>;
  skip?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<AssetWhereInput>;
};


export type ProfileProfileLogoArgs = {
  forceParentLocale?: InputMaybe<Scalars['Boolean']>;
  locales?: InputMaybe<Array<Locale>>;
};


export type ProfilePublishedByArgs = {
  forceParentLocale?: InputMaybe<Scalars['Boolean']>;
  locales?: InputMaybe<Array<Locale>>;
};


export type ProfileScheduledInArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  forceParentLocale?: InputMaybe<Scalars['Boolean']>;
  last?: InputMaybe<Scalars['Int']>;
  locales?: InputMaybe<Array<Locale>>;
  skip?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<ScheduledOperationWhereInput>;
};


export type ProfileUpdatedByArgs = {
  forceParentLocale?: InputMaybe<Scalars['Boolean']>;
  locales?: InputMaybe<Array<Locale>>;
};


export type ProfileVideoBoxArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  forceParentLocale?: InputMaybe<Scalars['Boolean']>;
  last?: InputMaybe<Scalars['Int']>;
  locales?: InputMaybe<Array<Locale>>;
  orderBy?: InputMaybe<VideoBoxOrderByInput>;
  skip?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<VideoBoxWhereInput>;
};

export type ProfileConnectInput = {
  /** Allow to specify document position in list of connected documents, will default to appending at end of list */
  position?: InputMaybe<ConnectPositionInput>;
  /** Document to connect */
  where: ProfileWhereUniqueInput;
};

/** A connection to a list of items. */
export type ProfileConnection = {
  __typename?: 'ProfileConnection';
  aggregate: Aggregate;
  /** A list of edges. */
  edges: Array<ProfileEdge>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
};

export type ProfileCreateInput = {
  appleMusicLink?: InputMaybe<Scalars['String']>;
  avatarImage?: InputMaybe<AssetCreateOneInlineInput>;
  bandsInTownKey?: InputMaybe<Scalars['String']>;
  calendlyLink?: InputMaybe<Scalars['String']>;
  contactQuery?: InputMaybe<Array<ContactQueries>>;
  createdAt?: InputMaybe<Scalars['DateTime']>;
  displayVcf?: InputMaybe<Scalars['Boolean']>;
  email?: InputMaybe<Scalars['String']>;
  epkLink?: InputMaybe<Scalars['String']>;
  externalLink?: InputMaybe<Scalars['String']>;
  facebookLink?: InputMaybe<Scalars['String']>;
  fullBio?: InputMaybe<Scalars['RichTextAST']>;
  heroImage?: InputMaybe<AssetCreateOneInlineInput>;
  iFrame?: InputMaybe<Scalars['String']>;
  imageGallery?: InputMaybe<AssetCreateManyInlineInput>;
  instagramLink?: InputMaybe<Scalars['String']>;
  linkedinLink?: InputMaybe<Scalars['String']>;
  miniBio?: InputMaybe<Scalars['String']>;
  name?: InputMaybe<Scalars['String']>;
  order?: InputMaybe<Scalars['Int']>;
  pandoraLink?: InputMaybe<Scalars['String']>;
  phoneNumber?: InputMaybe<Scalars['String']>;
  portfolioGallery?: InputMaybe<AssetCreateManyInlineInput>;
  primaryProfile?: InputMaybe<Scalars['Boolean']>;
  profileJson?: InputMaybe<Scalars['Json']>;
  profileLogo?: InputMaybe<AssetCreateOneInlineInput>;
  profilePageLayoutStyle?: InputMaybe<ProfilePageLayoutStyle>;
  profileSlug?: InputMaybe<Scalars['String']>;
  profileType: ProfilesSelect;
  role?: InputMaybe<Scalars['String']>;
  snapchatLink?: InputMaybe<Scalars['String']>;
  soundcloudLink?: InputMaybe<Scalars['String']>;
  spotifyLink?: InputMaybe<Scalars['String']>;
  threadsLink?: InputMaybe<Scalars['String']>;
  tikTokLink?: InputMaybe<Scalars['String']>;
  tourWidgetiFrame?: InputMaybe<Scalars['String']>;
  twitterLink?: InputMaybe<Scalars['String']>;
  updatedAt?: InputMaybe<Scalars['DateTime']>;
  videoBox?: InputMaybe<VideoBoxCreateManyInlineInput>;
  websiteLink?: InputMaybe<Scalars['String']>;
  youtubeLink?: InputMaybe<Scalars['String']>;
};

export type ProfileCreateManyInlineInput = {
  /** Connect multiple existing Profile documents */
  connect?: InputMaybe<Array<ProfileWhereUniqueInput>>;
  /** Create and connect multiple existing Profile documents */
  create?: InputMaybe<Array<ProfileCreateInput>>;
};

export type ProfileCreateOneInlineInput = {
  /** Connect one existing Profile document */
  connect?: InputMaybe<ProfileWhereUniqueInput>;
  /** Create and connect one Profile document */
  create?: InputMaybe<ProfileCreateInput>;
};

/** An edge in a connection. */
export type ProfileEdge = {
  __typename?: 'ProfileEdge';
  /** A cursor for use in pagination. */
  cursor: Scalars['String'];
  /** The item at the end of the edge. */
  node: Profile;
};

export enum ProfileLayoutStyle {
  CardLink = 'cardLink',
  CardModal = 'cardModal',
  Grid = 'grid',
  Offset = 'offset',
  Record = 'record',
  Slider = 'slider',
  Team = 'team',
  Universal = 'universal',
  Vertical = 'vertical'
}

/** Identifies documents */
export type ProfileManyWhereInput = {
  /** Logical AND on all given filters. */
  AND?: InputMaybe<Array<ProfileWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: InputMaybe<Array<ProfileWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: InputMaybe<Array<ProfileWhereInput>>;
  /** Contains search across all appropriate fields. */
  _search?: InputMaybe<Scalars['String']>;
  appleMusicLink?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  appleMusicLink_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  appleMusicLink_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  appleMusicLink_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Any other value that exists and is not equal to the given value. */
  appleMusicLink_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  appleMusicLink_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  appleMusicLink_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  appleMusicLink_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  appleMusicLink_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  appleMusicLink_starts_with?: InputMaybe<Scalars['String']>;
  avatarImage?: InputMaybe<AssetWhereInput>;
  bandsInTownKey?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  bandsInTownKey_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  bandsInTownKey_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  bandsInTownKey_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Any other value that exists and is not equal to the given value. */
  bandsInTownKey_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  bandsInTownKey_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  bandsInTownKey_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  bandsInTownKey_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  bandsInTownKey_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  bandsInTownKey_starts_with?: InputMaybe<Scalars['String']>;
  calendlyLink?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  calendlyLink_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  calendlyLink_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  calendlyLink_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Any other value that exists and is not equal to the given value. */
  calendlyLink_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  calendlyLink_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  calendlyLink_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  calendlyLink_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  calendlyLink_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  calendlyLink_starts_with?: InputMaybe<Scalars['String']>;
  /** Matches if the field array contains *all* items provided to the filter and order does match */
  contactQuery?: InputMaybe<Array<ContactQueries>>;
  /** Matches if the field array contains *all* items provided to the filter */
  contactQuery_contains_all?: InputMaybe<Array<ContactQueries>>;
  /** Matches if the field array does not contain any of the items provided to the filter */
  contactQuery_contains_none?: InputMaybe<Array<ContactQueries>>;
  /** Matches if the field array contains at least one item provided to the filter */
  contactQuery_contains_some?: InputMaybe<Array<ContactQueries>>;
  /** Matches if the field array does not contains *all* items provided to the filter or order does not match */
  contactQuery_not?: InputMaybe<Array<ContactQueries>>;
  createdAt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  createdAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  createdAt_gte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  createdAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  /** All values less than the given value. */
  createdAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  createdAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** Any other value that exists and is not equal to the given value. */
  createdAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not contained in given list. */
  createdAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  createdBy?: InputMaybe<UserWhereInput>;
  displayVcf?: InputMaybe<Scalars['Boolean']>;
  /** Any other value that exists and is not equal to the given value. */
  displayVcf_not?: InputMaybe<Scalars['Boolean']>;
  documentInStages_every?: InputMaybe<ProfileWhereStageInput>;
  documentInStages_none?: InputMaybe<ProfileWhereStageInput>;
  documentInStages_some?: InputMaybe<ProfileWhereStageInput>;
  email?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  email_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  email_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  email_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Any other value that exists and is not equal to the given value. */
  email_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  email_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  email_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  email_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  email_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  email_starts_with?: InputMaybe<Scalars['String']>;
  epkLink?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  epkLink_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  epkLink_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  epkLink_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Any other value that exists and is not equal to the given value. */
  epkLink_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  epkLink_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  epkLink_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  epkLink_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  epkLink_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  epkLink_starts_with?: InputMaybe<Scalars['String']>;
  externalLink?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  externalLink_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  externalLink_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  externalLink_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Any other value that exists and is not equal to the given value. */
  externalLink_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  externalLink_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  externalLink_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  externalLink_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  externalLink_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  externalLink_starts_with?: InputMaybe<Scalars['String']>;
  facebookLink?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  facebookLink_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  facebookLink_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  facebookLink_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Any other value that exists and is not equal to the given value. */
  facebookLink_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  facebookLink_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  facebookLink_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  facebookLink_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  facebookLink_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  facebookLink_starts_with?: InputMaybe<Scalars['String']>;
  heroImage?: InputMaybe<AssetWhereInput>;
  iFrame?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  iFrame_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  iFrame_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  iFrame_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Any other value that exists and is not equal to the given value. */
  iFrame_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  iFrame_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  iFrame_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  iFrame_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  iFrame_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  iFrame_starts_with?: InputMaybe<Scalars['String']>;
  id?: InputMaybe<Scalars['ID']>;
  /** All values containing the given string. */
  id_contains?: InputMaybe<Scalars['ID']>;
  /** All values ending with the given string. */
  id_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are contained in given list. */
  id_in?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** Any other value that exists and is not equal to the given value. */
  id_not?: InputMaybe<Scalars['ID']>;
  /** All values not containing the given string. */
  id_not_contains?: InputMaybe<Scalars['ID']>;
  /** All values not ending with the given string */
  id_not_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are not contained in given list. */
  id_not_in?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** All values not starting with the given string. */
  id_not_starts_with?: InputMaybe<Scalars['ID']>;
  /** All values starting with the given string. */
  id_starts_with?: InputMaybe<Scalars['ID']>;
  imageGallery_every?: InputMaybe<AssetWhereInput>;
  imageGallery_none?: InputMaybe<AssetWhereInput>;
  imageGallery_some?: InputMaybe<AssetWhereInput>;
  instagramLink?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  instagramLink_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  instagramLink_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  instagramLink_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Any other value that exists and is not equal to the given value. */
  instagramLink_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  instagramLink_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  instagramLink_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  instagramLink_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  instagramLink_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  instagramLink_starts_with?: InputMaybe<Scalars['String']>;
  linkedinLink?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  linkedinLink_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  linkedinLink_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  linkedinLink_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Any other value that exists and is not equal to the given value. */
  linkedinLink_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  linkedinLink_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  linkedinLink_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  linkedinLink_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  linkedinLink_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  linkedinLink_starts_with?: InputMaybe<Scalars['String']>;
  miniBio?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  miniBio_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  miniBio_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  miniBio_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Any other value that exists and is not equal to the given value. */
  miniBio_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  miniBio_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  miniBio_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  miniBio_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  miniBio_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  miniBio_starts_with?: InputMaybe<Scalars['String']>;
  name?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  name_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  name_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  name_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Any other value that exists and is not equal to the given value. */
  name_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  name_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  name_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  name_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  name_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  name_starts_with?: InputMaybe<Scalars['String']>;
  order?: InputMaybe<Scalars['Int']>;
  /** All values greater than the given value. */
  order_gt?: InputMaybe<Scalars['Int']>;
  /** All values greater than or equal the given value. */
  order_gte?: InputMaybe<Scalars['Int']>;
  /** All values that are contained in given list. */
  order_in?: InputMaybe<Array<InputMaybe<Scalars['Int']>>>;
  /** All values less than the given value. */
  order_lt?: InputMaybe<Scalars['Int']>;
  /** All values less than or equal the given value. */
  order_lte?: InputMaybe<Scalars['Int']>;
  /** Any other value that exists and is not equal to the given value. */
  order_not?: InputMaybe<Scalars['Int']>;
  /** All values that are not contained in given list. */
  order_not_in?: InputMaybe<Array<InputMaybe<Scalars['Int']>>>;
  pandoraLink?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  pandoraLink_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  pandoraLink_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  pandoraLink_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Any other value that exists and is not equal to the given value. */
  pandoraLink_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  pandoraLink_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  pandoraLink_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  pandoraLink_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  pandoraLink_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  pandoraLink_starts_with?: InputMaybe<Scalars['String']>;
  phoneNumber?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  phoneNumber_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  phoneNumber_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  phoneNumber_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Any other value that exists and is not equal to the given value. */
  phoneNumber_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  phoneNumber_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  phoneNumber_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  phoneNumber_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  phoneNumber_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  phoneNumber_starts_with?: InputMaybe<Scalars['String']>;
  portfolioGallery_every?: InputMaybe<AssetWhereInput>;
  portfolioGallery_none?: InputMaybe<AssetWhereInput>;
  portfolioGallery_some?: InputMaybe<AssetWhereInput>;
  primaryProfile?: InputMaybe<Scalars['Boolean']>;
  /** Any other value that exists and is not equal to the given value. */
  primaryProfile_not?: InputMaybe<Scalars['Boolean']>;
  /** All values containing the given json path. */
  profileJson_json_path_exists?: InputMaybe<Scalars['String']>;
  /**
   * Recursively tries to find the provided JSON scalar value inside the field.
   * It does use an exact match when comparing values.
   * If you pass `null` as value the filter will be ignored.
   * Note: This filter fails if you try to look for a non scalar JSON value!
   */
  profileJson_value_recursive?: InputMaybe<Scalars['Json']>;
  profileLogo?: InputMaybe<AssetWhereInput>;
  profilePageLayoutStyle?: InputMaybe<ProfilePageLayoutStyle>;
  /** All values that are contained in given list. */
  profilePageLayoutStyle_in?: InputMaybe<Array<InputMaybe<ProfilePageLayoutStyle>>>;
  /** Any other value that exists and is not equal to the given value. */
  profilePageLayoutStyle_not?: InputMaybe<ProfilePageLayoutStyle>;
  /** All values that are not contained in given list. */
  profilePageLayoutStyle_not_in?: InputMaybe<Array<InputMaybe<ProfilePageLayoutStyle>>>;
  profileSlug?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  profileSlug_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  profileSlug_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  profileSlug_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Any other value that exists and is not equal to the given value. */
  profileSlug_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  profileSlug_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  profileSlug_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  profileSlug_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  profileSlug_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  profileSlug_starts_with?: InputMaybe<Scalars['String']>;
  profileType?: InputMaybe<ProfilesSelect>;
  /** All values that are contained in given list. */
  profileType_in?: InputMaybe<Array<InputMaybe<ProfilesSelect>>>;
  /** Any other value that exists and is not equal to the given value. */
  profileType_not?: InputMaybe<ProfilesSelect>;
  /** All values that are not contained in given list. */
  profileType_not_in?: InputMaybe<Array<InputMaybe<ProfilesSelect>>>;
  publishedAt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  publishedAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  publishedAt_gte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  publishedAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  /** All values less than the given value. */
  publishedAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  publishedAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** Any other value that exists and is not equal to the given value. */
  publishedAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not contained in given list. */
  publishedAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  publishedBy?: InputMaybe<UserWhereInput>;
  role?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  role_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  role_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  role_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Any other value that exists and is not equal to the given value. */
  role_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  role_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  role_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  role_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  role_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  role_starts_with?: InputMaybe<Scalars['String']>;
  scheduledIn_every?: InputMaybe<ScheduledOperationWhereInput>;
  scheduledIn_none?: InputMaybe<ScheduledOperationWhereInput>;
  scheduledIn_some?: InputMaybe<ScheduledOperationWhereInput>;
  snapchatLink?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  snapchatLink_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  snapchatLink_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  snapchatLink_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Any other value that exists and is not equal to the given value. */
  snapchatLink_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  snapchatLink_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  snapchatLink_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  snapchatLink_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  snapchatLink_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  snapchatLink_starts_with?: InputMaybe<Scalars['String']>;
  soundcloudLink?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  soundcloudLink_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  soundcloudLink_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  soundcloudLink_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Any other value that exists and is not equal to the given value. */
  soundcloudLink_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  soundcloudLink_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  soundcloudLink_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  soundcloudLink_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  soundcloudLink_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  soundcloudLink_starts_with?: InputMaybe<Scalars['String']>;
  spotifyLink?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  spotifyLink_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  spotifyLink_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  spotifyLink_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Any other value that exists and is not equal to the given value. */
  spotifyLink_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  spotifyLink_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  spotifyLink_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  spotifyLink_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  spotifyLink_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  spotifyLink_starts_with?: InputMaybe<Scalars['String']>;
  threadsLink?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  threadsLink_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  threadsLink_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  threadsLink_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Any other value that exists and is not equal to the given value. */
  threadsLink_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  threadsLink_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  threadsLink_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  threadsLink_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  threadsLink_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  threadsLink_starts_with?: InputMaybe<Scalars['String']>;
  tikTokLink?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  tikTokLink_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  tikTokLink_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  tikTokLink_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Any other value that exists and is not equal to the given value. */
  tikTokLink_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  tikTokLink_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  tikTokLink_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  tikTokLink_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  tikTokLink_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  tikTokLink_starts_with?: InputMaybe<Scalars['String']>;
  tourWidgetiFrame?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  tourWidgetiFrame_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  tourWidgetiFrame_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  tourWidgetiFrame_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Any other value that exists and is not equal to the given value. */
  tourWidgetiFrame_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  tourWidgetiFrame_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  tourWidgetiFrame_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  tourWidgetiFrame_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  tourWidgetiFrame_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  tourWidgetiFrame_starts_with?: InputMaybe<Scalars['String']>;
  twitterLink?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  twitterLink_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  twitterLink_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  twitterLink_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Any other value that exists and is not equal to the given value. */
  twitterLink_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  twitterLink_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  twitterLink_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  twitterLink_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  twitterLink_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  twitterLink_starts_with?: InputMaybe<Scalars['String']>;
  updatedAt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  updatedAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  updatedAt_gte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  updatedAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  /** All values less than the given value. */
  updatedAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  updatedAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** Any other value that exists and is not equal to the given value. */
  updatedAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not contained in given list. */
  updatedAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  updatedBy?: InputMaybe<UserWhereInput>;
  videoBox_every?: InputMaybe<VideoBoxWhereInput>;
  videoBox_none?: InputMaybe<VideoBoxWhereInput>;
  videoBox_some?: InputMaybe<VideoBoxWhereInput>;
  websiteLink?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  websiteLink_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  websiteLink_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  websiteLink_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Any other value that exists and is not equal to the given value. */
  websiteLink_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  websiteLink_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  websiteLink_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  websiteLink_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  websiteLink_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  websiteLink_starts_with?: InputMaybe<Scalars['String']>;
  youtubeLink?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  youtubeLink_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  youtubeLink_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  youtubeLink_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Any other value that exists and is not equal to the given value. */
  youtubeLink_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  youtubeLink_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  youtubeLink_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  youtubeLink_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  youtubeLink_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  youtubeLink_starts_with?: InputMaybe<Scalars['String']>;
};

export enum ProfileOrderByInput {
  AppleMusicLinkAsc = 'appleMusicLink_ASC',
  AppleMusicLinkDesc = 'appleMusicLink_DESC',
  BandsInTownKeyAsc = 'bandsInTownKey_ASC',
  BandsInTownKeyDesc = 'bandsInTownKey_DESC',
  CalendlyLinkAsc = 'calendlyLink_ASC',
  CalendlyLinkDesc = 'calendlyLink_DESC',
  ContactQueryAsc = 'contactQuery_ASC',
  ContactQueryDesc = 'contactQuery_DESC',
  CreatedAtAsc = 'createdAt_ASC',
  CreatedAtDesc = 'createdAt_DESC',
  DisplayVcfAsc = 'displayVcf_ASC',
  DisplayVcfDesc = 'displayVcf_DESC',
  EmailAsc = 'email_ASC',
  EmailDesc = 'email_DESC',
  EpkLinkAsc = 'epkLink_ASC',
  EpkLinkDesc = 'epkLink_DESC',
  ExternalLinkAsc = 'externalLink_ASC',
  ExternalLinkDesc = 'externalLink_DESC',
  FacebookLinkAsc = 'facebookLink_ASC',
  FacebookLinkDesc = 'facebookLink_DESC',
  IFrameAsc = 'iFrame_ASC',
  IFrameDesc = 'iFrame_DESC',
  IdAsc = 'id_ASC',
  IdDesc = 'id_DESC',
  InstagramLinkAsc = 'instagramLink_ASC',
  InstagramLinkDesc = 'instagramLink_DESC',
  LinkedinLinkAsc = 'linkedinLink_ASC',
  LinkedinLinkDesc = 'linkedinLink_DESC',
  MiniBioAsc = 'miniBio_ASC',
  MiniBioDesc = 'miniBio_DESC',
  NameAsc = 'name_ASC',
  NameDesc = 'name_DESC',
  OrderAsc = 'order_ASC',
  OrderDesc = 'order_DESC',
  PandoraLinkAsc = 'pandoraLink_ASC',
  PandoraLinkDesc = 'pandoraLink_DESC',
  PhoneNumberAsc = 'phoneNumber_ASC',
  PhoneNumberDesc = 'phoneNumber_DESC',
  PrimaryProfileAsc = 'primaryProfile_ASC',
  PrimaryProfileDesc = 'primaryProfile_DESC',
  ProfilePageLayoutStyleAsc = 'profilePageLayoutStyle_ASC',
  ProfilePageLayoutStyleDesc = 'profilePageLayoutStyle_DESC',
  ProfileSlugAsc = 'profileSlug_ASC',
  ProfileSlugDesc = 'profileSlug_DESC',
  ProfileTypeAsc = 'profileType_ASC',
  ProfileTypeDesc = 'profileType_DESC',
  PublishedAtAsc = 'publishedAt_ASC',
  PublishedAtDesc = 'publishedAt_DESC',
  RoleAsc = 'role_ASC',
  RoleDesc = 'role_DESC',
  SnapchatLinkAsc = 'snapchatLink_ASC',
  SnapchatLinkDesc = 'snapchatLink_DESC',
  SoundcloudLinkAsc = 'soundcloudLink_ASC',
  SoundcloudLinkDesc = 'soundcloudLink_DESC',
  SpotifyLinkAsc = 'spotifyLink_ASC',
  SpotifyLinkDesc = 'spotifyLink_DESC',
  ThreadsLinkAsc = 'threadsLink_ASC',
  ThreadsLinkDesc = 'threadsLink_DESC',
  TikTokLinkAsc = 'tikTokLink_ASC',
  TikTokLinkDesc = 'tikTokLink_DESC',
  TourWidgetiFrameAsc = 'tourWidgetiFrame_ASC',
  TourWidgetiFrameDesc = 'tourWidgetiFrame_DESC',
  TwitterLinkAsc = 'twitterLink_ASC',
  TwitterLinkDesc = 'twitterLink_DESC',
  UpdatedAtAsc = 'updatedAt_ASC',
  UpdatedAtDesc = 'updatedAt_DESC',
  WebsiteLinkAsc = 'websiteLink_ASC',
  WebsiteLinkDesc = 'websiteLink_DESC',
  YoutubeLinkAsc = 'youtubeLink_ASC',
  YoutubeLinkDesc = 'youtubeLink_DESC'
}

export enum ProfilePageLayoutStyle {
  Minimal = 'minimal',
  Modal = 'modal',
  Music = 'music',
  MusicThree = 'musicThree',
  MusicTwo = 'musicTwo'
}

export type ProfileUpdateInput = {
  appleMusicLink?: InputMaybe<Scalars['String']>;
  avatarImage?: InputMaybe<AssetUpdateOneInlineInput>;
  bandsInTownKey?: InputMaybe<Scalars['String']>;
  calendlyLink?: InputMaybe<Scalars['String']>;
  contactQuery?: InputMaybe<Array<ContactQueries>>;
  displayVcf?: InputMaybe<Scalars['Boolean']>;
  email?: InputMaybe<Scalars['String']>;
  epkLink?: InputMaybe<Scalars['String']>;
  externalLink?: InputMaybe<Scalars['String']>;
  facebookLink?: InputMaybe<Scalars['String']>;
  fullBio?: InputMaybe<Scalars['RichTextAST']>;
  heroImage?: InputMaybe<AssetUpdateOneInlineInput>;
  iFrame?: InputMaybe<Scalars['String']>;
  imageGallery?: InputMaybe<AssetUpdateManyInlineInput>;
  instagramLink?: InputMaybe<Scalars['String']>;
  linkedinLink?: InputMaybe<Scalars['String']>;
  miniBio?: InputMaybe<Scalars['String']>;
  name?: InputMaybe<Scalars['String']>;
  order?: InputMaybe<Scalars['Int']>;
  pandoraLink?: InputMaybe<Scalars['String']>;
  phoneNumber?: InputMaybe<Scalars['String']>;
  portfolioGallery?: InputMaybe<AssetUpdateManyInlineInput>;
  primaryProfile?: InputMaybe<Scalars['Boolean']>;
  profileJson?: InputMaybe<Scalars['Json']>;
  profileLogo?: InputMaybe<AssetUpdateOneInlineInput>;
  profilePageLayoutStyle?: InputMaybe<ProfilePageLayoutStyle>;
  profileSlug?: InputMaybe<Scalars['String']>;
  profileType?: InputMaybe<ProfilesSelect>;
  role?: InputMaybe<Scalars['String']>;
  snapchatLink?: InputMaybe<Scalars['String']>;
  soundcloudLink?: InputMaybe<Scalars['String']>;
  spotifyLink?: InputMaybe<Scalars['String']>;
  threadsLink?: InputMaybe<Scalars['String']>;
  tikTokLink?: InputMaybe<Scalars['String']>;
  tourWidgetiFrame?: InputMaybe<Scalars['String']>;
  twitterLink?: InputMaybe<Scalars['String']>;
  videoBox?: InputMaybe<VideoBoxUpdateManyInlineInput>;
  websiteLink?: InputMaybe<Scalars['String']>;
  youtubeLink?: InputMaybe<Scalars['String']>;
};

export type ProfileUpdateManyInlineInput = {
  /** Connect multiple existing Profile documents */
  connect?: InputMaybe<Array<ProfileConnectInput>>;
  /** Create and connect multiple Profile documents */
  create?: InputMaybe<Array<ProfileCreateInput>>;
  /** Delete multiple Profile documents */
  delete?: InputMaybe<Array<ProfileWhereUniqueInput>>;
  /** Disconnect multiple Profile documents */
  disconnect?: InputMaybe<Array<ProfileWhereUniqueInput>>;
  /** Override currently-connected documents with multiple existing Profile documents */
  set?: InputMaybe<Array<ProfileWhereUniqueInput>>;
  /** Update multiple Profile documents */
  update?: InputMaybe<Array<ProfileUpdateWithNestedWhereUniqueInput>>;
  /** Upsert multiple Profile documents */
  upsert?: InputMaybe<Array<ProfileUpsertWithNestedWhereUniqueInput>>;
};

export type ProfileUpdateManyInput = {
  appleMusicLink?: InputMaybe<Scalars['String']>;
  bandsInTownKey?: InputMaybe<Scalars['String']>;
  calendlyLink?: InputMaybe<Scalars['String']>;
  contactQuery?: InputMaybe<Array<ContactQueries>>;
  displayVcf?: InputMaybe<Scalars['Boolean']>;
  email?: InputMaybe<Scalars['String']>;
  epkLink?: InputMaybe<Scalars['String']>;
  externalLink?: InputMaybe<Scalars['String']>;
  facebookLink?: InputMaybe<Scalars['String']>;
  fullBio?: InputMaybe<Scalars['RichTextAST']>;
  iFrame?: InputMaybe<Scalars['String']>;
  instagramLink?: InputMaybe<Scalars['String']>;
  linkedinLink?: InputMaybe<Scalars['String']>;
  miniBio?: InputMaybe<Scalars['String']>;
  name?: InputMaybe<Scalars['String']>;
  order?: InputMaybe<Scalars['Int']>;
  pandoraLink?: InputMaybe<Scalars['String']>;
  phoneNumber?: InputMaybe<Scalars['String']>;
  primaryProfile?: InputMaybe<Scalars['Boolean']>;
  profileJson?: InputMaybe<Scalars['Json']>;
  profilePageLayoutStyle?: InputMaybe<ProfilePageLayoutStyle>;
  profileType?: InputMaybe<ProfilesSelect>;
  role?: InputMaybe<Scalars['String']>;
  snapchatLink?: InputMaybe<Scalars['String']>;
  soundcloudLink?: InputMaybe<Scalars['String']>;
  spotifyLink?: InputMaybe<Scalars['String']>;
  threadsLink?: InputMaybe<Scalars['String']>;
  tikTokLink?: InputMaybe<Scalars['String']>;
  tourWidgetiFrame?: InputMaybe<Scalars['String']>;
  twitterLink?: InputMaybe<Scalars['String']>;
  websiteLink?: InputMaybe<Scalars['String']>;
  youtubeLink?: InputMaybe<Scalars['String']>;
};

export type ProfileUpdateManyWithNestedWhereInput = {
  /** Update many input */
  data: ProfileUpdateManyInput;
  /** Document search */
  where: ProfileWhereInput;
};

export type ProfileUpdateOneInlineInput = {
  /** Connect existing Profile document */
  connect?: InputMaybe<ProfileWhereUniqueInput>;
  /** Create and connect one Profile document */
  create?: InputMaybe<ProfileCreateInput>;
  /** Delete currently connected Profile document */
  delete?: InputMaybe<Scalars['Boolean']>;
  /** Disconnect currently connected Profile document */
  disconnect?: InputMaybe<Scalars['Boolean']>;
  /** Update single Profile document */
  update?: InputMaybe<ProfileUpdateWithNestedWhereUniqueInput>;
  /** Upsert single Profile document */
  upsert?: InputMaybe<ProfileUpsertWithNestedWhereUniqueInput>;
};

export type ProfileUpdateWithNestedWhereUniqueInput = {
  /** Document to update */
  data: ProfileUpdateInput;
  /** Unique document search */
  where: ProfileWhereUniqueInput;
};

export type ProfileUpsertInput = {
  /** Create document if it didn't exist */
  create: ProfileCreateInput;
  /** Update document if it exists */
  update: ProfileUpdateInput;
};

export type ProfileUpsertWithNestedWhereUniqueInput = {
  /** Upsert data */
  data: ProfileUpsertInput;
  /** Unique document search */
  where: ProfileWhereUniqueInput;
};

/** This contains a set of filters that can be used to compare values internally */
export type ProfileWhereComparatorInput = {
  /** This field can be used to request to check if the entry is outdated by internal comparison */
  outdated_to?: InputMaybe<Scalars['Boolean']>;
};

/** Identifies documents */
export type ProfileWhereInput = {
  /** Logical AND on all given filters. */
  AND?: InputMaybe<Array<ProfileWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: InputMaybe<Array<ProfileWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: InputMaybe<Array<ProfileWhereInput>>;
  /** Contains search across all appropriate fields. */
  _search?: InputMaybe<Scalars['String']>;
  appleMusicLink?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  appleMusicLink_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  appleMusicLink_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  appleMusicLink_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Any other value that exists and is not equal to the given value. */
  appleMusicLink_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  appleMusicLink_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  appleMusicLink_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  appleMusicLink_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  appleMusicLink_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  appleMusicLink_starts_with?: InputMaybe<Scalars['String']>;
  avatarImage?: InputMaybe<AssetWhereInput>;
  bandsInTownKey?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  bandsInTownKey_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  bandsInTownKey_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  bandsInTownKey_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Any other value that exists and is not equal to the given value. */
  bandsInTownKey_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  bandsInTownKey_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  bandsInTownKey_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  bandsInTownKey_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  bandsInTownKey_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  bandsInTownKey_starts_with?: InputMaybe<Scalars['String']>;
  calendlyLink?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  calendlyLink_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  calendlyLink_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  calendlyLink_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Any other value that exists and is not equal to the given value. */
  calendlyLink_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  calendlyLink_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  calendlyLink_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  calendlyLink_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  calendlyLink_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  calendlyLink_starts_with?: InputMaybe<Scalars['String']>;
  /** Matches if the field array contains *all* items provided to the filter and order does match */
  contactQuery?: InputMaybe<Array<ContactQueries>>;
  /** Matches if the field array contains *all* items provided to the filter */
  contactQuery_contains_all?: InputMaybe<Array<ContactQueries>>;
  /** Matches if the field array does not contain any of the items provided to the filter */
  contactQuery_contains_none?: InputMaybe<Array<ContactQueries>>;
  /** Matches if the field array contains at least one item provided to the filter */
  contactQuery_contains_some?: InputMaybe<Array<ContactQueries>>;
  /** Matches if the field array does not contains *all* items provided to the filter or order does not match */
  contactQuery_not?: InputMaybe<Array<ContactQueries>>;
  createdAt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  createdAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  createdAt_gte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  createdAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  /** All values less than the given value. */
  createdAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  createdAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** Any other value that exists and is not equal to the given value. */
  createdAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not contained in given list. */
  createdAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  createdBy?: InputMaybe<UserWhereInput>;
  displayVcf?: InputMaybe<Scalars['Boolean']>;
  /** Any other value that exists and is not equal to the given value. */
  displayVcf_not?: InputMaybe<Scalars['Boolean']>;
  documentInStages_every?: InputMaybe<ProfileWhereStageInput>;
  documentInStages_none?: InputMaybe<ProfileWhereStageInput>;
  documentInStages_some?: InputMaybe<ProfileWhereStageInput>;
  email?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  email_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  email_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  email_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Any other value that exists and is not equal to the given value. */
  email_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  email_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  email_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  email_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  email_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  email_starts_with?: InputMaybe<Scalars['String']>;
  epkLink?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  epkLink_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  epkLink_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  epkLink_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Any other value that exists and is not equal to the given value. */
  epkLink_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  epkLink_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  epkLink_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  epkLink_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  epkLink_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  epkLink_starts_with?: InputMaybe<Scalars['String']>;
  externalLink?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  externalLink_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  externalLink_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  externalLink_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Any other value that exists and is not equal to the given value. */
  externalLink_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  externalLink_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  externalLink_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  externalLink_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  externalLink_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  externalLink_starts_with?: InputMaybe<Scalars['String']>;
  facebookLink?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  facebookLink_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  facebookLink_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  facebookLink_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Any other value that exists and is not equal to the given value. */
  facebookLink_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  facebookLink_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  facebookLink_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  facebookLink_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  facebookLink_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  facebookLink_starts_with?: InputMaybe<Scalars['String']>;
  heroImage?: InputMaybe<AssetWhereInput>;
  iFrame?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  iFrame_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  iFrame_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  iFrame_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Any other value that exists and is not equal to the given value. */
  iFrame_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  iFrame_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  iFrame_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  iFrame_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  iFrame_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  iFrame_starts_with?: InputMaybe<Scalars['String']>;
  id?: InputMaybe<Scalars['ID']>;
  /** All values containing the given string. */
  id_contains?: InputMaybe<Scalars['ID']>;
  /** All values ending with the given string. */
  id_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are contained in given list. */
  id_in?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** Any other value that exists and is not equal to the given value. */
  id_not?: InputMaybe<Scalars['ID']>;
  /** All values not containing the given string. */
  id_not_contains?: InputMaybe<Scalars['ID']>;
  /** All values not ending with the given string */
  id_not_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are not contained in given list. */
  id_not_in?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** All values not starting with the given string. */
  id_not_starts_with?: InputMaybe<Scalars['ID']>;
  /** All values starting with the given string. */
  id_starts_with?: InputMaybe<Scalars['ID']>;
  imageGallery_every?: InputMaybe<AssetWhereInput>;
  imageGallery_none?: InputMaybe<AssetWhereInput>;
  imageGallery_some?: InputMaybe<AssetWhereInput>;
  instagramLink?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  instagramLink_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  instagramLink_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  instagramLink_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Any other value that exists and is not equal to the given value. */
  instagramLink_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  instagramLink_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  instagramLink_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  instagramLink_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  instagramLink_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  instagramLink_starts_with?: InputMaybe<Scalars['String']>;
  linkedinLink?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  linkedinLink_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  linkedinLink_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  linkedinLink_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Any other value that exists and is not equal to the given value. */
  linkedinLink_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  linkedinLink_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  linkedinLink_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  linkedinLink_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  linkedinLink_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  linkedinLink_starts_with?: InputMaybe<Scalars['String']>;
  miniBio?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  miniBio_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  miniBio_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  miniBio_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Any other value that exists and is not equal to the given value. */
  miniBio_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  miniBio_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  miniBio_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  miniBio_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  miniBio_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  miniBio_starts_with?: InputMaybe<Scalars['String']>;
  name?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  name_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  name_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  name_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Any other value that exists and is not equal to the given value. */
  name_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  name_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  name_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  name_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  name_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  name_starts_with?: InputMaybe<Scalars['String']>;
  order?: InputMaybe<Scalars['Int']>;
  /** All values greater than the given value. */
  order_gt?: InputMaybe<Scalars['Int']>;
  /** All values greater than or equal the given value. */
  order_gte?: InputMaybe<Scalars['Int']>;
  /** All values that are contained in given list. */
  order_in?: InputMaybe<Array<InputMaybe<Scalars['Int']>>>;
  /** All values less than the given value. */
  order_lt?: InputMaybe<Scalars['Int']>;
  /** All values less than or equal the given value. */
  order_lte?: InputMaybe<Scalars['Int']>;
  /** Any other value that exists and is not equal to the given value. */
  order_not?: InputMaybe<Scalars['Int']>;
  /** All values that are not contained in given list. */
  order_not_in?: InputMaybe<Array<InputMaybe<Scalars['Int']>>>;
  pandoraLink?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  pandoraLink_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  pandoraLink_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  pandoraLink_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Any other value that exists and is not equal to the given value. */
  pandoraLink_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  pandoraLink_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  pandoraLink_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  pandoraLink_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  pandoraLink_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  pandoraLink_starts_with?: InputMaybe<Scalars['String']>;
  phoneNumber?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  phoneNumber_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  phoneNumber_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  phoneNumber_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Any other value that exists and is not equal to the given value. */
  phoneNumber_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  phoneNumber_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  phoneNumber_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  phoneNumber_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  phoneNumber_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  phoneNumber_starts_with?: InputMaybe<Scalars['String']>;
  portfolioGallery_every?: InputMaybe<AssetWhereInput>;
  portfolioGallery_none?: InputMaybe<AssetWhereInput>;
  portfolioGallery_some?: InputMaybe<AssetWhereInput>;
  primaryProfile?: InputMaybe<Scalars['Boolean']>;
  /** Any other value that exists and is not equal to the given value. */
  primaryProfile_not?: InputMaybe<Scalars['Boolean']>;
  /** All values containing the given json path. */
  profileJson_json_path_exists?: InputMaybe<Scalars['String']>;
  /**
   * Recursively tries to find the provided JSON scalar value inside the field.
   * It does use an exact match when comparing values.
   * If you pass `null` as value the filter will be ignored.
   * Note: This filter fails if you try to look for a non scalar JSON value!
   */
  profileJson_value_recursive?: InputMaybe<Scalars['Json']>;
  profileLogo?: InputMaybe<AssetWhereInput>;
  profilePageLayoutStyle?: InputMaybe<ProfilePageLayoutStyle>;
  /** All values that are contained in given list. */
  profilePageLayoutStyle_in?: InputMaybe<Array<InputMaybe<ProfilePageLayoutStyle>>>;
  /** Any other value that exists and is not equal to the given value. */
  profilePageLayoutStyle_not?: InputMaybe<ProfilePageLayoutStyle>;
  /** All values that are not contained in given list. */
  profilePageLayoutStyle_not_in?: InputMaybe<Array<InputMaybe<ProfilePageLayoutStyle>>>;
  profileSlug?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  profileSlug_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  profileSlug_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  profileSlug_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Any other value that exists and is not equal to the given value. */
  profileSlug_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  profileSlug_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  profileSlug_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  profileSlug_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  profileSlug_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  profileSlug_starts_with?: InputMaybe<Scalars['String']>;
  profileType?: InputMaybe<ProfilesSelect>;
  /** All values that are contained in given list. */
  profileType_in?: InputMaybe<Array<InputMaybe<ProfilesSelect>>>;
  /** Any other value that exists and is not equal to the given value. */
  profileType_not?: InputMaybe<ProfilesSelect>;
  /** All values that are not contained in given list. */
  profileType_not_in?: InputMaybe<Array<InputMaybe<ProfilesSelect>>>;
  publishedAt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  publishedAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  publishedAt_gte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  publishedAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  /** All values less than the given value. */
  publishedAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  publishedAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** Any other value that exists and is not equal to the given value. */
  publishedAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not contained in given list. */
  publishedAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  publishedBy?: InputMaybe<UserWhereInput>;
  role?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  role_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  role_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  role_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Any other value that exists and is not equal to the given value. */
  role_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  role_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  role_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  role_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  role_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  role_starts_with?: InputMaybe<Scalars['String']>;
  scheduledIn_every?: InputMaybe<ScheduledOperationWhereInput>;
  scheduledIn_none?: InputMaybe<ScheduledOperationWhereInput>;
  scheduledIn_some?: InputMaybe<ScheduledOperationWhereInput>;
  snapchatLink?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  snapchatLink_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  snapchatLink_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  snapchatLink_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Any other value that exists and is not equal to the given value. */
  snapchatLink_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  snapchatLink_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  snapchatLink_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  snapchatLink_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  snapchatLink_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  snapchatLink_starts_with?: InputMaybe<Scalars['String']>;
  soundcloudLink?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  soundcloudLink_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  soundcloudLink_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  soundcloudLink_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Any other value that exists and is not equal to the given value. */
  soundcloudLink_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  soundcloudLink_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  soundcloudLink_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  soundcloudLink_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  soundcloudLink_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  soundcloudLink_starts_with?: InputMaybe<Scalars['String']>;
  spotifyLink?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  spotifyLink_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  spotifyLink_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  spotifyLink_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Any other value that exists and is not equal to the given value. */
  spotifyLink_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  spotifyLink_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  spotifyLink_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  spotifyLink_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  spotifyLink_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  spotifyLink_starts_with?: InputMaybe<Scalars['String']>;
  threadsLink?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  threadsLink_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  threadsLink_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  threadsLink_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Any other value that exists and is not equal to the given value. */
  threadsLink_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  threadsLink_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  threadsLink_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  threadsLink_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  threadsLink_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  threadsLink_starts_with?: InputMaybe<Scalars['String']>;
  tikTokLink?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  tikTokLink_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  tikTokLink_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  tikTokLink_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Any other value that exists and is not equal to the given value. */
  tikTokLink_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  tikTokLink_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  tikTokLink_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  tikTokLink_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  tikTokLink_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  tikTokLink_starts_with?: InputMaybe<Scalars['String']>;
  tourWidgetiFrame?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  tourWidgetiFrame_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  tourWidgetiFrame_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  tourWidgetiFrame_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Any other value that exists and is not equal to the given value. */
  tourWidgetiFrame_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  tourWidgetiFrame_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  tourWidgetiFrame_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  tourWidgetiFrame_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  tourWidgetiFrame_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  tourWidgetiFrame_starts_with?: InputMaybe<Scalars['String']>;
  twitterLink?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  twitterLink_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  twitterLink_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  twitterLink_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Any other value that exists and is not equal to the given value. */
  twitterLink_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  twitterLink_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  twitterLink_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  twitterLink_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  twitterLink_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  twitterLink_starts_with?: InputMaybe<Scalars['String']>;
  updatedAt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  updatedAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  updatedAt_gte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  updatedAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  /** All values less than the given value. */
  updatedAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  updatedAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** Any other value that exists and is not equal to the given value. */
  updatedAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not contained in given list. */
  updatedAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  updatedBy?: InputMaybe<UserWhereInput>;
  videoBox_every?: InputMaybe<VideoBoxWhereInput>;
  videoBox_none?: InputMaybe<VideoBoxWhereInput>;
  videoBox_some?: InputMaybe<VideoBoxWhereInput>;
  websiteLink?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  websiteLink_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  websiteLink_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  websiteLink_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Any other value that exists and is not equal to the given value. */
  websiteLink_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  websiteLink_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  websiteLink_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  websiteLink_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  websiteLink_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  websiteLink_starts_with?: InputMaybe<Scalars['String']>;
  youtubeLink?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  youtubeLink_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  youtubeLink_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  youtubeLink_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Any other value that exists and is not equal to the given value. */
  youtubeLink_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  youtubeLink_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  youtubeLink_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  youtubeLink_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  youtubeLink_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  youtubeLink_starts_with?: InputMaybe<Scalars['String']>;
};

/** The document in stages filter allows specifying a stage entry to cross compare the same document between different stages */
export type ProfileWhereStageInput = {
  /** Logical AND on all given filters. */
  AND?: InputMaybe<Array<ProfileWhereStageInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: InputMaybe<Array<ProfileWhereStageInput>>;
  /** Logical OR on all given filters. */
  OR?: InputMaybe<Array<ProfileWhereStageInput>>;
  /** This field contains fields which can be set as true or false to specify an internal comparison */
  compareWithParent?: InputMaybe<ProfileWhereComparatorInput>;
  /** Specify the stage to compare with */
  stage?: InputMaybe<Stage>;
};

/** References Profile record uniquely */
export type ProfileWhereUniqueInput = {
  id?: InputMaybe<Scalars['ID']>;
  profileSlug?: InputMaybe<Scalars['String']>;
};

export enum ProfilesSelect {
  Admin = 'Admin',
  Artist = 'Artist',
  SecondaryArtist = 'SecondaryArtist',
  Staff = 'Staff',
  Talent = 'Talent'
}

export type PublishLocaleInput = {
  /** Locales to publish */
  locale: Locale;
  /** Stages to publish selected locales to */
  stages: Array<Stage>;
};

export type Query = {
  __typename?: 'Query';
  /** Retrieve a single album */
  album?: Maybe<Album>;
  /** Retrieve document version */
  albumVersion?: Maybe<DocumentVersion>;
  /** Retrieve multiple albums */
  albums: Array<Album>;
  /** Retrieve multiple albums using the Relay connection interface */
  albumsConnection: AlbumConnection;
  /** Retrieve a single asset */
  asset?: Maybe<Asset>;
  /** Retrieve document version */
  assetVersion?: Maybe<DocumentVersion>;
  /** Retrieve multiple assets */
  assets: Array<Asset>;
  /** Retrieve multiple assets using the Relay connection interface */
  assetsConnection: AssetConnection;
  /** Retrieve a single blog */
  blog?: Maybe<Blog>;
  /** Retrieve document version */
  blogVersion?: Maybe<DocumentVersion>;
  /** Retrieve multiple blogs */
  blogs: Array<Blog>;
  /** Retrieve multiple blogs using the Relay connection interface */
  blogsConnection: BlogConnection;
  /** Retrieve a single contact */
  contact?: Maybe<Contact>;
  /** Retrieve document version */
  contactVersion?: Maybe<DocumentVersion>;
  /** Retrieve multiple contacts */
  contacts: Array<Contact>;
  /** Retrieve multiple contacts using the Relay connection interface */
  contactsConnection: ContactConnection;
  /** Fetches an object given its ID */
  entities?: Maybe<Array<Entity>>;
  /** Retrieve a single event */
  event?: Maybe<Event>;
  /** Retrieve document version */
  eventVersion?: Maybe<DocumentVersion>;
  /** Retrieve multiple events */
  events: Array<Event>;
  /** Retrieve multiple events using the Relay connection interface */
  eventsConnection: EventConnection;
  /** Retrieve a single logoTable */
  logoTable?: Maybe<LogoTable>;
  /** Retrieve document version */
  logoTableVersion?: Maybe<DocumentVersion>;
  /** Retrieve multiple logoTables */
  logoTables: Array<LogoTable>;
  /** Retrieve multiple logoTables using the Relay connection interface */
  logoTablesConnection: LogoTableConnection;
  /** Retrieve a single navigation */
  navigation?: Maybe<Navigation>;
  /** Retrieve document version */
  navigationVersion?: Maybe<DocumentVersion>;
  /** Retrieve multiple navigations */
  navigations: Array<Navigation>;
  /** Retrieve multiple navigations using the Relay connection interface */
  navigationsConnection: NavigationConnection;
  /** Fetches an object given its ID */
  node?: Maybe<Node>;
  /** Retrieve a single page */
  page?: Maybe<Page>;
  /** Retrieve document version */
  pageVersion?: Maybe<DocumentVersion>;
  /** Retrieve multiple pages */
  pages: Array<Page>;
  /** Retrieve multiple pages using the Relay connection interface */
  pagesConnection: PageConnection;
  /** Retrieve a single product */
  product?: Maybe<Product>;
  /** Retrieve document version */
  productVersion?: Maybe<DocumentVersion>;
  /** Retrieve multiple products */
  products: Array<Product>;
  /** Retrieve multiple products using the Relay connection interface */
  productsConnection: ProductConnection;
  /** Retrieve a single profile */
  profile?: Maybe<Profile>;
  /** Retrieve document version */
  profileVersion?: Maybe<DocumentVersion>;
  /** Retrieve multiple profiles */
  profiles: Array<Profile>;
  /** Retrieve multiple profiles using the Relay connection interface */
  profilesConnection: ProfileConnection;
  /** Retrieve a single scheduledOperation */
  scheduledOperation?: Maybe<ScheduledOperation>;
  /** Retrieve multiple scheduledOperations */
  scheduledOperations: Array<ScheduledOperation>;
  /** Retrieve multiple scheduledOperations using the Relay connection interface */
  scheduledOperationsConnection: ScheduledOperationConnection;
  /** Retrieve a single scheduledRelease */
  scheduledRelease?: Maybe<ScheduledRelease>;
  /** Retrieve multiple scheduledReleases */
  scheduledReleases: Array<ScheduledRelease>;
  /** Retrieve multiple scheduledReleases using the Relay connection interface */
  scheduledReleasesConnection: ScheduledReleaseConnection;
  /** Retrieve multiple siteLibraries */
  siteLibraries: Array<SiteLibrary>;
  /** Retrieve multiple siteLibraries using the Relay connection interface */
  siteLibrariesConnection: SiteLibraryConnection;
  /** Retrieve a single siteLibrary */
  siteLibrary?: Maybe<SiteLibrary>;
  /** Retrieve document version */
  siteLibraryVersion?: Maybe<DocumentVersion>;
  /** Retrieve a single testimonial */
  testimonial?: Maybe<Testimonial>;
  /** Retrieve document version */
  testimonialVersion?: Maybe<DocumentVersion>;
  /** Retrieve multiple testimonials */
  testimonials: Array<Testimonial>;
  /** Retrieve multiple testimonials using the Relay connection interface */
  testimonialsConnection: TestimonialConnection;
  /** Retrieve a single user */
  user?: Maybe<User>;
  /** Retrieve multiple users */
  users: Array<User>;
  /** Retrieve multiple users using the Relay connection interface */
  usersConnection: UserConnection;
};


export type QueryAlbumArgs = {
  locales?: Array<Locale>;
  stage?: Stage;
  where: AlbumWhereUniqueInput;
};


export type QueryAlbumVersionArgs = {
  where: VersionWhereInput;
};


export type QueryAlbumsArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  locales?: Array<Locale>;
  orderBy?: InputMaybe<AlbumOrderByInput>;
  skip?: InputMaybe<Scalars['Int']>;
  stage?: Stage;
  where?: InputMaybe<AlbumWhereInput>;
};


export type QueryAlbumsConnectionArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  locales?: Array<Locale>;
  orderBy?: InputMaybe<AlbumOrderByInput>;
  skip?: InputMaybe<Scalars['Int']>;
  stage?: Stage;
  where?: InputMaybe<AlbumWhereInput>;
};


export type QueryAssetArgs = {
  locales?: Array<Locale>;
  stage?: Stage;
  where: AssetWhereUniqueInput;
};


export type QueryAssetVersionArgs = {
  where: VersionWhereInput;
};


export type QueryAssetsArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  locales?: Array<Locale>;
  orderBy?: InputMaybe<AssetOrderByInput>;
  skip?: InputMaybe<Scalars['Int']>;
  stage?: Stage;
  where?: InputMaybe<AssetWhereInput>;
};


export type QueryAssetsConnectionArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  locales?: Array<Locale>;
  orderBy?: InputMaybe<AssetOrderByInput>;
  skip?: InputMaybe<Scalars['Int']>;
  stage?: Stage;
  where?: InputMaybe<AssetWhereInput>;
};


export type QueryBlogArgs = {
  locales?: Array<Locale>;
  stage?: Stage;
  where: BlogWhereUniqueInput;
};


export type QueryBlogVersionArgs = {
  where: VersionWhereInput;
};


export type QueryBlogsArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  locales?: Array<Locale>;
  orderBy?: InputMaybe<BlogOrderByInput>;
  skip?: InputMaybe<Scalars['Int']>;
  stage?: Stage;
  where?: InputMaybe<BlogWhereInput>;
};


export type QueryBlogsConnectionArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  locales?: Array<Locale>;
  orderBy?: InputMaybe<BlogOrderByInput>;
  skip?: InputMaybe<Scalars['Int']>;
  stage?: Stage;
  where?: InputMaybe<BlogWhereInput>;
};


export type QueryContactArgs = {
  locales?: Array<Locale>;
  stage?: Stage;
  where: ContactWhereUniqueInput;
};


export type QueryContactVersionArgs = {
  where: VersionWhereInput;
};


export type QueryContactsArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  locales?: Array<Locale>;
  orderBy?: InputMaybe<ContactOrderByInput>;
  skip?: InputMaybe<Scalars['Int']>;
  stage?: Stage;
  where?: InputMaybe<ContactWhereInput>;
};


export type QueryContactsConnectionArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  locales?: Array<Locale>;
  orderBy?: InputMaybe<ContactOrderByInput>;
  skip?: InputMaybe<Scalars['Int']>;
  stage?: Stage;
  where?: InputMaybe<ContactWhereInput>;
};


export type QueryEntitiesArgs = {
  where: Array<EntityWhereInput>;
};


export type QueryEventArgs = {
  locales?: Array<Locale>;
  stage?: Stage;
  where: EventWhereUniqueInput;
};


export type QueryEventVersionArgs = {
  where: VersionWhereInput;
};


export type QueryEventsArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  locales?: Array<Locale>;
  orderBy?: InputMaybe<EventOrderByInput>;
  skip?: InputMaybe<Scalars['Int']>;
  stage?: Stage;
  where?: InputMaybe<EventWhereInput>;
};


export type QueryEventsConnectionArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  locales?: Array<Locale>;
  orderBy?: InputMaybe<EventOrderByInput>;
  skip?: InputMaybe<Scalars['Int']>;
  stage?: Stage;
  where?: InputMaybe<EventWhereInput>;
};


export type QueryLogoTableArgs = {
  locales?: Array<Locale>;
  stage?: Stage;
  where: LogoTableWhereUniqueInput;
};


export type QueryLogoTableVersionArgs = {
  where: VersionWhereInput;
};


export type QueryLogoTablesArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  locales?: Array<Locale>;
  orderBy?: InputMaybe<LogoTableOrderByInput>;
  skip?: InputMaybe<Scalars['Int']>;
  stage?: Stage;
  where?: InputMaybe<LogoTableWhereInput>;
};


export type QueryLogoTablesConnectionArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  locales?: Array<Locale>;
  orderBy?: InputMaybe<LogoTableOrderByInput>;
  skip?: InputMaybe<Scalars['Int']>;
  stage?: Stage;
  where?: InputMaybe<LogoTableWhereInput>;
};


export type QueryNavigationArgs = {
  locales?: Array<Locale>;
  stage?: Stage;
  where: NavigationWhereUniqueInput;
};


export type QueryNavigationVersionArgs = {
  where: VersionWhereInput;
};


export type QueryNavigationsArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  locales?: Array<Locale>;
  orderBy?: InputMaybe<NavigationOrderByInput>;
  skip?: InputMaybe<Scalars['Int']>;
  stage?: Stage;
  where?: InputMaybe<NavigationWhereInput>;
};


export type QueryNavigationsConnectionArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  locales?: Array<Locale>;
  orderBy?: InputMaybe<NavigationOrderByInput>;
  skip?: InputMaybe<Scalars['Int']>;
  stage?: Stage;
  where?: InputMaybe<NavigationWhereInput>;
};


export type QueryNodeArgs = {
  id: Scalars['ID'];
  locales?: Array<Locale>;
  stage?: Stage;
};


export type QueryPageArgs = {
  locales?: Array<Locale>;
  stage?: Stage;
  where: PageWhereUniqueInput;
};


export type QueryPageVersionArgs = {
  where: VersionWhereInput;
};


export type QueryPagesArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  locales?: Array<Locale>;
  orderBy?: InputMaybe<PageOrderByInput>;
  skip?: InputMaybe<Scalars['Int']>;
  stage?: Stage;
  where?: InputMaybe<PageWhereInput>;
};


export type QueryPagesConnectionArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  locales?: Array<Locale>;
  orderBy?: InputMaybe<PageOrderByInput>;
  skip?: InputMaybe<Scalars['Int']>;
  stage?: Stage;
  where?: InputMaybe<PageWhereInput>;
};


export type QueryProductArgs = {
  locales?: Array<Locale>;
  stage?: Stage;
  where: ProductWhereUniqueInput;
};


export type QueryProductVersionArgs = {
  where: VersionWhereInput;
};


export type QueryProductsArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  locales?: Array<Locale>;
  orderBy?: InputMaybe<ProductOrderByInput>;
  skip?: InputMaybe<Scalars['Int']>;
  stage?: Stage;
  where?: InputMaybe<ProductWhereInput>;
};


export type QueryProductsConnectionArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  locales?: Array<Locale>;
  orderBy?: InputMaybe<ProductOrderByInput>;
  skip?: InputMaybe<Scalars['Int']>;
  stage?: Stage;
  where?: InputMaybe<ProductWhereInput>;
};


export type QueryProfileArgs = {
  locales?: Array<Locale>;
  stage?: Stage;
  where: ProfileWhereUniqueInput;
};


export type QueryProfileVersionArgs = {
  where: VersionWhereInput;
};


export type QueryProfilesArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  locales?: Array<Locale>;
  orderBy?: InputMaybe<ProfileOrderByInput>;
  skip?: InputMaybe<Scalars['Int']>;
  stage?: Stage;
  where?: InputMaybe<ProfileWhereInput>;
};


export type QueryProfilesConnectionArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  locales?: Array<Locale>;
  orderBy?: InputMaybe<ProfileOrderByInput>;
  skip?: InputMaybe<Scalars['Int']>;
  stage?: Stage;
  where?: InputMaybe<ProfileWhereInput>;
};


export type QueryScheduledOperationArgs = {
  locales?: Array<Locale>;
  stage?: Stage;
  where: ScheduledOperationWhereUniqueInput;
};


export type QueryScheduledOperationsArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  locales?: Array<Locale>;
  orderBy?: InputMaybe<ScheduledOperationOrderByInput>;
  skip?: InputMaybe<Scalars['Int']>;
  stage?: Stage;
  where?: InputMaybe<ScheduledOperationWhereInput>;
};


export type QueryScheduledOperationsConnectionArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  locales?: Array<Locale>;
  orderBy?: InputMaybe<ScheduledOperationOrderByInput>;
  skip?: InputMaybe<Scalars['Int']>;
  stage?: Stage;
  where?: InputMaybe<ScheduledOperationWhereInput>;
};


export type QueryScheduledReleaseArgs = {
  locales?: Array<Locale>;
  stage?: Stage;
  where: ScheduledReleaseWhereUniqueInput;
};


export type QueryScheduledReleasesArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  locales?: Array<Locale>;
  orderBy?: InputMaybe<ScheduledReleaseOrderByInput>;
  skip?: InputMaybe<Scalars['Int']>;
  stage?: Stage;
  where?: InputMaybe<ScheduledReleaseWhereInput>;
};


export type QueryScheduledReleasesConnectionArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  locales?: Array<Locale>;
  orderBy?: InputMaybe<ScheduledReleaseOrderByInput>;
  skip?: InputMaybe<Scalars['Int']>;
  stage?: Stage;
  where?: InputMaybe<ScheduledReleaseWhereInput>;
};


export type QuerySiteLibrariesArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  locales?: Array<Locale>;
  orderBy?: InputMaybe<SiteLibraryOrderByInput>;
  skip?: InputMaybe<Scalars['Int']>;
  stage?: Stage;
  where?: InputMaybe<SiteLibraryWhereInput>;
};


export type QuerySiteLibrariesConnectionArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  locales?: Array<Locale>;
  orderBy?: InputMaybe<SiteLibraryOrderByInput>;
  skip?: InputMaybe<Scalars['Int']>;
  stage?: Stage;
  where?: InputMaybe<SiteLibraryWhereInput>;
};


export type QuerySiteLibraryArgs = {
  locales?: Array<Locale>;
  stage?: Stage;
  where: SiteLibraryWhereUniqueInput;
};


export type QuerySiteLibraryVersionArgs = {
  where: VersionWhereInput;
};


export type QueryTestimonialArgs = {
  locales?: Array<Locale>;
  stage?: Stage;
  where: TestimonialWhereUniqueInput;
};


export type QueryTestimonialVersionArgs = {
  where: VersionWhereInput;
};


export type QueryTestimonialsArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  locales?: Array<Locale>;
  orderBy?: InputMaybe<TestimonialOrderByInput>;
  skip?: InputMaybe<Scalars['Int']>;
  stage?: Stage;
  where?: InputMaybe<TestimonialWhereInput>;
};


export type QueryTestimonialsConnectionArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  locales?: Array<Locale>;
  orderBy?: InputMaybe<TestimonialOrderByInput>;
  skip?: InputMaybe<Scalars['Int']>;
  stage?: Stage;
  where?: InputMaybe<TestimonialWhereInput>;
};


export type QueryUserArgs = {
  locales?: Array<Locale>;
  stage?: Stage;
  where: UserWhereUniqueInput;
};


export type QueryUsersArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  locales?: Array<Locale>;
  orderBy?: InputMaybe<UserOrderByInput>;
  skip?: InputMaybe<Scalars['Int']>;
  stage?: Stage;
  where?: InputMaybe<UserWhereInput>;
};


export type QueryUsersConnectionArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  locales?: Array<Locale>;
  orderBy?: InputMaybe<UserOrderByInput>;
  skip?: InputMaybe<Scalars['Int']>;
  stage?: Stage;
  where?: InputMaybe<UserWhereInput>;
};

/** Representing a RGBA color value: https://developer.mozilla.org/en-US/docs/Web/CSS/color_value#rgb()_and_rgba() */
export type Rgba = {
  __typename?: 'RGBA';
  a: Scalars['RGBATransparency'];
  b: Scalars['RGBAHue'];
  g: Scalars['RGBAHue'];
  r: Scalars['RGBAHue'];
};

/** Input type representing a RGBA color value: https://developer.mozilla.org/en-US/docs/Web/CSS/color_value#rgb()_and_rgba() */
export type RgbaInput = {
  a: Scalars['RGBATransparency'];
  b: Scalars['RGBAHue'];
  g: Scalars['RGBAHue'];
  r: Scalars['RGBAHue'];
};

export enum ReleaseType {
  Album = 'Album',
  Single = 'Single'
}

/** Custom type representing a rich text value comprising of raw rich text ast, html, markdown and text values */
export type RichText = {
  __typename?: 'RichText';
  /** Returns HTMl representation */
  html: Scalars['String'];
  /** Returns Markdown representation */
  markdown: Scalars['String'];
  /** Returns AST representation */
  raw: Scalars['RichTextAST'];
  /** Returns plain-text contents of RichText */
  text: Scalars['String'];
};

export type RootColor = Entity & {
  __typename?: 'RootColor';
  background: Color;
  backgroundSecondary: Color;
  /** The unique identifier */
  id: Scalars['ID'];
  primary: Color;
  primaryFadeOpacity: Color;
  secondary: Color;
  /** System stage field */
  stage: Stage;
  tertiary: Color;
  text: Color;
  textOverlay: Color;
};

export type RootColorConnectInput = {
  /** Allow to specify document position in list of connected documents, will default to appending at end of list */
  position?: InputMaybe<ConnectPositionInput>;
  /** Document to connect */
  where: RootColorWhereUniqueInput;
};

/** A connection to a list of items. */
export type RootColorConnection = {
  __typename?: 'RootColorConnection';
  aggregate: Aggregate;
  /** A list of edges. */
  edges: Array<RootColorEdge>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
};

export type RootColorCreateInput = {
  background: ColorInput;
  backgroundSecondary: ColorInput;
  primary: ColorInput;
  primaryFadeOpacity: ColorInput;
  secondary: ColorInput;
  tertiary: ColorInput;
  text: ColorInput;
  textOverlay: ColorInput;
};

export type RootColorCreateManyInlineInput = {
  /** Create and connect multiple existing RootColor documents */
  create?: InputMaybe<Array<RootColorCreateInput>>;
};

export type RootColorCreateOneInlineInput = {
  /** Create and connect one RootColor document */
  create?: InputMaybe<RootColorCreateInput>;
};

export type RootColorCreateWithPositionInput = {
  /** Document to create */
  data: RootColorCreateInput;
  /** Position in the list of existing component instances, will default to appending at the end of list */
  position?: InputMaybe<ConnectPositionInput>;
};

/** An edge in a connection. */
export type RootColorEdge = {
  __typename?: 'RootColorEdge';
  /** A cursor for use in pagination. */
  cursor: Scalars['String'];
  /** The item at the end of the edge. */
  node: RootColor;
};

/** Identifies documents */
export type RootColorManyWhereInput = {
  /** Logical AND on all given filters. */
  AND?: InputMaybe<Array<RootColorWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: InputMaybe<Array<RootColorWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: InputMaybe<Array<RootColorWhereInput>>;
  /** Contains search across all appropriate fields. */
  _search?: InputMaybe<Scalars['String']>;
  id?: InputMaybe<Scalars['ID']>;
  /** All values containing the given string. */
  id_contains?: InputMaybe<Scalars['ID']>;
  /** All values ending with the given string. */
  id_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are contained in given list. */
  id_in?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** Any other value that exists and is not equal to the given value. */
  id_not?: InputMaybe<Scalars['ID']>;
  /** All values not containing the given string. */
  id_not_contains?: InputMaybe<Scalars['ID']>;
  /** All values not ending with the given string */
  id_not_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are not contained in given list. */
  id_not_in?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** All values not starting with the given string. */
  id_not_starts_with?: InputMaybe<Scalars['ID']>;
  /** All values starting with the given string. */
  id_starts_with?: InputMaybe<Scalars['ID']>;
};

export enum RootColorOrderByInput {
  IdAsc = 'id_ASC',
  IdDesc = 'id_DESC'
}

export type RootColorParent = SiteLibrary;

export type RootColorParentConnectInput = {
  SiteLibrary?: InputMaybe<SiteLibraryConnectInput>;
};

export type RootColorParentCreateInput = {
  SiteLibrary?: InputMaybe<SiteLibraryCreateInput>;
};

export type RootColorParentCreateManyInlineInput = {
  /** Connect multiple existing RootColorParent documents */
  connect?: InputMaybe<Array<RootColorParentWhereUniqueInput>>;
  /** Create and connect multiple existing RootColorParent documents */
  create?: InputMaybe<Array<RootColorParentCreateInput>>;
};

export type RootColorParentCreateOneInlineInput = {
  /** Connect one existing RootColorParent document */
  connect?: InputMaybe<RootColorParentWhereUniqueInput>;
  /** Create and connect one RootColorParent document */
  create?: InputMaybe<RootColorParentCreateInput>;
};

export type RootColorParentUpdateInput = {
  SiteLibrary?: InputMaybe<SiteLibraryUpdateInput>;
};

export type RootColorParentUpdateManyInlineInput = {
  /** Connect multiple existing RootColorParent documents */
  connect?: InputMaybe<Array<RootColorParentConnectInput>>;
  /** Create and connect multiple RootColorParent documents */
  create?: InputMaybe<Array<RootColorParentCreateInput>>;
  /** Delete multiple RootColorParent documents */
  delete?: InputMaybe<Array<RootColorParentWhereUniqueInput>>;
  /** Disconnect multiple RootColorParent documents */
  disconnect?: InputMaybe<Array<RootColorParentWhereUniqueInput>>;
  /** Override currently-connected documents with multiple existing RootColorParent documents */
  set?: InputMaybe<Array<RootColorParentWhereUniqueInput>>;
  /** Update multiple RootColorParent documents */
  update?: InputMaybe<Array<RootColorParentUpdateWithNestedWhereUniqueInput>>;
  /** Upsert multiple RootColorParent documents */
  upsert?: InputMaybe<Array<RootColorParentUpsertWithNestedWhereUniqueInput>>;
};

export type RootColorParentUpdateManyWithNestedWhereInput = {
  SiteLibrary?: InputMaybe<SiteLibraryUpdateManyWithNestedWhereInput>;
};

export type RootColorParentUpdateOneInlineInput = {
  /** Connect existing RootColorParent document */
  connect?: InputMaybe<RootColorParentWhereUniqueInput>;
  /** Create and connect one RootColorParent document */
  create?: InputMaybe<RootColorParentCreateInput>;
  /** Delete currently connected RootColorParent document */
  delete?: InputMaybe<Scalars['Boolean']>;
  /** Disconnect currently connected RootColorParent document */
  disconnect?: InputMaybe<Scalars['Boolean']>;
  /** Update single RootColorParent document */
  update?: InputMaybe<RootColorParentUpdateWithNestedWhereUniqueInput>;
  /** Upsert single RootColorParent document */
  upsert?: InputMaybe<RootColorParentUpsertWithNestedWhereUniqueInput>;
};

export type RootColorParentUpdateWithNestedWhereUniqueInput = {
  SiteLibrary?: InputMaybe<SiteLibraryUpdateWithNestedWhereUniqueInput>;
};

export type RootColorParentUpsertWithNestedWhereUniqueInput = {
  SiteLibrary?: InputMaybe<SiteLibraryUpsertWithNestedWhereUniqueInput>;
};

export type RootColorParentWhereInput = {
  SiteLibrary?: InputMaybe<SiteLibraryWhereInput>;
};

export type RootColorParentWhereUniqueInput = {
  SiteLibrary?: InputMaybe<SiteLibraryWhereUniqueInput>;
};

export type RootColorUpdateInput = {
  background?: InputMaybe<ColorInput>;
  backgroundSecondary?: InputMaybe<ColorInput>;
  primary?: InputMaybe<ColorInput>;
  primaryFadeOpacity?: InputMaybe<ColorInput>;
  secondary?: InputMaybe<ColorInput>;
  tertiary?: InputMaybe<ColorInput>;
  text?: InputMaybe<ColorInput>;
  textOverlay?: InputMaybe<ColorInput>;
};

export type RootColorUpdateManyInlineInput = {
  /** Create and connect multiple RootColor component instances */
  create?: InputMaybe<Array<RootColorCreateWithPositionInput>>;
  /** Delete multiple RootColor documents */
  delete?: InputMaybe<Array<RootColorWhereUniqueInput>>;
  /** Update multiple RootColor component instances */
  update?: InputMaybe<Array<RootColorUpdateWithNestedWhereUniqueAndPositionInput>>;
  /** Upsert multiple RootColor component instances */
  upsert?: InputMaybe<Array<RootColorUpsertWithNestedWhereUniqueAndPositionInput>>;
};

export type RootColorUpdateManyInput = {
  background?: InputMaybe<ColorInput>;
  backgroundSecondary?: InputMaybe<ColorInput>;
  primary?: InputMaybe<ColorInput>;
  primaryFadeOpacity?: InputMaybe<ColorInput>;
  secondary?: InputMaybe<ColorInput>;
  tertiary?: InputMaybe<ColorInput>;
  text?: InputMaybe<ColorInput>;
  textOverlay?: InputMaybe<ColorInput>;
};

export type RootColorUpdateManyWithNestedWhereInput = {
  /** Update many input */
  data: RootColorUpdateManyInput;
  /** Document search */
  where: RootColorWhereInput;
};

export type RootColorUpdateOneInlineInput = {
  /** Create and connect one RootColor document */
  create?: InputMaybe<RootColorCreateInput>;
  /** Delete currently connected RootColor document */
  delete?: InputMaybe<Scalars['Boolean']>;
  /** Update single RootColor document */
  update?: InputMaybe<RootColorUpdateWithNestedWhereUniqueInput>;
  /** Upsert single RootColor document */
  upsert?: InputMaybe<RootColorUpsertWithNestedWhereUniqueInput>;
};

export type RootColorUpdateWithNestedWhereUniqueAndPositionInput = {
  /** Document to update */
  data?: InputMaybe<RootColorUpdateInput>;
  /** Position in the list of existing component instances, will default to appending at the end of list */
  position?: InputMaybe<ConnectPositionInput>;
  /** Unique component instance search */
  where: RootColorWhereUniqueInput;
};

export type RootColorUpdateWithNestedWhereUniqueInput = {
  /** Document to update */
  data: RootColorUpdateInput;
  /** Unique document search */
  where: RootColorWhereUniqueInput;
};

export type RootColorUpsertInput = {
  /** Create document if it didn't exist */
  create: RootColorCreateInput;
  /** Update document if it exists */
  update: RootColorUpdateInput;
};

export type RootColorUpsertWithNestedWhereUniqueAndPositionInput = {
  /** Document to upsert */
  data?: InputMaybe<RootColorUpsertInput>;
  /** Position in the list of existing component instances, will default to appending at the end of list */
  position?: InputMaybe<ConnectPositionInput>;
  /** Unique component instance search */
  where: RootColorWhereUniqueInput;
};

export type RootColorUpsertWithNestedWhereUniqueInput = {
  /** Upsert data */
  data: RootColorUpsertInput;
  /** Unique document search */
  where: RootColorWhereUniqueInput;
};

/** Identifies documents */
export type RootColorWhereInput = {
  /** Logical AND on all given filters. */
  AND?: InputMaybe<Array<RootColorWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: InputMaybe<Array<RootColorWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: InputMaybe<Array<RootColorWhereInput>>;
  /** Contains search across all appropriate fields. */
  _search?: InputMaybe<Scalars['String']>;
  id?: InputMaybe<Scalars['ID']>;
  /** All values containing the given string. */
  id_contains?: InputMaybe<Scalars['ID']>;
  /** All values ending with the given string. */
  id_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are contained in given list. */
  id_in?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** Any other value that exists and is not equal to the given value. */
  id_not?: InputMaybe<Scalars['ID']>;
  /** All values not containing the given string. */
  id_not_contains?: InputMaybe<Scalars['ID']>;
  /** All values not ending with the given string */
  id_not_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are not contained in given list. */
  id_not_in?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** All values not starting with the given string. */
  id_not_starts_with?: InputMaybe<Scalars['ID']>;
  /** All values starting with the given string. */
  id_starts_with?: InputMaybe<Scalars['ID']>;
};

/** References RootColor record uniquely */
export type RootColorWhereUniqueInput = {
  id?: InputMaybe<Scalars['ID']>;
};

/** Scheduled Operation system model */
export type ScheduledOperation = Entity & Node & {
  __typename?: 'ScheduledOperation';
  affectedDocuments: Array<ScheduledOperationAffectedDocument>;
  /** The time the document was created */
  createdAt: Scalars['DateTime'];
  /** User that created this document */
  createdBy?: Maybe<User>;
  /** Operation description */
  description?: Maybe<Scalars['String']>;
  /** Get the document in other stages */
  documentInStages: Array<ScheduledOperation>;
  /** Operation error message */
  errorMessage?: Maybe<Scalars['String']>;
  /** The unique identifier */
  id: Scalars['ID'];
  /** The time the document was published. Null on documents in draft stage. */
  publishedAt?: Maybe<Scalars['DateTime']>;
  /** User that last published this document */
  publishedBy?: Maybe<User>;
  /** Raw operation payload including all details, this field is subject to change */
  rawPayload: Scalars['Json'];
  /** The release this operation is scheduled for */
  release?: Maybe<ScheduledRelease>;
  /** System stage field */
  stage: Stage;
  /** operation Status */
  status: ScheduledOperationStatus;
  /** The time the document was updated */
  updatedAt: Scalars['DateTime'];
  /** User that last updated this document */
  updatedBy?: Maybe<User>;
};


/** Scheduled Operation system model */
export type ScheduledOperationAffectedDocumentsArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  forceParentLocale?: InputMaybe<Scalars['Boolean']>;
  last?: InputMaybe<Scalars['Int']>;
  locales?: InputMaybe<Array<Locale>>;
  skip?: InputMaybe<Scalars['Int']>;
};


/** Scheduled Operation system model */
export type ScheduledOperationCreatedByArgs = {
  forceParentLocale?: InputMaybe<Scalars['Boolean']>;
  locales?: InputMaybe<Array<Locale>>;
};


/** Scheduled Operation system model */
export type ScheduledOperationDocumentInStagesArgs = {
  includeCurrent?: Scalars['Boolean'];
  inheritLocale?: Scalars['Boolean'];
  stages?: Array<Stage>;
};


/** Scheduled Operation system model */
export type ScheduledOperationPublishedByArgs = {
  forceParentLocale?: InputMaybe<Scalars['Boolean']>;
  locales?: InputMaybe<Array<Locale>>;
};


/** Scheduled Operation system model */
export type ScheduledOperationReleaseArgs = {
  forceParentLocale?: InputMaybe<Scalars['Boolean']>;
  locales?: InputMaybe<Array<Locale>>;
};


/** Scheduled Operation system model */
export type ScheduledOperationUpdatedByArgs = {
  forceParentLocale?: InputMaybe<Scalars['Boolean']>;
  locales?: InputMaybe<Array<Locale>>;
};

export type ScheduledOperationAffectedDocument = Album | Asset | Blog | Contact | Event | LogoTable | Navigation | Page | Product | Profile | SiteLibrary | Testimonial;

export type ScheduledOperationConnectInput = {
  /** Allow to specify document position in list of connected documents, will default to appending at end of list */
  position?: InputMaybe<ConnectPositionInput>;
  /** Document to connect */
  where: ScheduledOperationWhereUniqueInput;
};

/** A connection to a list of items. */
export type ScheduledOperationConnection = {
  __typename?: 'ScheduledOperationConnection';
  aggregate: Aggregate;
  /** A list of edges. */
  edges: Array<ScheduledOperationEdge>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
};

export type ScheduledOperationCreateManyInlineInput = {
  /** Connect multiple existing ScheduledOperation documents */
  connect?: InputMaybe<Array<ScheduledOperationWhereUniqueInput>>;
};

export type ScheduledOperationCreateOneInlineInput = {
  /** Connect one existing ScheduledOperation document */
  connect?: InputMaybe<ScheduledOperationWhereUniqueInput>;
};

/** An edge in a connection. */
export type ScheduledOperationEdge = {
  __typename?: 'ScheduledOperationEdge';
  /** A cursor for use in pagination. */
  cursor: Scalars['String'];
  /** The item at the end of the edge. */
  node: ScheduledOperation;
};

/** Identifies documents */
export type ScheduledOperationManyWhereInput = {
  /** Logical AND on all given filters. */
  AND?: InputMaybe<Array<ScheduledOperationWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: InputMaybe<Array<ScheduledOperationWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: InputMaybe<Array<ScheduledOperationWhereInput>>;
  /** Contains search across all appropriate fields. */
  _search?: InputMaybe<Scalars['String']>;
  createdAt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  createdAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  createdAt_gte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  createdAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  /** All values less than the given value. */
  createdAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  createdAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** Any other value that exists and is not equal to the given value. */
  createdAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not contained in given list. */
  createdAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  createdBy?: InputMaybe<UserWhereInput>;
  description?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  description_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  description_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  description_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Any other value that exists and is not equal to the given value. */
  description_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  description_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  description_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  description_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  description_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  description_starts_with?: InputMaybe<Scalars['String']>;
  errorMessage?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  errorMessage_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  errorMessage_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  errorMessage_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Any other value that exists and is not equal to the given value. */
  errorMessage_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  errorMessage_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  errorMessage_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  errorMessage_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  errorMessage_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  errorMessage_starts_with?: InputMaybe<Scalars['String']>;
  id?: InputMaybe<Scalars['ID']>;
  /** All values containing the given string. */
  id_contains?: InputMaybe<Scalars['ID']>;
  /** All values ending with the given string. */
  id_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are contained in given list. */
  id_in?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** Any other value that exists and is not equal to the given value. */
  id_not?: InputMaybe<Scalars['ID']>;
  /** All values not containing the given string. */
  id_not_contains?: InputMaybe<Scalars['ID']>;
  /** All values not ending with the given string */
  id_not_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are not contained in given list. */
  id_not_in?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** All values not starting with the given string. */
  id_not_starts_with?: InputMaybe<Scalars['ID']>;
  /** All values starting with the given string. */
  id_starts_with?: InputMaybe<Scalars['ID']>;
  publishedAt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  publishedAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  publishedAt_gte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  publishedAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  /** All values less than the given value. */
  publishedAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  publishedAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** Any other value that exists and is not equal to the given value. */
  publishedAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not contained in given list. */
  publishedAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  publishedBy?: InputMaybe<UserWhereInput>;
  /** All values containing the given json path. */
  rawPayload_json_path_exists?: InputMaybe<Scalars['String']>;
  /**
   * Recursively tries to find the provided JSON scalar value inside the field.
   * It does use an exact match when comparing values.
   * If you pass `null` as value the filter will be ignored.
   * Note: This filter fails if you try to look for a non scalar JSON value!
   */
  rawPayload_value_recursive?: InputMaybe<Scalars['Json']>;
  release?: InputMaybe<ScheduledReleaseWhereInput>;
  status?: InputMaybe<ScheduledOperationStatus>;
  /** All values that are contained in given list. */
  status_in?: InputMaybe<Array<InputMaybe<ScheduledOperationStatus>>>;
  /** Any other value that exists and is not equal to the given value. */
  status_not?: InputMaybe<ScheduledOperationStatus>;
  /** All values that are not contained in given list. */
  status_not_in?: InputMaybe<Array<InputMaybe<ScheduledOperationStatus>>>;
  updatedAt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  updatedAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  updatedAt_gte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  updatedAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  /** All values less than the given value. */
  updatedAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  updatedAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** Any other value that exists and is not equal to the given value. */
  updatedAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not contained in given list. */
  updatedAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  updatedBy?: InputMaybe<UserWhereInput>;
};

export enum ScheduledOperationOrderByInput {
  CreatedAtAsc = 'createdAt_ASC',
  CreatedAtDesc = 'createdAt_DESC',
  DescriptionAsc = 'description_ASC',
  DescriptionDesc = 'description_DESC',
  ErrorMessageAsc = 'errorMessage_ASC',
  ErrorMessageDesc = 'errorMessage_DESC',
  IdAsc = 'id_ASC',
  IdDesc = 'id_DESC',
  PublishedAtAsc = 'publishedAt_ASC',
  PublishedAtDesc = 'publishedAt_DESC',
  StatusAsc = 'status_ASC',
  StatusDesc = 'status_DESC',
  UpdatedAtAsc = 'updatedAt_ASC',
  UpdatedAtDesc = 'updatedAt_DESC'
}

/** System Scheduled Operation Status */
export enum ScheduledOperationStatus {
  Canceled = 'CANCELED',
  Completed = 'COMPLETED',
  Failed = 'FAILED',
  InProgress = 'IN_PROGRESS',
  Pending = 'PENDING'
}

export type ScheduledOperationUpdateManyInlineInput = {
  /** Connect multiple existing ScheduledOperation documents */
  connect?: InputMaybe<Array<ScheduledOperationConnectInput>>;
  /** Disconnect multiple ScheduledOperation documents */
  disconnect?: InputMaybe<Array<ScheduledOperationWhereUniqueInput>>;
  /** Override currently-connected documents with multiple existing ScheduledOperation documents */
  set?: InputMaybe<Array<ScheduledOperationWhereUniqueInput>>;
};

export type ScheduledOperationUpdateOneInlineInput = {
  /** Connect existing ScheduledOperation document */
  connect?: InputMaybe<ScheduledOperationWhereUniqueInput>;
  /** Disconnect currently connected ScheduledOperation document */
  disconnect?: InputMaybe<Scalars['Boolean']>;
};

/** Identifies documents */
export type ScheduledOperationWhereInput = {
  /** Logical AND on all given filters. */
  AND?: InputMaybe<Array<ScheduledOperationWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: InputMaybe<Array<ScheduledOperationWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: InputMaybe<Array<ScheduledOperationWhereInput>>;
  /** Contains search across all appropriate fields. */
  _search?: InputMaybe<Scalars['String']>;
  createdAt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  createdAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  createdAt_gte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  createdAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  /** All values less than the given value. */
  createdAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  createdAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** Any other value that exists and is not equal to the given value. */
  createdAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not contained in given list. */
  createdAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  createdBy?: InputMaybe<UserWhereInput>;
  description?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  description_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  description_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  description_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Any other value that exists and is not equal to the given value. */
  description_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  description_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  description_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  description_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  description_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  description_starts_with?: InputMaybe<Scalars['String']>;
  errorMessage?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  errorMessage_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  errorMessage_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  errorMessage_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Any other value that exists and is not equal to the given value. */
  errorMessage_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  errorMessage_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  errorMessage_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  errorMessage_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  errorMessage_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  errorMessage_starts_with?: InputMaybe<Scalars['String']>;
  id?: InputMaybe<Scalars['ID']>;
  /** All values containing the given string. */
  id_contains?: InputMaybe<Scalars['ID']>;
  /** All values ending with the given string. */
  id_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are contained in given list. */
  id_in?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** Any other value that exists and is not equal to the given value. */
  id_not?: InputMaybe<Scalars['ID']>;
  /** All values not containing the given string. */
  id_not_contains?: InputMaybe<Scalars['ID']>;
  /** All values not ending with the given string */
  id_not_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are not contained in given list. */
  id_not_in?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** All values not starting with the given string. */
  id_not_starts_with?: InputMaybe<Scalars['ID']>;
  /** All values starting with the given string. */
  id_starts_with?: InputMaybe<Scalars['ID']>;
  publishedAt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  publishedAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  publishedAt_gte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  publishedAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  /** All values less than the given value. */
  publishedAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  publishedAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** Any other value that exists and is not equal to the given value. */
  publishedAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not contained in given list. */
  publishedAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  publishedBy?: InputMaybe<UserWhereInput>;
  /** All values containing the given json path. */
  rawPayload_json_path_exists?: InputMaybe<Scalars['String']>;
  /**
   * Recursively tries to find the provided JSON scalar value inside the field.
   * It does use an exact match when comparing values.
   * If you pass `null` as value the filter will be ignored.
   * Note: This filter fails if you try to look for a non scalar JSON value!
   */
  rawPayload_value_recursive?: InputMaybe<Scalars['Json']>;
  release?: InputMaybe<ScheduledReleaseWhereInput>;
  status?: InputMaybe<ScheduledOperationStatus>;
  /** All values that are contained in given list. */
  status_in?: InputMaybe<Array<InputMaybe<ScheduledOperationStatus>>>;
  /** Any other value that exists and is not equal to the given value. */
  status_not?: InputMaybe<ScheduledOperationStatus>;
  /** All values that are not contained in given list. */
  status_not_in?: InputMaybe<Array<InputMaybe<ScheduledOperationStatus>>>;
  updatedAt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  updatedAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  updatedAt_gte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  updatedAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  /** All values less than the given value. */
  updatedAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  updatedAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** Any other value that exists and is not equal to the given value. */
  updatedAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not contained in given list. */
  updatedAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  updatedBy?: InputMaybe<UserWhereInput>;
};

/** References ScheduledOperation record uniquely */
export type ScheduledOperationWhereUniqueInput = {
  id?: InputMaybe<Scalars['ID']>;
};

/** Scheduled Release system model */
export type ScheduledRelease = Entity & Node & {
  __typename?: 'ScheduledRelease';
  /** The time the document was created */
  createdAt: Scalars['DateTime'];
  /** User that created this document */
  createdBy?: Maybe<User>;
  /** Release description */
  description?: Maybe<Scalars['String']>;
  /** Get the document in other stages */
  documentInStages: Array<ScheduledRelease>;
  /** Release error message */
  errorMessage?: Maybe<Scalars['String']>;
  /** The unique identifier */
  id: Scalars['ID'];
  /** Whether scheduled release should be run */
  isActive: Scalars['Boolean'];
  /** Whether scheduled release is implicit */
  isImplicit: Scalars['Boolean'];
  /** Operations to run with this release */
  operations: Array<ScheduledOperation>;
  /** The time the document was published. Null on documents in draft stage. */
  publishedAt?: Maybe<Scalars['DateTime']>;
  /** User that last published this document */
  publishedBy?: Maybe<User>;
  /** Release date and time */
  releaseAt?: Maybe<Scalars['DateTime']>;
  /** System stage field */
  stage: Stage;
  /** Release Status */
  status: ScheduledReleaseStatus;
  /** Release Title */
  title?: Maybe<Scalars['String']>;
  /** The time the document was updated */
  updatedAt: Scalars['DateTime'];
  /** User that last updated this document */
  updatedBy?: Maybe<User>;
};


/** Scheduled Release system model */
export type ScheduledReleaseCreatedByArgs = {
  forceParentLocale?: InputMaybe<Scalars['Boolean']>;
  locales?: InputMaybe<Array<Locale>>;
};


/** Scheduled Release system model */
export type ScheduledReleaseDocumentInStagesArgs = {
  includeCurrent?: Scalars['Boolean'];
  inheritLocale?: Scalars['Boolean'];
  stages?: Array<Stage>;
};


/** Scheduled Release system model */
export type ScheduledReleaseOperationsArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  forceParentLocale?: InputMaybe<Scalars['Boolean']>;
  last?: InputMaybe<Scalars['Int']>;
  locales?: InputMaybe<Array<Locale>>;
  orderBy?: InputMaybe<ScheduledOperationOrderByInput>;
  skip?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<ScheduledOperationWhereInput>;
};


/** Scheduled Release system model */
export type ScheduledReleasePublishedByArgs = {
  forceParentLocale?: InputMaybe<Scalars['Boolean']>;
  locales?: InputMaybe<Array<Locale>>;
};


/** Scheduled Release system model */
export type ScheduledReleaseUpdatedByArgs = {
  forceParentLocale?: InputMaybe<Scalars['Boolean']>;
  locales?: InputMaybe<Array<Locale>>;
};

export type ScheduledReleaseConnectInput = {
  /** Allow to specify document position in list of connected documents, will default to appending at end of list */
  position?: InputMaybe<ConnectPositionInput>;
  /** Document to connect */
  where: ScheduledReleaseWhereUniqueInput;
};

/** A connection to a list of items. */
export type ScheduledReleaseConnection = {
  __typename?: 'ScheduledReleaseConnection';
  aggregate: Aggregate;
  /** A list of edges. */
  edges: Array<ScheduledReleaseEdge>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
};

export type ScheduledReleaseCreateInput = {
  createdAt?: InputMaybe<Scalars['DateTime']>;
  description?: InputMaybe<Scalars['String']>;
  errorMessage?: InputMaybe<Scalars['String']>;
  isActive?: InputMaybe<Scalars['Boolean']>;
  releaseAt?: InputMaybe<Scalars['DateTime']>;
  title?: InputMaybe<Scalars['String']>;
  updatedAt?: InputMaybe<Scalars['DateTime']>;
};

export type ScheduledReleaseCreateManyInlineInput = {
  /** Connect multiple existing ScheduledRelease documents */
  connect?: InputMaybe<Array<ScheduledReleaseWhereUniqueInput>>;
  /** Create and connect multiple existing ScheduledRelease documents */
  create?: InputMaybe<Array<ScheduledReleaseCreateInput>>;
};

export type ScheduledReleaseCreateOneInlineInput = {
  /** Connect one existing ScheduledRelease document */
  connect?: InputMaybe<ScheduledReleaseWhereUniqueInput>;
  /** Create and connect one ScheduledRelease document */
  create?: InputMaybe<ScheduledReleaseCreateInput>;
};

/** An edge in a connection. */
export type ScheduledReleaseEdge = {
  __typename?: 'ScheduledReleaseEdge';
  /** A cursor for use in pagination. */
  cursor: Scalars['String'];
  /** The item at the end of the edge. */
  node: ScheduledRelease;
};

/** Identifies documents */
export type ScheduledReleaseManyWhereInput = {
  /** Logical AND on all given filters. */
  AND?: InputMaybe<Array<ScheduledReleaseWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: InputMaybe<Array<ScheduledReleaseWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: InputMaybe<Array<ScheduledReleaseWhereInput>>;
  /** Contains search across all appropriate fields. */
  _search?: InputMaybe<Scalars['String']>;
  createdAt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  createdAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  createdAt_gte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  createdAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  /** All values less than the given value. */
  createdAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  createdAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** Any other value that exists and is not equal to the given value. */
  createdAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not contained in given list. */
  createdAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  createdBy?: InputMaybe<UserWhereInput>;
  description?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  description_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  description_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  description_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Any other value that exists and is not equal to the given value. */
  description_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  description_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  description_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  description_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  description_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  description_starts_with?: InputMaybe<Scalars['String']>;
  errorMessage?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  errorMessage_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  errorMessage_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  errorMessage_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Any other value that exists and is not equal to the given value. */
  errorMessage_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  errorMessage_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  errorMessage_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  errorMessage_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  errorMessage_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  errorMessage_starts_with?: InputMaybe<Scalars['String']>;
  id?: InputMaybe<Scalars['ID']>;
  /** All values containing the given string. */
  id_contains?: InputMaybe<Scalars['ID']>;
  /** All values ending with the given string. */
  id_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are contained in given list. */
  id_in?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** Any other value that exists and is not equal to the given value. */
  id_not?: InputMaybe<Scalars['ID']>;
  /** All values not containing the given string. */
  id_not_contains?: InputMaybe<Scalars['ID']>;
  /** All values not ending with the given string */
  id_not_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are not contained in given list. */
  id_not_in?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** All values not starting with the given string. */
  id_not_starts_with?: InputMaybe<Scalars['ID']>;
  /** All values starting with the given string. */
  id_starts_with?: InputMaybe<Scalars['ID']>;
  isActive?: InputMaybe<Scalars['Boolean']>;
  /** Any other value that exists and is not equal to the given value. */
  isActive_not?: InputMaybe<Scalars['Boolean']>;
  isImplicit?: InputMaybe<Scalars['Boolean']>;
  /** Any other value that exists and is not equal to the given value. */
  isImplicit_not?: InputMaybe<Scalars['Boolean']>;
  operations_every?: InputMaybe<ScheduledOperationWhereInput>;
  operations_none?: InputMaybe<ScheduledOperationWhereInput>;
  operations_some?: InputMaybe<ScheduledOperationWhereInput>;
  publishedAt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  publishedAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  publishedAt_gte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  publishedAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  /** All values less than the given value. */
  publishedAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  publishedAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** Any other value that exists and is not equal to the given value. */
  publishedAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not contained in given list. */
  publishedAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  publishedBy?: InputMaybe<UserWhereInput>;
  releaseAt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  releaseAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  releaseAt_gte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  releaseAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  /** All values less than the given value. */
  releaseAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  releaseAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** Any other value that exists and is not equal to the given value. */
  releaseAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not contained in given list. */
  releaseAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  status?: InputMaybe<ScheduledReleaseStatus>;
  /** All values that are contained in given list. */
  status_in?: InputMaybe<Array<InputMaybe<ScheduledReleaseStatus>>>;
  /** Any other value that exists and is not equal to the given value. */
  status_not?: InputMaybe<ScheduledReleaseStatus>;
  /** All values that are not contained in given list. */
  status_not_in?: InputMaybe<Array<InputMaybe<ScheduledReleaseStatus>>>;
  title?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  title_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  title_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  title_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Any other value that exists and is not equal to the given value. */
  title_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  title_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  title_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  title_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  title_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  title_starts_with?: InputMaybe<Scalars['String']>;
  updatedAt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  updatedAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  updatedAt_gte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  updatedAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  /** All values less than the given value. */
  updatedAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  updatedAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** Any other value that exists and is not equal to the given value. */
  updatedAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not contained in given list. */
  updatedAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  updatedBy?: InputMaybe<UserWhereInput>;
};

export enum ScheduledReleaseOrderByInput {
  CreatedAtAsc = 'createdAt_ASC',
  CreatedAtDesc = 'createdAt_DESC',
  DescriptionAsc = 'description_ASC',
  DescriptionDesc = 'description_DESC',
  ErrorMessageAsc = 'errorMessage_ASC',
  ErrorMessageDesc = 'errorMessage_DESC',
  IdAsc = 'id_ASC',
  IdDesc = 'id_DESC',
  IsActiveAsc = 'isActive_ASC',
  IsActiveDesc = 'isActive_DESC',
  IsImplicitAsc = 'isImplicit_ASC',
  IsImplicitDesc = 'isImplicit_DESC',
  PublishedAtAsc = 'publishedAt_ASC',
  PublishedAtDesc = 'publishedAt_DESC',
  ReleaseAtAsc = 'releaseAt_ASC',
  ReleaseAtDesc = 'releaseAt_DESC',
  StatusAsc = 'status_ASC',
  StatusDesc = 'status_DESC',
  TitleAsc = 'title_ASC',
  TitleDesc = 'title_DESC',
  UpdatedAtAsc = 'updatedAt_ASC',
  UpdatedAtDesc = 'updatedAt_DESC'
}

/** System Scheduled Release Status */
export enum ScheduledReleaseStatus {
  Completed = 'COMPLETED',
  Failed = 'FAILED',
  InProgress = 'IN_PROGRESS',
  Pending = 'PENDING'
}

export type ScheduledReleaseUpdateInput = {
  description?: InputMaybe<Scalars['String']>;
  errorMessage?: InputMaybe<Scalars['String']>;
  isActive?: InputMaybe<Scalars['Boolean']>;
  releaseAt?: InputMaybe<Scalars['DateTime']>;
  title?: InputMaybe<Scalars['String']>;
};

export type ScheduledReleaseUpdateManyInlineInput = {
  /** Connect multiple existing ScheduledRelease documents */
  connect?: InputMaybe<Array<ScheduledReleaseConnectInput>>;
  /** Create and connect multiple ScheduledRelease documents */
  create?: InputMaybe<Array<ScheduledReleaseCreateInput>>;
  /** Delete multiple ScheduledRelease documents */
  delete?: InputMaybe<Array<ScheduledReleaseWhereUniqueInput>>;
  /** Disconnect multiple ScheduledRelease documents */
  disconnect?: InputMaybe<Array<ScheduledReleaseWhereUniqueInput>>;
  /** Override currently-connected documents with multiple existing ScheduledRelease documents */
  set?: InputMaybe<Array<ScheduledReleaseWhereUniqueInput>>;
  /** Update multiple ScheduledRelease documents */
  update?: InputMaybe<Array<ScheduledReleaseUpdateWithNestedWhereUniqueInput>>;
  /** Upsert multiple ScheduledRelease documents */
  upsert?: InputMaybe<Array<ScheduledReleaseUpsertWithNestedWhereUniqueInput>>;
};

export type ScheduledReleaseUpdateManyInput = {
  description?: InputMaybe<Scalars['String']>;
  errorMessage?: InputMaybe<Scalars['String']>;
  isActive?: InputMaybe<Scalars['Boolean']>;
  releaseAt?: InputMaybe<Scalars['DateTime']>;
  title?: InputMaybe<Scalars['String']>;
};

export type ScheduledReleaseUpdateManyWithNestedWhereInput = {
  /** Update many input */
  data: ScheduledReleaseUpdateManyInput;
  /** Document search */
  where: ScheduledReleaseWhereInput;
};

export type ScheduledReleaseUpdateOneInlineInput = {
  /** Connect existing ScheduledRelease document */
  connect?: InputMaybe<ScheduledReleaseWhereUniqueInput>;
  /** Create and connect one ScheduledRelease document */
  create?: InputMaybe<ScheduledReleaseCreateInput>;
  /** Delete currently connected ScheduledRelease document */
  delete?: InputMaybe<Scalars['Boolean']>;
  /** Disconnect currently connected ScheduledRelease document */
  disconnect?: InputMaybe<Scalars['Boolean']>;
  /** Update single ScheduledRelease document */
  update?: InputMaybe<ScheduledReleaseUpdateWithNestedWhereUniqueInput>;
  /** Upsert single ScheduledRelease document */
  upsert?: InputMaybe<ScheduledReleaseUpsertWithNestedWhereUniqueInput>;
};

export type ScheduledReleaseUpdateWithNestedWhereUniqueInput = {
  /** Document to update */
  data: ScheduledReleaseUpdateInput;
  /** Unique document search */
  where: ScheduledReleaseWhereUniqueInput;
};

export type ScheduledReleaseUpsertInput = {
  /** Create document if it didn't exist */
  create: ScheduledReleaseCreateInput;
  /** Update document if it exists */
  update: ScheduledReleaseUpdateInput;
};

export type ScheduledReleaseUpsertWithNestedWhereUniqueInput = {
  /** Upsert data */
  data: ScheduledReleaseUpsertInput;
  /** Unique document search */
  where: ScheduledReleaseWhereUniqueInput;
};

/** Identifies documents */
export type ScheduledReleaseWhereInput = {
  /** Logical AND on all given filters. */
  AND?: InputMaybe<Array<ScheduledReleaseWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: InputMaybe<Array<ScheduledReleaseWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: InputMaybe<Array<ScheduledReleaseWhereInput>>;
  /** Contains search across all appropriate fields. */
  _search?: InputMaybe<Scalars['String']>;
  createdAt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  createdAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  createdAt_gte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  createdAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  /** All values less than the given value. */
  createdAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  createdAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** Any other value that exists and is not equal to the given value. */
  createdAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not contained in given list. */
  createdAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  createdBy?: InputMaybe<UserWhereInput>;
  description?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  description_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  description_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  description_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Any other value that exists and is not equal to the given value. */
  description_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  description_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  description_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  description_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  description_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  description_starts_with?: InputMaybe<Scalars['String']>;
  errorMessage?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  errorMessage_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  errorMessage_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  errorMessage_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Any other value that exists and is not equal to the given value. */
  errorMessage_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  errorMessage_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  errorMessage_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  errorMessage_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  errorMessage_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  errorMessage_starts_with?: InputMaybe<Scalars['String']>;
  id?: InputMaybe<Scalars['ID']>;
  /** All values containing the given string. */
  id_contains?: InputMaybe<Scalars['ID']>;
  /** All values ending with the given string. */
  id_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are contained in given list. */
  id_in?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** Any other value that exists and is not equal to the given value. */
  id_not?: InputMaybe<Scalars['ID']>;
  /** All values not containing the given string. */
  id_not_contains?: InputMaybe<Scalars['ID']>;
  /** All values not ending with the given string */
  id_not_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are not contained in given list. */
  id_not_in?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** All values not starting with the given string. */
  id_not_starts_with?: InputMaybe<Scalars['ID']>;
  /** All values starting with the given string. */
  id_starts_with?: InputMaybe<Scalars['ID']>;
  isActive?: InputMaybe<Scalars['Boolean']>;
  /** Any other value that exists and is not equal to the given value. */
  isActive_not?: InputMaybe<Scalars['Boolean']>;
  isImplicit?: InputMaybe<Scalars['Boolean']>;
  /** Any other value that exists and is not equal to the given value. */
  isImplicit_not?: InputMaybe<Scalars['Boolean']>;
  operations_every?: InputMaybe<ScheduledOperationWhereInput>;
  operations_none?: InputMaybe<ScheduledOperationWhereInput>;
  operations_some?: InputMaybe<ScheduledOperationWhereInput>;
  publishedAt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  publishedAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  publishedAt_gte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  publishedAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  /** All values less than the given value. */
  publishedAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  publishedAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** Any other value that exists and is not equal to the given value. */
  publishedAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not contained in given list. */
  publishedAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  publishedBy?: InputMaybe<UserWhereInput>;
  releaseAt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  releaseAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  releaseAt_gte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  releaseAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  /** All values less than the given value. */
  releaseAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  releaseAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** Any other value that exists and is not equal to the given value. */
  releaseAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not contained in given list. */
  releaseAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  status?: InputMaybe<ScheduledReleaseStatus>;
  /** All values that are contained in given list. */
  status_in?: InputMaybe<Array<InputMaybe<ScheduledReleaseStatus>>>;
  /** Any other value that exists and is not equal to the given value. */
  status_not?: InputMaybe<ScheduledReleaseStatus>;
  /** All values that are not contained in given list. */
  status_not_in?: InputMaybe<Array<InputMaybe<ScheduledReleaseStatus>>>;
  title?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  title_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  title_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  title_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Any other value that exists and is not equal to the given value. */
  title_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  title_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  title_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  title_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  title_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  title_starts_with?: InputMaybe<Scalars['String']>;
  updatedAt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  updatedAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  updatedAt_gte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  updatedAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  /** All values less than the given value. */
  updatedAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  updatedAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** Any other value that exists and is not equal to the given value. */
  updatedAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not contained in given list. */
  updatedAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  updatedBy?: InputMaybe<UserWhereInput>;
};

/** References ScheduledRelease record uniquely */
export type ScheduledReleaseWhereUniqueInput = {
  id?: InputMaybe<Scalars['ID']>;
};

export type SiteLibrary = Entity & Node & {
  __typename?: 'SiteLibrary';
  analyticsId?: Maybe<Scalars['String']>;
  appleMusicLink?: Maybe<Scalars['String']>;
  contactEmail?: Maybe<Scalars['String']>;
  contactName?: Maybe<Scalars['String']>;
  contactPhone?: Maybe<Scalars['String']>;
  /** The time the document was created */
  createdAt: Scalars['DateTime'];
  /** User that created this document */
  createdBy?: Maybe<User>;
  /** Get the document in other stages */
  documentInStages: Array<SiteLibrary>;
  facebookLink?: Maybe<Scalars['String']>;
  facebookPixelId?: Maybe<Scalars['String']>;
  favicon?: Maybe<Asset>;
  githubLink?: Maybe<Scalars['String']>;
  /** List of SiteLibrary versions */
  history: Array<Version>;
  /** The unique identifier */
  id: Scalars['ID'];
  instagramLink?: Maybe<Scalars['String']>;
  isSpanish?: Maybe<Scalars['Boolean']>;
  linkedinLink?: Maybe<Scalars['String']>;
  logo?: Maybe<Asset>;
  mailchimp?: Maybe<Scalars['String']>;
  mapKey?: Maybe<Scalars['String']>;
  metaAppleTouchIcon?: Maybe<Asset>;
  metaDescription?: Maybe<Scalars['String']>;
  metaDomain?: Maybe<Scalars['String']>;
  metaGoogleConsoleVerification?: Maybe<Scalars['String']>;
  metaOgImage?: Maybe<Asset>;
  pandoraLink?: Maybe<Scalars['String']>;
  paypalClientId?: Maybe<Scalars['String']>;
  pinterestLink?: Maybe<Scalars['String']>;
  /** The time the document was published. Null on documents in draft stage. */
  publishedAt?: Maybe<Scalars['DateTime']>;
  /** User that last published this document */
  publishedBy?: Maybe<User>;
  scheduledIn: Array<ScheduledOperation>;
  secondaryLink?: Maybe<Scalars['String']>;
  secondaryLogo?: Maybe<Asset>;
  secondaryName?: Maybe<Scalars['String']>;
  signature?: Maybe<Scalars['String']>;
  /** CSS Class added to body */
  siteCssBodyClass?: Maybe<Scalars['String']>;
  siteId: Scalars['String'];
  siteLibraryJson?: Maybe<Scalars['Json']>;
  siteTheme?: Maybe<SiteTheme>;
  snapchatLink?: Maybe<Scalars['String']>;
  soundcloudLink?: Maybe<Scalars['String']>;
  spotifyLink?: Maybe<Scalars['String']>;
  /** System stage field */
  stage: Stage;
  /**
   * Theme Colors
   *
   */
  themeColor: RootColor;
  threadsLink?: Maybe<Scalars['String']>;
  tikTokLink?: Maybe<Scalars['String']>;
  title?: Maybe<Scalars['String']>;
  twitterLink?: Maybe<Scalars['String']>;
  /** The time the document was updated */
  updatedAt: Scalars['DateTime'];
  /** User that last updated this document */
  updatedBy?: Maybe<User>;
  youtubeApiKey: Scalars['String'];
  youtubeLink?: Maybe<Scalars['String']>;
};


export type SiteLibraryCreatedByArgs = {
  forceParentLocale?: InputMaybe<Scalars['Boolean']>;
  locales?: InputMaybe<Array<Locale>>;
};


export type SiteLibraryDocumentInStagesArgs = {
  includeCurrent?: Scalars['Boolean'];
  inheritLocale?: Scalars['Boolean'];
  stages?: Array<Stage>;
};


export type SiteLibraryFaviconArgs = {
  forceParentLocale?: InputMaybe<Scalars['Boolean']>;
  locales?: InputMaybe<Array<Locale>>;
};


export type SiteLibraryHistoryArgs = {
  limit?: Scalars['Int'];
  skip?: Scalars['Int'];
  stageOverride?: InputMaybe<Stage>;
};


export type SiteLibraryLogoArgs = {
  forceParentLocale?: InputMaybe<Scalars['Boolean']>;
  locales?: InputMaybe<Array<Locale>>;
};


export type SiteLibraryMetaAppleTouchIconArgs = {
  forceParentLocale?: InputMaybe<Scalars['Boolean']>;
  locales?: InputMaybe<Array<Locale>>;
};


export type SiteLibraryMetaOgImageArgs = {
  forceParentLocale?: InputMaybe<Scalars['Boolean']>;
  locales?: InputMaybe<Array<Locale>>;
};


export type SiteLibraryPublishedByArgs = {
  forceParentLocale?: InputMaybe<Scalars['Boolean']>;
  locales?: InputMaybe<Array<Locale>>;
};


export type SiteLibraryScheduledInArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  forceParentLocale?: InputMaybe<Scalars['Boolean']>;
  last?: InputMaybe<Scalars['Int']>;
  locales?: InputMaybe<Array<Locale>>;
  skip?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<ScheduledOperationWhereInput>;
};


export type SiteLibrarySecondaryLogoArgs = {
  forceParentLocale?: InputMaybe<Scalars['Boolean']>;
  locales?: InputMaybe<Array<Locale>>;
};


export type SiteLibraryThemeColorArgs = {
  forceParentLocale?: InputMaybe<Scalars['Boolean']>;
  locales?: InputMaybe<Array<Locale>>;
};


export type SiteLibraryUpdatedByArgs = {
  forceParentLocale?: InputMaybe<Scalars['Boolean']>;
  locales?: InputMaybe<Array<Locale>>;
};

export type SiteLibraryConnectInput = {
  /** Allow to specify document position in list of connected documents, will default to appending at end of list */
  position?: InputMaybe<ConnectPositionInput>;
  /** Document to connect */
  where: SiteLibraryWhereUniqueInput;
};

/** A connection to a list of items. */
export type SiteLibraryConnection = {
  __typename?: 'SiteLibraryConnection';
  aggregate: Aggregate;
  /** A list of edges. */
  edges: Array<SiteLibraryEdge>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
};

export type SiteLibraryCreateInput = {
  analyticsId?: InputMaybe<Scalars['String']>;
  appleMusicLink?: InputMaybe<Scalars['String']>;
  contactEmail?: InputMaybe<Scalars['String']>;
  contactName?: InputMaybe<Scalars['String']>;
  contactPhone?: InputMaybe<Scalars['String']>;
  createdAt?: InputMaybe<Scalars['DateTime']>;
  facebookLink?: InputMaybe<Scalars['String']>;
  facebookPixelId?: InputMaybe<Scalars['String']>;
  favicon?: InputMaybe<AssetCreateOneInlineInput>;
  githubLink?: InputMaybe<Scalars['String']>;
  instagramLink?: InputMaybe<Scalars['String']>;
  isSpanish?: InputMaybe<Scalars['Boolean']>;
  linkedinLink?: InputMaybe<Scalars['String']>;
  logo?: InputMaybe<AssetCreateOneInlineInput>;
  mailchimp?: InputMaybe<Scalars['String']>;
  mapKey?: InputMaybe<Scalars['String']>;
  metaAppleTouchIcon?: InputMaybe<AssetCreateOneInlineInput>;
  metaDescription?: InputMaybe<Scalars['String']>;
  metaDomain?: InputMaybe<Scalars['String']>;
  metaGoogleConsoleVerification?: InputMaybe<Scalars['String']>;
  metaOgImage?: InputMaybe<AssetCreateOneInlineInput>;
  pandoraLink?: InputMaybe<Scalars['String']>;
  paypalClientId?: InputMaybe<Scalars['String']>;
  pinterestLink?: InputMaybe<Scalars['String']>;
  secondaryLink?: InputMaybe<Scalars['String']>;
  secondaryLogo?: InputMaybe<AssetCreateOneInlineInput>;
  secondaryName?: InputMaybe<Scalars['String']>;
  signature?: InputMaybe<Scalars['String']>;
  siteCssBodyClass?: InputMaybe<Scalars['String']>;
  siteId: Scalars['String'];
  siteLibraryJson?: InputMaybe<Scalars['Json']>;
  siteTheme?: InputMaybe<SiteTheme>;
  snapchatLink?: InputMaybe<Scalars['String']>;
  soundcloudLink?: InputMaybe<Scalars['String']>;
  spotifyLink?: InputMaybe<Scalars['String']>;
  themeColor: RootColorCreateOneInlineInput;
  threadsLink?: InputMaybe<Scalars['String']>;
  tikTokLink?: InputMaybe<Scalars['String']>;
  title?: InputMaybe<Scalars['String']>;
  twitterLink?: InputMaybe<Scalars['String']>;
  updatedAt?: InputMaybe<Scalars['DateTime']>;
  youtubeApiKey: Scalars['String'];
  youtubeLink?: InputMaybe<Scalars['String']>;
};

export type SiteLibraryCreateManyInlineInput = {
  /** Connect multiple existing SiteLibrary documents */
  connect?: InputMaybe<Array<SiteLibraryWhereUniqueInput>>;
  /** Create and connect multiple existing SiteLibrary documents */
  create?: InputMaybe<Array<SiteLibraryCreateInput>>;
};

export type SiteLibraryCreateOneInlineInput = {
  /** Connect one existing SiteLibrary document */
  connect?: InputMaybe<SiteLibraryWhereUniqueInput>;
  /** Create and connect one SiteLibrary document */
  create?: InputMaybe<SiteLibraryCreateInput>;
};

/** An edge in a connection. */
export type SiteLibraryEdge = {
  __typename?: 'SiteLibraryEdge';
  /** A cursor for use in pagination. */
  cursor: Scalars['String'];
  /** The item at the end of the edge. */
  node: SiteLibrary;
};

/** Identifies documents */
export type SiteLibraryManyWhereInput = {
  /** Logical AND on all given filters. */
  AND?: InputMaybe<Array<SiteLibraryWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: InputMaybe<Array<SiteLibraryWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: InputMaybe<Array<SiteLibraryWhereInput>>;
  /** Contains search across all appropriate fields. */
  _search?: InputMaybe<Scalars['String']>;
  analyticsId?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  analyticsId_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  analyticsId_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  analyticsId_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Any other value that exists and is not equal to the given value. */
  analyticsId_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  analyticsId_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  analyticsId_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  analyticsId_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  analyticsId_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  analyticsId_starts_with?: InputMaybe<Scalars['String']>;
  appleMusicLink?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  appleMusicLink_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  appleMusicLink_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  appleMusicLink_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Any other value that exists and is not equal to the given value. */
  appleMusicLink_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  appleMusicLink_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  appleMusicLink_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  appleMusicLink_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  appleMusicLink_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  appleMusicLink_starts_with?: InputMaybe<Scalars['String']>;
  contactEmail?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  contactEmail_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  contactEmail_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  contactEmail_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Any other value that exists and is not equal to the given value. */
  contactEmail_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  contactEmail_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  contactEmail_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  contactEmail_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  contactEmail_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  contactEmail_starts_with?: InputMaybe<Scalars['String']>;
  contactName?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  contactName_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  contactName_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  contactName_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Any other value that exists and is not equal to the given value. */
  contactName_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  contactName_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  contactName_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  contactName_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  contactName_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  contactName_starts_with?: InputMaybe<Scalars['String']>;
  contactPhone?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  contactPhone_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  contactPhone_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  contactPhone_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Any other value that exists and is not equal to the given value. */
  contactPhone_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  contactPhone_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  contactPhone_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  contactPhone_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  contactPhone_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  contactPhone_starts_with?: InputMaybe<Scalars['String']>;
  createdAt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  createdAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  createdAt_gte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  createdAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  /** All values less than the given value. */
  createdAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  createdAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** Any other value that exists and is not equal to the given value. */
  createdAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not contained in given list. */
  createdAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  createdBy?: InputMaybe<UserWhereInput>;
  documentInStages_every?: InputMaybe<SiteLibraryWhereStageInput>;
  documentInStages_none?: InputMaybe<SiteLibraryWhereStageInput>;
  documentInStages_some?: InputMaybe<SiteLibraryWhereStageInput>;
  facebookLink?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  facebookLink_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  facebookLink_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  facebookLink_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Any other value that exists and is not equal to the given value. */
  facebookLink_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  facebookLink_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  facebookLink_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  facebookLink_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  facebookLink_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  facebookLink_starts_with?: InputMaybe<Scalars['String']>;
  facebookPixelId?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  facebookPixelId_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  facebookPixelId_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  facebookPixelId_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Any other value that exists and is not equal to the given value. */
  facebookPixelId_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  facebookPixelId_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  facebookPixelId_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  facebookPixelId_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  facebookPixelId_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  facebookPixelId_starts_with?: InputMaybe<Scalars['String']>;
  favicon?: InputMaybe<AssetWhereInput>;
  githubLink?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  githubLink_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  githubLink_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  githubLink_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Any other value that exists and is not equal to the given value. */
  githubLink_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  githubLink_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  githubLink_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  githubLink_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  githubLink_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  githubLink_starts_with?: InputMaybe<Scalars['String']>;
  id?: InputMaybe<Scalars['ID']>;
  /** All values containing the given string. */
  id_contains?: InputMaybe<Scalars['ID']>;
  /** All values ending with the given string. */
  id_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are contained in given list. */
  id_in?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** Any other value that exists and is not equal to the given value. */
  id_not?: InputMaybe<Scalars['ID']>;
  /** All values not containing the given string. */
  id_not_contains?: InputMaybe<Scalars['ID']>;
  /** All values not ending with the given string */
  id_not_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are not contained in given list. */
  id_not_in?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** All values not starting with the given string. */
  id_not_starts_with?: InputMaybe<Scalars['ID']>;
  /** All values starting with the given string. */
  id_starts_with?: InputMaybe<Scalars['ID']>;
  instagramLink?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  instagramLink_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  instagramLink_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  instagramLink_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Any other value that exists and is not equal to the given value. */
  instagramLink_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  instagramLink_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  instagramLink_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  instagramLink_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  instagramLink_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  instagramLink_starts_with?: InputMaybe<Scalars['String']>;
  isSpanish?: InputMaybe<Scalars['Boolean']>;
  /** Any other value that exists and is not equal to the given value. */
  isSpanish_not?: InputMaybe<Scalars['Boolean']>;
  linkedinLink?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  linkedinLink_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  linkedinLink_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  linkedinLink_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Any other value that exists and is not equal to the given value. */
  linkedinLink_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  linkedinLink_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  linkedinLink_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  linkedinLink_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  linkedinLink_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  linkedinLink_starts_with?: InputMaybe<Scalars['String']>;
  logo?: InputMaybe<AssetWhereInput>;
  mailchimp?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  mailchimp_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  mailchimp_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  mailchimp_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Any other value that exists and is not equal to the given value. */
  mailchimp_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  mailchimp_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  mailchimp_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  mailchimp_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  mailchimp_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  mailchimp_starts_with?: InputMaybe<Scalars['String']>;
  mapKey?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  mapKey_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  mapKey_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  mapKey_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Any other value that exists and is not equal to the given value. */
  mapKey_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  mapKey_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  mapKey_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  mapKey_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  mapKey_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  mapKey_starts_with?: InputMaybe<Scalars['String']>;
  metaAppleTouchIcon?: InputMaybe<AssetWhereInput>;
  metaDescription?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  metaDescription_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  metaDescription_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  metaDescription_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Any other value that exists and is not equal to the given value. */
  metaDescription_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  metaDescription_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  metaDescription_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  metaDescription_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  metaDescription_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  metaDescription_starts_with?: InputMaybe<Scalars['String']>;
  metaDomain?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  metaDomain_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  metaDomain_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  metaDomain_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Any other value that exists and is not equal to the given value. */
  metaDomain_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  metaDomain_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  metaDomain_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  metaDomain_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  metaDomain_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  metaDomain_starts_with?: InputMaybe<Scalars['String']>;
  metaGoogleConsoleVerification?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  metaGoogleConsoleVerification_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  metaGoogleConsoleVerification_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  metaGoogleConsoleVerification_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Any other value that exists and is not equal to the given value. */
  metaGoogleConsoleVerification_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  metaGoogleConsoleVerification_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  metaGoogleConsoleVerification_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  metaGoogleConsoleVerification_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  metaGoogleConsoleVerification_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  metaGoogleConsoleVerification_starts_with?: InputMaybe<Scalars['String']>;
  metaOgImage?: InputMaybe<AssetWhereInput>;
  pandoraLink?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  pandoraLink_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  pandoraLink_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  pandoraLink_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Any other value that exists and is not equal to the given value. */
  pandoraLink_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  pandoraLink_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  pandoraLink_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  pandoraLink_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  pandoraLink_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  pandoraLink_starts_with?: InputMaybe<Scalars['String']>;
  paypalClientId?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  paypalClientId_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  paypalClientId_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  paypalClientId_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Any other value that exists and is not equal to the given value. */
  paypalClientId_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  paypalClientId_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  paypalClientId_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  paypalClientId_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  paypalClientId_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  paypalClientId_starts_with?: InputMaybe<Scalars['String']>;
  pinterestLink?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  pinterestLink_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  pinterestLink_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  pinterestLink_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Any other value that exists and is not equal to the given value. */
  pinterestLink_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  pinterestLink_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  pinterestLink_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  pinterestLink_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  pinterestLink_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  pinterestLink_starts_with?: InputMaybe<Scalars['String']>;
  publishedAt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  publishedAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  publishedAt_gte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  publishedAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  /** All values less than the given value. */
  publishedAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  publishedAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** Any other value that exists and is not equal to the given value. */
  publishedAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not contained in given list. */
  publishedAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  publishedBy?: InputMaybe<UserWhereInput>;
  scheduledIn_every?: InputMaybe<ScheduledOperationWhereInput>;
  scheduledIn_none?: InputMaybe<ScheduledOperationWhereInput>;
  scheduledIn_some?: InputMaybe<ScheduledOperationWhereInput>;
  secondaryLink?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  secondaryLink_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  secondaryLink_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  secondaryLink_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Any other value that exists and is not equal to the given value. */
  secondaryLink_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  secondaryLink_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  secondaryLink_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  secondaryLink_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  secondaryLink_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  secondaryLink_starts_with?: InputMaybe<Scalars['String']>;
  secondaryLogo?: InputMaybe<AssetWhereInput>;
  secondaryName?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  secondaryName_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  secondaryName_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  secondaryName_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Any other value that exists and is not equal to the given value. */
  secondaryName_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  secondaryName_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  secondaryName_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  secondaryName_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  secondaryName_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  secondaryName_starts_with?: InputMaybe<Scalars['String']>;
  signature?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  signature_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  signature_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  signature_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Any other value that exists and is not equal to the given value. */
  signature_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  signature_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  signature_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  signature_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  signature_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  signature_starts_with?: InputMaybe<Scalars['String']>;
  siteCssBodyClass?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  siteCssBodyClass_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  siteCssBodyClass_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  siteCssBodyClass_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Any other value that exists and is not equal to the given value. */
  siteCssBodyClass_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  siteCssBodyClass_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  siteCssBodyClass_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  siteCssBodyClass_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  siteCssBodyClass_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  siteCssBodyClass_starts_with?: InputMaybe<Scalars['String']>;
  siteId?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  siteId_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  siteId_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  siteId_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Any other value that exists and is not equal to the given value. */
  siteId_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  siteId_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  siteId_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  siteId_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  siteId_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  siteId_starts_with?: InputMaybe<Scalars['String']>;
  /** All values containing the given json path. */
  siteLibraryJson_json_path_exists?: InputMaybe<Scalars['String']>;
  /**
   * Recursively tries to find the provided JSON scalar value inside the field.
   * It does use an exact match when comparing values.
   * If you pass `null` as value the filter will be ignored.
   * Note: This filter fails if you try to look for a non scalar JSON value!
   */
  siteLibraryJson_value_recursive?: InputMaybe<Scalars['Json']>;
  siteTheme?: InputMaybe<SiteTheme>;
  /** All values that are contained in given list. */
  siteTheme_in?: InputMaybe<Array<InputMaybe<SiteTheme>>>;
  /** Any other value that exists and is not equal to the given value. */
  siteTheme_not?: InputMaybe<SiteTheme>;
  /** All values that are not contained in given list. */
  siteTheme_not_in?: InputMaybe<Array<InputMaybe<SiteTheme>>>;
  snapchatLink?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  snapchatLink_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  snapchatLink_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  snapchatLink_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Any other value that exists and is not equal to the given value. */
  snapchatLink_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  snapchatLink_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  snapchatLink_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  snapchatLink_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  snapchatLink_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  snapchatLink_starts_with?: InputMaybe<Scalars['String']>;
  soundcloudLink?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  soundcloudLink_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  soundcloudLink_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  soundcloudLink_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Any other value that exists and is not equal to the given value. */
  soundcloudLink_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  soundcloudLink_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  soundcloudLink_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  soundcloudLink_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  soundcloudLink_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  soundcloudLink_starts_with?: InputMaybe<Scalars['String']>;
  spotifyLink?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  spotifyLink_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  spotifyLink_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  spotifyLink_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Any other value that exists and is not equal to the given value. */
  spotifyLink_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  spotifyLink_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  spotifyLink_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  spotifyLink_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  spotifyLink_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  spotifyLink_starts_with?: InputMaybe<Scalars['String']>;
  themeColor?: InputMaybe<RootColorWhereInput>;
  threadsLink?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  threadsLink_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  threadsLink_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  threadsLink_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Any other value that exists and is not equal to the given value. */
  threadsLink_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  threadsLink_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  threadsLink_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  threadsLink_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  threadsLink_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  threadsLink_starts_with?: InputMaybe<Scalars['String']>;
  tikTokLink?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  tikTokLink_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  tikTokLink_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  tikTokLink_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Any other value that exists and is not equal to the given value. */
  tikTokLink_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  tikTokLink_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  tikTokLink_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  tikTokLink_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  tikTokLink_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  tikTokLink_starts_with?: InputMaybe<Scalars['String']>;
  title?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  title_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  title_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  title_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Any other value that exists and is not equal to the given value. */
  title_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  title_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  title_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  title_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  title_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  title_starts_with?: InputMaybe<Scalars['String']>;
  twitterLink?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  twitterLink_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  twitterLink_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  twitterLink_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Any other value that exists and is not equal to the given value. */
  twitterLink_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  twitterLink_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  twitterLink_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  twitterLink_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  twitterLink_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  twitterLink_starts_with?: InputMaybe<Scalars['String']>;
  updatedAt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  updatedAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  updatedAt_gte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  updatedAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  /** All values less than the given value. */
  updatedAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  updatedAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** Any other value that exists and is not equal to the given value. */
  updatedAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not contained in given list. */
  updatedAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  updatedBy?: InputMaybe<UserWhereInput>;
  youtubeApiKey?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  youtubeApiKey_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  youtubeApiKey_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  youtubeApiKey_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Any other value that exists and is not equal to the given value. */
  youtubeApiKey_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  youtubeApiKey_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  youtubeApiKey_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  youtubeApiKey_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  youtubeApiKey_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  youtubeApiKey_starts_with?: InputMaybe<Scalars['String']>;
  youtubeLink?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  youtubeLink_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  youtubeLink_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  youtubeLink_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Any other value that exists and is not equal to the given value. */
  youtubeLink_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  youtubeLink_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  youtubeLink_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  youtubeLink_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  youtubeLink_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  youtubeLink_starts_with?: InputMaybe<Scalars['String']>;
};

export enum SiteLibraryOrderByInput {
  AnalyticsIdAsc = 'analyticsId_ASC',
  AnalyticsIdDesc = 'analyticsId_DESC',
  AppleMusicLinkAsc = 'appleMusicLink_ASC',
  AppleMusicLinkDesc = 'appleMusicLink_DESC',
  ContactEmailAsc = 'contactEmail_ASC',
  ContactEmailDesc = 'contactEmail_DESC',
  ContactNameAsc = 'contactName_ASC',
  ContactNameDesc = 'contactName_DESC',
  ContactPhoneAsc = 'contactPhone_ASC',
  ContactPhoneDesc = 'contactPhone_DESC',
  CreatedAtAsc = 'createdAt_ASC',
  CreatedAtDesc = 'createdAt_DESC',
  FacebookLinkAsc = 'facebookLink_ASC',
  FacebookLinkDesc = 'facebookLink_DESC',
  FacebookPixelIdAsc = 'facebookPixelId_ASC',
  FacebookPixelIdDesc = 'facebookPixelId_DESC',
  GithubLinkAsc = 'githubLink_ASC',
  GithubLinkDesc = 'githubLink_DESC',
  IdAsc = 'id_ASC',
  IdDesc = 'id_DESC',
  InstagramLinkAsc = 'instagramLink_ASC',
  InstagramLinkDesc = 'instagramLink_DESC',
  IsSpanishAsc = 'isSpanish_ASC',
  IsSpanishDesc = 'isSpanish_DESC',
  LinkedinLinkAsc = 'linkedinLink_ASC',
  LinkedinLinkDesc = 'linkedinLink_DESC',
  MailchimpAsc = 'mailchimp_ASC',
  MailchimpDesc = 'mailchimp_DESC',
  MapKeyAsc = 'mapKey_ASC',
  MapKeyDesc = 'mapKey_DESC',
  MetaDescriptionAsc = 'metaDescription_ASC',
  MetaDescriptionDesc = 'metaDescription_DESC',
  MetaDomainAsc = 'metaDomain_ASC',
  MetaDomainDesc = 'metaDomain_DESC',
  MetaGoogleConsoleVerificationAsc = 'metaGoogleConsoleVerification_ASC',
  MetaGoogleConsoleVerificationDesc = 'metaGoogleConsoleVerification_DESC',
  PandoraLinkAsc = 'pandoraLink_ASC',
  PandoraLinkDesc = 'pandoraLink_DESC',
  PaypalClientIdAsc = 'paypalClientId_ASC',
  PaypalClientIdDesc = 'paypalClientId_DESC',
  PinterestLinkAsc = 'pinterestLink_ASC',
  PinterestLinkDesc = 'pinterestLink_DESC',
  PublishedAtAsc = 'publishedAt_ASC',
  PublishedAtDesc = 'publishedAt_DESC',
  SecondaryLinkAsc = 'secondaryLink_ASC',
  SecondaryLinkDesc = 'secondaryLink_DESC',
  SecondaryNameAsc = 'secondaryName_ASC',
  SecondaryNameDesc = 'secondaryName_DESC',
  SignatureAsc = 'signature_ASC',
  SignatureDesc = 'signature_DESC',
  SiteCssBodyClassAsc = 'siteCssBodyClass_ASC',
  SiteCssBodyClassDesc = 'siteCssBodyClass_DESC',
  SiteIdAsc = 'siteId_ASC',
  SiteIdDesc = 'siteId_DESC',
  SiteThemeAsc = 'siteTheme_ASC',
  SiteThemeDesc = 'siteTheme_DESC',
  SnapchatLinkAsc = 'snapchatLink_ASC',
  SnapchatLinkDesc = 'snapchatLink_DESC',
  SoundcloudLinkAsc = 'soundcloudLink_ASC',
  SoundcloudLinkDesc = 'soundcloudLink_DESC',
  SpotifyLinkAsc = 'spotifyLink_ASC',
  SpotifyLinkDesc = 'spotifyLink_DESC',
  ThreadsLinkAsc = 'threadsLink_ASC',
  ThreadsLinkDesc = 'threadsLink_DESC',
  TikTokLinkAsc = 'tikTokLink_ASC',
  TikTokLinkDesc = 'tikTokLink_DESC',
  TitleAsc = 'title_ASC',
  TitleDesc = 'title_DESC',
  TwitterLinkAsc = 'twitterLink_ASC',
  TwitterLinkDesc = 'twitterLink_DESC',
  UpdatedAtAsc = 'updatedAt_ASC',
  UpdatedAtDesc = 'updatedAt_DESC',
  YoutubeApiKeyAsc = 'youtubeApiKey_ASC',
  YoutubeApiKeyDesc = 'youtubeApiKey_DESC',
  YoutubeLinkAsc = 'youtubeLink_ASC',
  YoutubeLinkDesc = 'youtubeLink_DESC'
}

export type SiteLibraryUpdateInput = {
  analyticsId?: InputMaybe<Scalars['String']>;
  appleMusicLink?: InputMaybe<Scalars['String']>;
  contactEmail?: InputMaybe<Scalars['String']>;
  contactName?: InputMaybe<Scalars['String']>;
  contactPhone?: InputMaybe<Scalars['String']>;
  facebookLink?: InputMaybe<Scalars['String']>;
  facebookPixelId?: InputMaybe<Scalars['String']>;
  favicon?: InputMaybe<AssetUpdateOneInlineInput>;
  githubLink?: InputMaybe<Scalars['String']>;
  instagramLink?: InputMaybe<Scalars['String']>;
  isSpanish?: InputMaybe<Scalars['Boolean']>;
  linkedinLink?: InputMaybe<Scalars['String']>;
  logo?: InputMaybe<AssetUpdateOneInlineInput>;
  mailchimp?: InputMaybe<Scalars['String']>;
  mapKey?: InputMaybe<Scalars['String']>;
  metaAppleTouchIcon?: InputMaybe<AssetUpdateOneInlineInput>;
  metaDescription?: InputMaybe<Scalars['String']>;
  metaDomain?: InputMaybe<Scalars['String']>;
  metaGoogleConsoleVerification?: InputMaybe<Scalars['String']>;
  metaOgImage?: InputMaybe<AssetUpdateOneInlineInput>;
  pandoraLink?: InputMaybe<Scalars['String']>;
  paypalClientId?: InputMaybe<Scalars['String']>;
  pinterestLink?: InputMaybe<Scalars['String']>;
  secondaryLink?: InputMaybe<Scalars['String']>;
  secondaryLogo?: InputMaybe<AssetUpdateOneInlineInput>;
  secondaryName?: InputMaybe<Scalars['String']>;
  signature?: InputMaybe<Scalars['String']>;
  siteCssBodyClass?: InputMaybe<Scalars['String']>;
  siteId?: InputMaybe<Scalars['String']>;
  siteLibraryJson?: InputMaybe<Scalars['Json']>;
  siteTheme?: InputMaybe<SiteTheme>;
  snapchatLink?: InputMaybe<Scalars['String']>;
  soundcloudLink?: InputMaybe<Scalars['String']>;
  spotifyLink?: InputMaybe<Scalars['String']>;
  themeColor?: InputMaybe<RootColorUpdateOneInlineInput>;
  threadsLink?: InputMaybe<Scalars['String']>;
  tikTokLink?: InputMaybe<Scalars['String']>;
  title?: InputMaybe<Scalars['String']>;
  twitterLink?: InputMaybe<Scalars['String']>;
  youtubeApiKey?: InputMaybe<Scalars['String']>;
  youtubeLink?: InputMaybe<Scalars['String']>;
};

export type SiteLibraryUpdateManyInlineInput = {
  /** Connect multiple existing SiteLibrary documents */
  connect?: InputMaybe<Array<SiteLibraryConnectInput>>;
  /** Create and connect multiple SiteLibrary documents */
  create?: InputMaybe<Array<SiteLibraryCreateInput>>;
  /** Delete multiple SiteLibrary documents */
  delete?: InputMaybe<Array<SiteLibraryWhereUniqueInput>>;
  /** Disconnect multiple SiteLibrary documents */
  disconnect?: InputMaybe<Array<SiteLibraryWhereUniqueInput>>;
  /** Override currently-connected documents with multiple existing SiteLibrary documents */
  set?: InputMaybe<Array<SiteLibraryWhereUniqueInput>>;
  /** Update multiple SiteLibrary documents */
  update?: InputMaybe<Array<SiteLibraryUpdateWithNestedWhereUniqueInput>>;
  /** Upsert multiple SiteLibrary documents */
  upsert?: InputMaybe<Array<SiteLibraryUpsertWithNestedWhereUniqueInput>>;
};

export type SiteLibraryUpdateManyInput = {
  analyticsId?: InputMaybe<Scalars['String']>;
  appleMusicLink?: InputMaybe<Scalars['String']>;
  contactEmail?: InputMaybe<Scalars['String']>;
  contactName?: InputMaybe<Scalars['String']>;
  contactPhone?: InputMaybe<Scalars['String']>;
  facebookLink?: InputMaybe<Scalars['String']>;
  facebookPixelId?: InputMaybe<Scalars['String']>;
  githubLink?: InputMaybe<Scalars['String']>;
  instagramLink?: InputMaybe<Scalars['String']>;
  isSpanish?: InputMaybe<Scalars['Boolean']>;
  linkedinLink?: InputMaybe<Scalars['String']>;
  mailchimp?: InputMaybe<Scalars['String']>;
  mapKey?: InputMaybe<Scalars['String']>;
  metaDescription?: InputMaybe<Scalars['String']>;
  metaDomain?: InputMaybe<Scalars['String']>;
  metaGoogleConsoleVerification?: InputMaybe<Scalars['String']>;
  pandoraLink?: InputMaybe<Scalars['String']>;
  paypalClientId?: InputMaybe<Scalars['String']>;
  pinterestLink?: InputMaybe<Scalars['String']>;
  secondaryLink?: InputMaybe<Scalars['String']>;
  secondaryName?: InputMaybe<Scalars['String']>;
  siteCssBodyClass?: InputMaybe<Scalars['String']>;
  siteId?: InputMaybe<Scalars['String']>;
  siteLibraryJson?: InputMaybe<Scalars['Json']>;
  siteTheme?: InputMaybe<SiteTheme>;
  snapchatLink?: InputMaybe<Scalars['String']>;
  soundcloudLink?: InputMaybe<Scalars['String']>;
  spotifyLink?: InputMaybe<Scalars['String']>;
  threadsLink?: InputMaybe<Scalars['String']>;
  tikTokLink?: InputMaybe<Scalars['String']>;
  title?: InputMaybe<Scalars['String']>;
  twitterLink?: InputMaybe<Scalars['String']>;
  youtubeApiKey?: InputMaybe<Scalars['String']>;
  youtubeLink?: InputMaybe<Scalars['String']>;
};

export type SiteLibraryUpdateManyWithNestedWhereInput = {
  /** Update many input */
  data: SiteLibraryUpdateManyInput;
  /** Document search */
  where: SiteLibraryWhereInput;
};

export type SiteLibraryUpdateOneInlineInput = {
  /** Connect existing SiteLibrary document */
  connect?: InputMaybe<SiteLibraryWhereUniqueInput>;
  /** Create and connect one SiteLibrary document */
  create?: InputMaybe<SiteLibraryCreateInput>;
  /** Delete currently connected SiteLibrary document */
  delete?: InputMaybe<Scalars['Boolean']>;
  /** Disconnect currently connected SiteLibrary document */
  disconnect?: InputMaybe<Scalars['Boolean']>;
  /** Update single SiteLibrary document */
  update?: InputMaybe<SiteLibraryUpdateWithNestedWhereUniqueInput>;
  /** Upsert single SiteLibrary document */
  upsert?: InputMaybe<SiteLibraryUpsertWithNestedWhereUniqueInput>;
};

export type SiteLibraryUpdateWithNestedWhereUniqueInput = {
  /** Document to update */
  data: SiteLibraryUpdateInput;
  /** Unique document search */
  where: SiteLibraryWhereUniqueInput;
};

export type SiteLibraryUpsertInput = {
  /** Create document if it didn't exist */
  create: SiteLibraryCreateInput;
  /** Update document if it exists */
  update: SiteLibraryUpdateInput;
};

export type SiteLibraryUpsertWithNestedWhereUniqueInput = {
  /** Upsert data */
  data: SiteLibraryUpsertInput;
  /** Unique document search */
  where: SiteLibraryWhereUniqueInput;
};

/** This contains a set of filters that can be used to compare values internally */
export type SiteLibraryWhereComparatorInput = {
  /** This field can be used to request to check if the entry is outdated by internal comparison */
  outdated_to?: InputMaybe<Scalars['Boolean']>;
};

/** Identifies documents */
export type SiteLibraryWhereInput = {
  /** Logical AND on all given filters. */
  AND?: InputMaybe<Array<SiteLibraryWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: InputMaybe<Array<SiteLibraryWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: InputMaybe<Array<SiteLibraryWhereInput>>;
  /** Contains search across all appropriate fields. */
  _search?: InputMaybe<Scalars['String']>;
  analyticsId?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  analyticsId_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  analyticsId_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  analyticsId_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Any other value that exists and is not equal to the given value. */
  analyticsId_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  analyticsId_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  analyticsId_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  analyticsId_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  analyticsId_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  analyticsId_starts_with?: InputMaybe<Scalars['String']>;
  appleMusicLink?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  appleMusicLink_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  appleMusicLink_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  appleMusicLink_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Any other value that exists and is not equal to the given value. */
  appleMusicLink_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  appleMusicLink_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  appleMusicLink_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  appleMusicLink_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  appleMusicLink_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  appleMusicLink_starts_with?: InputMaybe<Scalars['String']>;
  contactEmail?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  contactEmail_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  contactEmail_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  contactEmail_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Any other value that exists and is not equal to the given value. */
  contactEmail_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  contactEmail_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  contactEmail_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  contactEmail_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  contactEmail_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  contactEmail_starts_with?: InputMaybe<Scalars['String']>;
  contactName?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  contactName_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  contactName_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  contactName_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Any other value that exists and is not equal to the given value. */
  contactName_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  contactName_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  contactName_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  contactName_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  contactName_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  contactName_starts_with?: InputMaybe<Scalars['String']>;
  contactPhone?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  contactPhone_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  contactPhone_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  contactPhone_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Any other value that exists and is not equal to the given value. */
  contactPhone_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  contactPhone_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  contactPhone_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  contactPhone_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  contactPhone_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  contactPhone_starts_with?: InputMaybe<Scalars['String']>;
  createdAt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  createdAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  createdAt_gte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  createdAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  /** All values less than the given value. */
  createdAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  createdAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** Any other value that exists and is not equal to the given value. */
  createdAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not contained in given list. */
  createdAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  createdBy?: InputMaybe<UserWhereInput>;
  documentInStages_every?: InputMaybe<SiteLibraryWhereStageInput>;
  documentInStages_none?: InputMaybe<SiteLibraryWhereStageInput>;
  documentInStages_some?: InputMaybe<SiteLibraryWhereStageInput>;
  facebookLink?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  facebookLink_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  facebookLink_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  facebookLink_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Any other value that exists and is not equal to the given value. */
  facebookLink_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  facebookLink_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  facebookLink_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  facebookLink_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  facebookLink_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  facebookLink_starts_with?: InputMaybe<Scalars['String']>;
  facebookPixelId?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  facebookPixelId_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  facebookPixelId_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  facebookPixelId_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Any other value that exists and is not equal to the given value. */
  facebookPixelId_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  facebookPixelId_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  facebookPixelId_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  facebookPixelId_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  facebookPixelId_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  facebookPixelId_starts_with?: InputMaybe<Scalars['String']>;
  favicon?: InputMaybe<AssetWhereInput>;
  githubLink?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  githubLink_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  githubLink_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  githubLink_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Any other value that exists and is not equal to the given value. */
  githubLink_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  githubLink_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  githubLink_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  githubLink_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  githubLink_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  githubLink_starts_with?: InputMaybe<Scalars['String']>;
  id?: InputMaybe<Scalars['ID']>;
  /** All values containing the given string. */
  id_contains?: InputMaybe<Scalars['ID']>;
  /** All values ending with the given string. */
  id_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are contained in given list. */
  id_in?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** Any other value that exists and is not equal to the given value. */
  id_not?: InputMaybe<Scalars['ID']>;
  /** All values not containing the given string. */
  id_not_contains?: InputMaybe<Scalars['ID']>;
  /** All values not ending with the given string */
  id_not_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are not contained in given list. */
  id_not_in?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** All values not starting with the given string. */
  id_not_starts_with?: InputMaybe<Scalars['ID']>;
  /** All values starting with the given string. */
  id_starts_with?: InputMaybe<Scalars['ID']>;
  instagramLink?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  instagramLink_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  instagramLink_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  instagramLink_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Any other value that exists and is not equal to the given value. */
  instagramLink_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  instagramLink_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  instagramLink_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  instagramLink_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  instagramLink_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  instagramLink_starts_with?: InputMaybe<Scalars['String']>;
  isSpanish?: InputMaybe<Scalars['Boolean']>;
  /** Any other value that exists and is not equal to the given value. */
  isSpanish_not?: InputMaybe<Scalars['Boolean']>;
  linkedinLink?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  linkedinLink_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  linkedinLink_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  linkedinLink_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Any other value that exists and is not equal to the given value. */
  linkedinLink_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  linkedinLink_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  linkedinLink_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  linkedinLink_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  linkedinLink_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  linkedinLink_starts_with?: InputMaybe<Scalars['String']>;
  logo?: InputMaybe<AssetWhereInput>;
  mailchimp?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  mailchimp_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  mailchimp_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  mailchimp_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Any other value that exists and is not equal to the given value. */
  mailchimp_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  mailchimp_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  mailchimp_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  mailchimp_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  mailchimp_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  mailchimp_starts_with?: InputMaybe<Scalars['String']>;
  mapKey?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  mapKey_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  mapKey_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  mapKey_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Any other value that exists and is not equal to the given value. */
  mapKey_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  mapKey_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  mapKey_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  mapKey_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  mapKey_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  mapKey_starts_with?: InputMaybe<Scalars['String']>;
  metaAppleTouchIcon?: InputMaybe<AssetWhereInput>;
  metaDescription?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  metaDescription_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  metaDescription_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  metaDescription_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Any other value that exists and is not equal to the given value. */
  metaDescription_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  metaDescription_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  metaDescription_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  metaDescription_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  metaDescription_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  metaDescription_starts_with?: InputMaybe<Scalars['String']>;
  metaDomain?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  metaDomain_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  metaDomain_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  metaDomain_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Any other value that exists and is not equal to the given value. */
  metaDomain_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  metaDomain_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  metaDomain_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  metaDomain_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  metaDomain_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  metaDomain_starts_with?: InputMaybe<Scalars['String']>;
  metaGoogleConsoleVerification?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  metaGoogleConsoleVerification_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  metaGoogleConsoleVerification_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  metaGoogleConsoleVerification_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Any other value that exists and is not equal to the given value. */
  metaGoogleConsoleVerification_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  metaGoogleConsoleVerification_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  metaGoogleConsoleVerification_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  metaGoogleConsoleVerification_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  metaGoogleConsoleVerification_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  metaGoogleConsoleVerification_starts_with?: InputMaybe<Scalars['String']>;
  metaOgImage?: InputMaybe<AssetWhereInput>;
  pandoraLink?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  pandoraLink_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  pandoraLink_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  pandoraLink_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Any other value that exists and is not equal to the given value. */
  pandoraLink_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  pandoraLink_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  pandoraLink_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  pandoraLink_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  pandoraLink_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  pandoraLink_starts_with?: InputMaybe<Scalars['String']>;
  paypalClientId?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  paypalClientId_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  paypalClientId_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  paypalClientId_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Any other value that exists and is not equal to the given value. */
  paypalClientId_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  paypalClientId_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  paypalClientId_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  paypalClientId_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  paypalClientId_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  paypalClientId_starts_with?: InputMaybe<Scalars['String']>;
  pinterestLink?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  pinterestLink_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  pinterestLink_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  pinterestLink_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Any other value that exists and is not equal to the given value. */
  pinterestLink_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  pinterestLink_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  pinterestLink_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  pinterestLink_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  pinterestLink_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  pinterestLink_starts_with?: InputMaybe<Scalars['String']>;
  publishedAt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  publishedAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  publishedAt_gte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  publishedAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  /** All values less than the given value. */
  publishedAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  publishedAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** Any other value that exists and is not equal to the given value. */
  publishedAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not contained in given list. */
  publishedAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  publishedBy?: InputMaybe<UserWhereInput>;
  scheduledIn_every?: InputMaybe<ScheduledOperationWhereInput>;
  scheduledIn_none?: InputMaybe<ScheduledOperationWhereInput>;
  scheduledIn_some?: InputMaybe<ScheduledOperationWhereInput>;
  secondaryLink?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  secondaryLink_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  secondaryLink_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  secondaryLink_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Any other value that exists and is not equal to the given value. */
  secondaryLink_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  secondaryLink_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  secondaryLink_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  secondaryLink_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  secondaryLink_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  secondaryLink_starts_with?: InputMaybe<Scalars['String']>;
  secondaryLogo?: InputMaybe<AssetWhereInput>;
  secondaryName?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  secondaryName_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  secondaryName_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  secondaryName_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Any other value that exists and is not equal to the given value. */
  secondaryName_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  secondaryName_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  secondaryName_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  secondaryName_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  secondaryName_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  secondaryName_starts_with?: InputMaybe<Scalars['String']>;
  signature?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  signature_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  signature_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  signature_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Any other value that exists and is not equal to the given value. */
  signature_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  signature_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  signature_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  signature_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  signature_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  signature_starts_with?: InputMaybe<Scalars['String']>;
  siteCssBodyClass?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  siteCssBodyClass_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  siteCssBodyClass_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  siteCssBodyClass_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Any other value that exists and is not equal to the given value. */
  siteCssBodyClass_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  siteCssBodyClass_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  siteCssBodyClass_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  siteCssBodyClass_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  siteCssBodyClass_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  siteCssBodyClass_starts_with?: InputMaybe<Scalars['String']>;
  siteId?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  siteId_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  siteId_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  siteId_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Any other value that exists and is not equal to the given value. */
  siteId_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  siteId_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  siteId_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  siteId_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  siteId_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  siteId_starts_with?: InputMaybe<Scalars['String']>;
  /** All values containing the given json path. */
  siteLibraryJson_json_path_exists?: InputMaybe<Scalars['String']>;
  /**
   * Recursively tries to find the provided JSON scalar value inside the field.
   * It does use an exact match when comparing values.
   * If you pass `null` as value the filter will be ignored.
   * Note: This filter fails if you try to look for a non scalar JSON value!
   */
  siteLibraryJson_value_recursive?: InputMaybe<Scalars['Json']>;
  siteTheme?: InputMaybe<SiteTheme>;
  /** All values that are contained in given list. */
  siteTheme_in?: InputMaybe<Array<InputMaybe<SiteTheme>>>;
  /** Any other value that exists and is not equal to the given value. */
  siteTheme_not?: InputMaybe<SiteTheme>;
  /** All values that are not contained in given list. */
  siteTheme_not_in?: InputMaybe<Array<InputMaybe<SiteTheme>>>;
  snapchatLink?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  snapchatLink_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  snapchatLink_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  snapchatLink_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Any other value that exists and is not equal to the given value. */
  snapchatLink_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  snapchatLink_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  snapchatLink_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  snapchatLink_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  snapchatLink_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  snapchatLink_starts_with?: InputMaybe<Scalars['String']>;
  soundcloudLink?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  soundcloudLink_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  soundcloudLink_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  soundcloudLink_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Any other value that exists and is not equal to the given value. */
  soundcloudLink_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  soundcloudLink_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  soundcloudLink_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  soundcloudLink_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  soundcloudLink_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  soundcloudLink_starts_with?: InputMaybe<Scalars['String']>;
  spotifyLink?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  spotifyLink_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  spotifyLink_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  spotifyLink_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Any other value that exists and is not equal to the given value. */
  spotifyLink_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  spotifyLink_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  spotifyLink_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  spotifyLink_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  spotifyLink_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  spotifyLink_starts_with?: InputMaybe<Scalars['String']>;
  themeColor?: InputMaybe<RootColorWhereInput>;
  threadsLink?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  threadsLink_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  threadsLink_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  threadsLink_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Any other value that exists and is not equal to the given value. */
  threadsLink_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  threadsLink_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  threadsLink_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  threadsLink_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  threadsLink_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  threadsLink_starts_with?: InputMaybe<Scalars['String']>;
  tikTokLink?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  tikTokLink_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  tikTokLink_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  tikTokLink_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Any other value that exists and is not equal to the given value. */
  tikTokLink_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  tikTokLink_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  tikTokLink_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  tikTokLink_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  tikTokLink_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  tikTokLink_starts_with?: InputMaybe<Scalars['String']>;
  title?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  title_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  title_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  title_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Any other value that exists and is not equal to the given value. */
  title_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  title_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  title_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  title_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  title_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  title_starts_with?: InputMaybe<Scalars['String']>;
  twitterLink?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  twitterLink_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  twitterLink_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  twitterLink_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Any other value that exists and is not equal to the given value. */
  twitterLink_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  twitterLink_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  twitterLink_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  twitterLink_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  twitterLink_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  twitterLink_starts_with?: InputMaybe<Scalars['String']>;
  updatedAt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  updatedAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  updatedAt_gte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  updatedAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  /** All values less than the given value. */
  updatedAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  updatedAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** Any other value that exists and is not equal to the given value. */
  updatedAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not contained in given list. */
  updatedAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  updatedBy?: InputMaybe<UserWhereInput>;
  youtubeApiKey?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  youtubeApiKey_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  youtubeApiKey_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  youtubeApiKey_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Any other value that exists and is not equal to the given value. */
  youtubeApiKey_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  youtubeApiKey_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  youtubeApiKey_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  youtubeApiKey_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  youtubeApiKey_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  youtubeApiKey_starts_with?: InputMaybe<Scalars['String']>;
  youtubeLink?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  youtubeLink_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  youtubeLink_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  youtubeLink_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Any other value that exists and is not equal to the given value. */
  youtubeLink_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  youtubeLink_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  youtubeLink_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  youtubeLink_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  youtubeLink_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  youtubeLink_starts_with?: InputMaybe<Scalars['String']>;
};

/** The document in stages filter allows specifying a stage entry to cross compare the same document between different stages */
export type SiteLibraryWhereStageInput = {
  /** Logical AND on all given filters. */
  AND?: InputMaybe<Array<SiteLibraryWhereStageInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: InputMaybe<Array<SiteLibraryWhereStageInput>>;
  /** Logical OR on all given filters. */
  OR?: InputMaybe<Array<SiteLibraryWhereStageInput>>;
  /** This field contains fields which can be set as true or false to specify an internal comparison */
  compareWithParent?: InputMaybe<SiteLibraryWhereComparatorInput>;
  /** Specify the stage to compare with */
  stage?: InputMaybe<Stage>;
};

/** References SiteLibrary record uniquely */
export type SiteLibraryWhereUniqueInput = {
  id?: InputMaybe<Scalars['ID']>;
  signature?: InputMaybe<Scalars['String']>;
};

export enum SiteTheme {
  Default = 'default'
}

/** Stage system enumeration */
export enum Stage {
  /** The Draft is the default stage for all your content. */
  Draft = 'DRAFT',
  /** The Published stage is where you can publish your content to. */
  Published = 'PUBLISHED'
}

export enum SystemDateTimeFieldVariation {
  Base = 'BASE',
  Combined = 'COMBINED',
  Localization = 'LOCALIZATION'
}

export type Testimonial = Entity & Node & {
  __typename?: 'Testimonial';
  /** The time the document was created */
  createdAt: Scalars['DateTime'];
  /** User that created this document */
  createdBy?: Maybe<User>;
  /** Get the document in other stages */
  documentInStages: Array<Testimonial>;
  /** List of Testimonial versions */
  history: Array<Version>;
  /** The unique identifier */
  id: Scalars['ID'];
  /** The time the document was published. Null on documents in draft stage. */
  publishedAt?: Maybe<Scalars['DateTime']>;
  /** User that last published this document */
  publishedBy?: Maybe<User>;
  scheduledIn: Array<ScheduledOperation>;
  /** System stage field */
  stage: Stage;
  starCount?: Maybe<Scalars['Int']>;
  testimonialAvatar?: Maybe<Asset>;
  testimonialJobTitle?: Maybe<Scalars['String']>;
  testimonialLink?: Maybe<Scalars['String']>;
  testimonialLinkLabel?: Maybe<Scalars['String']>;
  testimonialLogo?: Maybe<Asset>;
  testimonialName?: Maybe<Scalars['String']>;
  testimonialSourceLink?: Maybe<Scalars['String']>;
  testimonialText?: Maybe<RichText>;
  testimonialType?: Maybe<TestimonialType>;
  /** The time the document was updated */
  updatedAt: Scalars['DateTime'];
  /** User that last updated this document */
  updatedBy?: Maybe<User>;
};


export type TestimonialCreatedByArgs = {
  forceParentLocale?: InputMaybe<Scalars['Boolean']>;
  locales?: InputMaybe<Array<Locale>>;
};


export type TestimonialDocumentInStagesArgs = {
  includeCurrent?: Scalars['Boolean'];
  inheritLocale?: Scalars['Boolean'];
  stages?: Array<Stage>;
};


export type TestimonialHistoryArgs = {
  limit?: Scalars['Int'];
  skip?: Scalars['Int'];
  stageOverride?: InputMaybe<Stage>;
};


export type TestimonialPublishedByArgs = {
  forceParentLocale?: InputMaybe<Scalars['Boolean']>;
  locales?: InputMaybe<Array<Locale>>;
};


export type TestimonialScheduledInArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  forceParentLocale?: InputMaybe<Scalars['Boolean']>;
  last?: InputMaybe<Scalars['Int']>;
  locales?: InputMaybe<Array<Locale>>;
  skip?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<ScheduledOperationWhereInput>;
};


export type TestimonialTestimonialAvatarArgs = {
  forceParentLocale?: InputMaybe<Scalars['Boolean']>;
  locales?: InputMaybe<Array<Locale>>;
};


export type TestimonialTestimonialLogoArgs = {
  forceParentLocale?: InputMaybe<Scalars['Boolean']>;
  locales?: InputMaybe<Array<Locale>>;
};


export type TestimonialUpdatedByArgs = {
  forceParentLocale?: InputMaybe<Scalars['Boolean']>;
  locales?: InputMaybe<Array<Locale>>;
};

export type TestimonialConnectInput = {
  /** Allow to specify document position in list of connected documents, will default to appending at end of list */
  position?: InputMaybe<ConnectPositionInput>;
  /** Document to connect */
  where: TestimonialWhereUniqueInput;
};

/** A connection to a list of items. */
export type TestimonialConnection = {
  __typename?: 'TestimonialConnection';
  aggregate: Aggregate;
  /** A list of edges. */
  edges: Array<TestimonialEdge>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
};

export type TestimonialCreateInput = {
  createdAt?: InputMaybe<Scalars['DateTime']>;
  starCount?: InputMaybe<Scalars['Int']>;
  testimonialAvatar?: InputMaybe<AssetCreateOneInlineInput>;
  testimonialJobTitle?: InputMaybe<Scalars['String']>;
  testimonialLink?: InputMaybe<Scalars['String']>;
  testimonialLinkLabel?: InputMaybe<Scalars['String']>;
  testimonialLogo?: InputMaybe<AssetCreateOneInlineInput>;
  testimonialName?: InputMaybe<Scalars['String']>;
  testimonialSourceLink?: InputMaybe<Scalars['String']>;
  testimonialText?: InputMaybe<Scalars['RichTextAST']>;
  testimonialType?: InputMaybe<TestimonialType>;
  updatedAt?: InputMaybe<Scalars['DateTime']>;
};

export type TestimonialCreateManyInlineInput = {
  /** Connect multiple existing Testimonial documents */
  connect?: InputMaybe<Array<TestimonialWhereUniqueInput>>;
  /** Create and connect multiple existing Testimonial documents */
  create?: InputMaybe<Array<TestimonialCreateInput>>;
};

export type TestimonialCreateOneInlineInput = {
  /** Connect one existing Testimonial document */
  connect?: InputMaybe<TestimonialWhereUniqueInput>;
  /** Create and connect one Testimonial document */
  create?: InputMaybe<TestimonialCreateInput>;
};

/** An edge in a connection. */
export type TestimonialEdge = {
  __typename?: 'TestimonialEdge';
  /** A cursor for use in pagination. */
  cursor: Scalars['String'];
  /** The item at the end of the edge. */
  node: Testimonial;
};

/** Identifies documents */
export type TestimonialManyWhereInput = {
  /** Logical AND on all given filters. */
  AND?: InputMaybe<Array<TestimonialWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: InputMaybe<Array<TestimonialWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: InputMaybe<Array<TestimonialWhereInput>>;
  /** Contains search across all appropriate fields. */
  _search?: InputMaybe<Scalars['String']>;
  createdAt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  createdAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  createdAt_gte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  createdAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  /** All values less than the given value. */
  createdAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  createdAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** Any other value that exists and is not equal to the given value. */
  createdAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not contained in given list. */
  createdAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  createdBy?: InputMaybe<UserWhereInput>;
  documentInStages_every?: InputMaybe<TestimonialWhereStageInput>;
  documentInStages_none?: InputMaybe<TestimonialWhereStageInput>;
  documentInStages_some?: InputMaybe<TestimonialWhereStageInput>;
  id?: InputMaybe<Scalars['ID']>;
  /** All values containing the given string. */
  id_contains?: InputMaybe<Scalars['ID']>;
  /** All values ending with the given string. */
  id_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are contained in given list. */
  id_in?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** Any other value that exists and is not equal to the given value. */
  id_not?: InputMaybe<Scalars['ID']>;
  /** All values not containing the given string. */
  id_not_contains?: InputMaybe<Scalars['ID']>;
  /** All values not ending with the given string */
  id_not_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are not contained in given list. */
  id_not_in?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** All values not starting with the given string. */
  id_not_starts_with?: InputMaybe<Scalars['ID']>;
  /** All values starting with the given string. */
  id_starts_with?: InputMaybe<Scalars['ID']>;
  publishedAt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  publishedAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  publishedAt_gte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  publishedAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  /** All values less than the given value. */
  publishedAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  publishedAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** Any other value that exists and is not equal to the given value. */
  publishedAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not contained in given list. */
  publishedAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  publishedBy?: InputMaybe<UserWhereInput>;
  scheduledIn_every?: InputMaybe<ScheduledOperationWhereInput>;
  scheduledIn_none?: InputMaybe<ScheduledOperationWhereInput>;
  scheduledIn_some?: InputMaybe<ScheduledOperationWhereInput>;
  starCount?: InputMaybe<Scalars['Int']>;
  /** All values greater than the given value. */
  starCount_gt?: InputMaybe<Scalars['Int']>;
  /** All values greater than or equal the given value. */
  starCount_gte?: InputMaybe<Scalars['Int']>;
  /** All values that are contained in given list. */
  starCount_in?: InputMaybe<Array<InputMaybe<Scalars['Int']>>>;
  /** All values less than the given value. */
  starCount_lt?: InputMaybe<Scalars['Int']>;
  /** All values less than or equal the given value. */
  starCount_lte?: InputMaybe<Scalars['Int']>;
  /** Any other value that exists and is not equal to the given value. */
  starCount_not?: InputMaybe<Scalars['Int']>;
  /** All values that are not contained in given list. */
  starCount_not_in?: InputMaybe<Array<InputMaybe<Scalars['Int']>>>;
  testimonialAvatar?: InputMaybe<AssetWhereInput>;
  testimonialJobTitle?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  testimonialJobTitle_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  testimonialJobTitle_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  testimonialJobTitle_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Any other value that exists and is not equal to the given value. */
  testimonialJobTitle_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  testimonialJobTitle_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  testimonialJobTitle_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  testimonialJobTitle_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  testimonialJobTitle_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  testimonialJobTitle_starts_with?: InputMaybe<Scalars['String']>;
  testimonialLink?: InputMaybe<Scalars['String']>;
  testimonialLinkLabel?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  testimonialLinkLabel_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  testimonialLinkLabel_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  testimonialLinkLabel_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Any other value that exists and is not equal to the given value. */
  testimonialLinkLabel_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  testimonialLinkLabel_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  testimonialLinkLabel_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  testimonialLinkLabel_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  testimonialLinkLabel_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  testimonialLinkLabel_starts_with?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  testimonialLink_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  testimonialLink_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  testimonialLink_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Any other value that exists and is not equal to the given value. */
  testimonialLink_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  testimonialLink_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  testimonialLink_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  testimonialLink_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  testimonialLink_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  testimonialLink_starts_with?: InputMaybe<Scalars['String']>;
  testimonialLogo?: InputMaybe<AssetWhereInput>;
  testimonialName?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  testimonialName_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  testimonialName_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  testimonialName_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Any other value that exists and is not equal to the given value. */
  testimonialName_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  testimonialName_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  testimonialName_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  testimonialName_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  testimonialName_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  testimonialName_starts_with?: InputMaybe<Scalars['String']>;
  testimonialSourceLink?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  testimonialSourceLink_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  testimonialSourceLink_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  testimonialSourceLink_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Any other value that exists and is not equal to the given value. */
  testimonialSourceLink_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  testimonialSourceLink_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  testimonialSourceLink_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  testimonialSourceLink_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  testimonialSourceLink_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  testimonialSourceLink_starts_with?: InputMaybe<Scalars['String']>;
  testimonialType?: InputMaybe<TestimonialType>;
  /** All values that are contained in given list. */
  testimonialType_in?: InputMaybe<Array<InputMaybe<TestimonialType>>>;
  /** Any other value that exists and is not equal to the given value. */
  testimonialType_not?: InputMaybe<TestimonialType>;
  /** All values that are not contained in given list. */
  testimonialType_not_in?: InputMaybe<Array<InputMaybe<TestimonialType>>>;
  updatedAt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  updatedAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  updatedAt_gte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  updatedAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  /** All values less than the given value. */
  updatedAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  updatedAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** Any other value that exists and is not equal to the given value. */
  updatedAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not contained in given list. */
  updatedAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  updatedBy?: InputMaybe<UserWhereInput>;
};

export enum TestimonialOrderByInput {
  CreatedAtAsc = 'createdAt_ASC',
  CreatedAtDesc = 'createdAt_DESC',
  IdAsc = 'id_ASC',
  IdDesc = 'id_DESC',
  PublishedAtAsc = 'publishedAt_ASC',
  PublishedAtDesc = 'publishedAt_DESC',
  StarCountAsc = 'starCount_ASC',
  StarCountDesc = 'starCount_DESC',
  TestimonialJobTitleAsc = 'testimonialJobTitle_ASC',
  TestimonialJobTitleDesc = 'testimonialJobTitle_DESC',
  TestimonialLinkLabelAsc = 'testimonialLinkLabel_ASC',
  TestimonialLinkLabelDesc = 'testimonialLinkLabel_DESC',
  TestimonialLinkAsc = 'testimonialLink_ASC',
  TestimonialLinkDesc = 'testimonialLink_DESC',
  TestimonialNameAsc = 'testimonialName_ASC',
  TestimonialNameDesc = 'testimonialName_DESC',
  TestimonialSourceLinkAsc = 'testimonialSourceLink_ASC',
  TestimonialSourceLinkDesc = 'testimonialSourceLink_DESC',
  TestimonialTypeAsc = 'testimonialType_ASC',
  TestimonialTypeDesc = 'testimonialType_DESC',
  UpdatedAtAsc = 'updatedAt_ASC',
  UpdatedAtDesc = 'updatedAt_DESC'
}

export enum TestimonialType {
  Review = 'review',
  Sponsor = 'sponsor'
}

export type TestimonialUpdateInput = {
  starCount?: InputMaybe<Scalars['Int']>;
  testimonialAvatar?: InputMaybe<AssetUpdateOneInlineInput>;
  testimonialJobTitle?: InputMaybe<Scalars['String']>;
  testimonialLink?: InputMaybe<Scalars['String']>;
  testimonialLinkLabel?: InputMaybe<Scalars['String']>;
  testimonialLogo?: InputMaybe<AssetUpdateOneInlineInput>;
  testimonialName?: InputMaybe<Scalars['String']>;
  testimonialSourceLink?: InputMaybe<Scalars['String']>;
  testimonialText?: InputMaybe<Scalars['RichTextAST']>;
  testimonialType?: InputMaybe<TestimonialType>;
};

export type TestimonialUpdateManyInlineInput = {
  /** Connect multiple existing Testimonial documents */
  connect?: InputMaybe<Array<TestimonialConnectInput>>;
  /** Create and connect multiple Testimonial documents */
  create?: InputMaybe<Array<TestimonialCreateInput>>;
  /** Delete multiple Testimonial documents */
  delete?: InputMaybe<Array<TestimonialWhereUniqueInput>>;
  /** Disconnect multiple Testimonial documents */
  disconnect?: InputMaybe<Array<TestimonialWhereUniqueInput>>;
  /** Override currently-connected documents with multiple existing Testimonial documents */
  set?: InputMaybe<Array<TestimonialWhereUniqueInput>>;
  /** Update multiple Testimonial documents */
  update?: InputMaybe<Array<TestimonialUpdateWithNestedWhereUniqueInput>>;
  /** Upsert multiple Testimonial documents */
  upsert?: InputMaybe<Array<TestimonialUpsertWithNestedWhereUniqueInput>>;
};

export type TestimonialUpdateManyInput = {
  starCount?: InputMaybe<Scalars['Int']>;
  testimonialJobTitle?: InputMaybe<Scalars['String']>;
  testimonialLink?: InputMaybe<Scalars['String']>;
  testimonialLinkLabel?: InputMaybe<Scalars['String']>;
  testimonialName?: InputMaybe<Scalars['String']>;
  testimonialSourceLink?: InputMaybe<Scalars['String']>;
  testimonialText?: InputMaybe<Scalars['RichTextAST']>;
  testimonialType?: InputMaybe<TestimonialType>;
};

export type TestimonialUpdateManyWithNestedWhereInput = {
  /** Update many input */
  data: TestimonialUpdateManyInput;
  /** Document search */
  where: TestimonialWhereInput;
};

export type TestimonialUpdateOneInlineInput = {
  /** Connect existing Testimonial document */
  connect?: InputMaybe<TestimonialWhereUniqueInput>;
  /** Create and connect one Testimonial document */
  create?: InputMaybe<TestimonialCreateInput>;
  /** Delete currently connected Testimonial document */
  delete?: InputMaybe<Scalars['Boolean']>;
  /** Disconnect currently connected Testimonial document */
  disconnect?: InputMaybe<Scalars['Boolean']>;
  /** Update single Testimonial document */
  update?: InputMaybe<TestimonialUpdateWithNestedWhereUniqueInput>;
  /** Upsert single Testimonial document */
  upsert?: InputMaybe<TestimonialUpsertWithNestedWhereUniqueInput>;
};

export type TestimonialUpdateWithNestedWhereUniqueInput = {
  /** Document to update */
  data: TestimonialUpdateInput;
  /** Unique document search */
  where: TestimonialWhereUniqueInput;
};

export type TestimonialUpsertInput = {
  /** Create document if it didn't exist */
  create: TestimonialCreateInput;
  /** Update document if it exists */
  update: TestimonialUpdateInput;
};

export type TestimonialUpsertWithNestedWhereUniqueInput = {
  /** Upsert data */
  data: TestimonialUpsertInput;
  /** Unique document search */
  where: TestimonialWhereUniqueInput;
};

/** This contains a set of filters that can be used to compare values internally */
export type TestimonialWhereComparatorInput = {
  /** This field can be used to request to check if the entry is outdated by internal comparison */
  outdated_to?: InputMaybe<Scalars['Boolean']>;
};

/** Identifies documents */
export type TestimonialWhereInput = {
  /** Logical AND on all given filters. */
  AND?: InputMaybe<Array<TestimonialWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: InputMaybe<Array<TestimonialWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: InputMaybe<Array<TestimonialWhereInput>>;
  /** Contains search across all appropriate fields. */
  _search?: InputMaybe<Scalars['String']>;
  createdAt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  createdAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  createdAt_gte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  createdAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  /** All values less than the given value. */
  createdAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  createdAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** Any other value that exists and is not equal to the given value. */
  createdAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not contained in given list. */
  createdAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  createdBy?: InputMaybe<UserWhereInput>;
  documentInStages_every?: InputMaybe<TestimonialWhereStageInput>;
  documentInStages_none?: InputMaybe<TestimonialWhereStageInput>;
  documentInStages_some?: InputMaybe<TestimonialWhereStageInput>;
  id?: InputMaybe<Scalars['ID']>;
  /** All values containing the given string. */
  id_contains?: InputMaybe<Scalars['ID']>;
  /** All values ending with the given string. */
  id_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are contained in given list. */
  id_in?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** Any other value that exists and is not equal to the given value. */
  id_not?: InputMaybe<Scalars['ID']>;
  /** All values not containing the given string. */
  id_not_contains?: InputMaybe<Scalars['ID']>;
  /** All values not ending with the given string */
  id_not_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are not contained in given list. */
  id_not_in?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** All values not starting with the given string. */
  id_not_starts_with?: InputMaybe<Scalars['ID']>;
  /** All values starting with the given string. */
  id_starts_with?: InputMaybe<Scalars['ID']>;
  publishedAt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  publishedAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  publishedAt_gte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  publishedAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  /** All values less than the given value. */
  publishedAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  publishedAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** Any other value that exists and is not equal to the given value. */
  publishedAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not contained in given list. */
  publishedAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  publishedBy?: InputMaybe<UserWhereInput>;
  scheduledIn_every?: InputMaybe<ScheduledOperationWhereInput>;
  scheduledIn_none?: InputMaybe<ScheduledOperationWhereInput>;
  scheduledIn_some?: InputMaybe<ScheduledOperationWhereInput>;
  starCount?: InputMaybe<Scalars['Int']>;
  /** All values greater than the given value. */
  starCount_gt?: InputMaybe<Scalars['Int']>;
  /** All values greater than or equal the given value. */
  starCount_gte?: InputMaybe<Scalars['Int']>;
  /** All values that are contained in given list. */
  starCount_in?: InputMaybe<Array<InputMaybe<Scalars['Int']>>>;
  /** All values less than the given value. */
  starCount_lt?: InputMaybe<Scalars['Int']>;
  /** All values less than or equal the given value. */
  starCount_lte?: InputMaybe<Scalars['Int']>;
  /** Any other value that exists and is not equal to the given value. */
  starCount_not?: InputMaybe<Scalars['Int']>;
  /** All values that are not contained in given list. */
  starCount_not_in?: InputMaybe<Array<InputMaybe<Scalars['Int']>>>;
  testimonialAvatar?: InputMaybe<AssetWhereInput>;
  testimonialJobTitle?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  testimonialJobTitle_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  testimonialJobTitle_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  testimonialJobTitle_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Any other value that exists and is not equal to the given value. */
  testimonialJobTitle_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  testimonialJobTitle_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  testimonialJobTitle_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  testimonialJobTitle_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  testimonialJobTitle_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  testimonialJobTitle_starts_with?: InputMaybe<Scalars['String']>;
  testimonialLink?: InputMaybe<Scalars['String']>;
  testimonialLinkLabel?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  testimonialLinkLabel_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  testimonialLinkLabel_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  testimonialLinkLabel_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Any other value that exists and is not equal to the given value. */
  testimonialLinkLabel_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  testimonialLinkLabel_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  testimonialLinkLabel_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  testimonialLinkLabel_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  testimonialLinkLabel_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  testimonialLinkLabel_starts_with?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  testimonialLink_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  testimonialLink_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  testimonialLink_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Any other value that exists and is not equal to the given value. */
  testimonialLink_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  testimonialLink_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  testimonialLink_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  testimonialLink_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  testimonialLink_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  testimonialLink_starts_with?: InputMaybe<Scalars['String']>;
  testimonialLogo?: InputMaybe<AssetWhereInput>;
  testimonialName?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  testimonialName_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  testimonialName_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  testimonialName_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Any other value that exists and is not equal to the given value. */
  testimonialName_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  testimonialName_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  testimonialName_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  testimonialName_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  testimonialName_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  testimonialName_starts_with?: InputMaybe<Scalars['String']>;
  testimonialSourceLink?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  testimonialSourceLink_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  testimonialSourceLink_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  testimonialSourceLink_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Any other value that exists and is not equal to the given value. */
  testimonialSourceLink_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  testimonialSourceLink_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  testimonialSourceLink_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  testimonialSourceLink_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  testimonialSourceLink_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  testimonialSourceLink_starts_with?: InputMaybe<Scalars['String']>;
  testimonialType?: InputMaybe<TestimonialType>;
  /** All values that are contained in given list. */
  testimonialType_in?: InputMaybe<Array<InputMaybe<TestimonialType>>>;
  /** Any other value that exists and is not equal to the given value. */
  testimonialType_not?: InputMaybe<TestimonialType>;
  /** All values that are not contained in given list. */
  testimonialType_not_in?: InputMaybe<Array<InputMaybe<TestimonialType>>>;
  updatedAt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  updatedAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  updatedAt_gte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  updatedAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  /** All values less than the given value. */
  updatedAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  updatedAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** Any other value that exists and is not equal to the given value. */
  updatedAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not contained in given list. */
  updatedAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  updatedBy?: InputMaybe<UserWhereInput>;
};

/** The document in stages filter allows specifying a stage entry to cross compare the same document between different stages */
export type TestimonialWhereStageInput = {
  /** Logical AND on all given filters. */
  AND?: InputMaybe<Array<TestimonialWhereStageInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: InputMaybe<Array<TestimonialWhereStageInput>>;
  /** Logical OR on all given filters. */
  OR?: InputMaybe<Array<TestimonialWhereStageInput>>;
  /** This field contains fields which can be set as true or false to specify an internal comparison */
  compareWithParent?: InputMaybe<TestimonialWhereComparatorInput>;
  /** Specify the stage to compare with */
  stage?: InputMaybe<Stage>;
};

/** References Testimonial record uniquely */
export type TestimonialWhereUniqueInput = {
  id?: InputMaybe<Scalars['ID']>;
};

export type TextContent = Entity & {
  __typename?: 'TextContent';
  content?: Maybe<RichText>;
  contentAlign?: Maybe<ContentAlign>;
  contentImage?: Maybe<Asset>;
  cssClass?: Maybe<Scalars['String']>;
  header?: Maybe<RichText>;
  htmlText?: Maybe<Scalars['String']>;
  /** The unique identifier */
  id: Scalars['ID'];
  imageStyle: Array<ImageStyle>;
  /** Wraps text elements in Link styled as a card */
  link?: Maybe<Scalars['String']>;
  linkImage?: Maybe<Scalars['Boolean']>;
  /** System stage field */
  stage: Stage;
  subHeader?: Maybe<RichText>;
  textContentWidth?: Maybe<PageWidthStyle>;
};


export type TextContentContentImageArgs = {
  forceParentLocale?: InputMaybe<Scalars['Boolean']>;
  locales?: InputMaybe<Array<Locale>>;
};

export type TextContentConnectInput = {
  /** Allow to specify document position in list of connected documents, will default to appending at end of list */
  position?: InputMaybe<ConnectPositionInput>;
  /** Document to connect */
  where: TextContentWhereUniqueInput;
};

/** A connection to a list of items. */
export type TextContentConnection = {
  __typename?: 'TextContentConnection';
  aggregate: Aggregate;
  /** A list of edges. */
  edges: Array<TextContentEdge>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
};

export type TextContentCreateInput = {
  content?: InputMaybe<Scalars['RichTextAST']>;
  contentAlign?: InputMaybe<ContentAlign>;
  contentImage?: InputMaybe<AssetCreateOneInlineInput>;
  cssClass?: InputMaybe<Scalars['String']>;
  header?: InputMaybe<Scalars['RichTextAST']>;
  htmlText?: InputMaybe<Scalars['String']>;
  imageStyle?: InputMaybe<Array<ImageStyle>>;
  link?: InputMaybe<Scalars['String']>;
  linkImage?: InputMaybe<Scalars['Boolean']>;
  subHeader?: InputMaybe<Scalars['RichTextAST']>;
  textContentWidth?: InputMaybe<PageWidthStyle>;
};

export type TextContentCreateManyInlineInput = {
  /** Create and connect multiple existing TextContent documents */
  create?: InputMaybe<Array<TextContentCreateInput>>;
};

export type TextContentCreateOneInlineInput = {
  /** Create and connect one TextContent document */
  create?: InputMaybe<TextContentCreateInput>;
};

export type TextContentCreateWithPositionInput = {
  /** Document to create */
  data: TextContentCreateInput;
  /** Position in the list of existing component instances, will default to appending at the end of list */
  position?: InputMaybe<ConnectPositionInput>;
};

/** An edge in a connection. */
export type TextContentEdge = {
  __typename?: 'TextContentEdge';
  /** A cursor for use in pagination. */
  cursor: Scalars['String'];
  /** The item at the end of the edge. */
  node: TextContent;
};

/** Identifies documents */
export type TextContentManyWhereInput = {
  /** Logical AND on all given filters. */
  AND?: InputMaybe<Array<TextContentWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: InputMaybe<Array<TextContentWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: InputMaybe<Array<TextContentWhereInput>>;
  /** Contains search across all appropriate fields. */
  _search?: InputMaybe<Scalars['String']>;
  contentAlign?: InputMaybe<ContentAlign>;
  /** All values that are contained in given list. */
  contentAlign_in?: InputMaybe<Array<InputMaybe<ContentAlign>>>;
  /** Any other value that exists and is not equal to the given value. */
  contentAlign_not?: InputMaybe<ContentAlign>;
  /** All values that are not contained in given list. */
  contentAlign_not_in?: InputMaybe<Array<InputMaybe<ContentAlign>>>;
  contentImage?: InputMaybe<AssetWhereInput>;
  cssClass?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  cssClass_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  cssClass_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  cssClass_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Any other value that exists and is not equal to the given value. */
  cssClass_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  cssClass_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  cssClass_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  cssClass_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  cssClass_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  cssClass_starts_with?: InputMaybe<Scalars['String']>;
  htmlText?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  htmlText_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  htmlText_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  htmlText_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Any other value that exists and is not equal to the given value. */
  htmlText_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  htmlText_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  htmlText_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  htmlText_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  htmlText_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  htmlText_starts_with?: InputMaybe<Scalars['String']>;
  id?: InputMaybe<Scalars['ID']>;
  /** All values containing the given string. */
  id_contains?: InputMaybe<Scalars['ID']>;
  /** All values ending with the given string. */
  id_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are contained in given list. */
  id_in?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** Any other value that exists and is not equal to the given value. */
  id_not?: InputMaybe<Scalars['ID']>;
  /** All values not containing the given string. */
  id_not_contains?: InputMaybe<Scalars['ID']>;
  /** All values not ending with the given string */
  id_not_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are not contained in given list. */
  id_not_in?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** All values not starting with the given string. */
  id_not_starts_with?: InputMaybe<Scalars['ID']>;
  /** All values starting with the given string. */
  id_starts_with?: InputMaybe<Scalars['ID']>;
  /** Matches if the field array contains *all* items provided to the filter and order does match */
  imageStyle?: InputMaybe<Array<ImageStyle>>;
  /** Matches if the field array contains *all* items provided to the filter */
  imageStyle_contains_all?: InputMaybe<Array<ImageStyle>>;
  /** Matches if the field array does not contain any of the items provided to the filter */
  imageStyle_contains_none?: InputMaybe<Array<ImageStyle>>;
  /** Matches if the field array contains at least one item provided to the filter */
  imageStyle_contains_some?: InputMaybe<Array<ImageStyle>>;
  /** Matches if the field array does not contains *all* items provided to the filter or order does not match */
  imageStyle_not?: InputMaybe<Array<ImageStyle>>;
  link?: InputMaybe<Scalars['String']>;
  linkImage?: InputMaybe<Scalars['Boolean']>;
  /** Any other value that exists and is not equal to the given value. */
  linkImage_not?: InputMaybe<Scalars['Boolean']>;
  /** All values containing the given string. */
  link_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  link_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  link_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Any other value that exists and is not equal to the given value. */
  link_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  link_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  link_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  link_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  link_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  link_starts_with?: InputMaybe<Scalars['String']>;
  textContentWidth?: InputMaybe<PageWidthStyle>;
  /** All values that are contained in given list. */
  textContentWidth_in?: InputMaybe<Array<InputMaybe<PageWidthStyle>>>;
  /** Any other value that exists and is not equal to the given value. */
  textContentWidth_not?: InputMaybe<PageWidthStyle>;
  /** All values that are not contained in given list. */
  textContentWidth_not_in?: InputMaybe<Array<InputMaybe<PageWidthStyle>>>;
};

export enum TextContentOrderByInput {
  ContentAlignAsc = 'contentAlign_ASC',
  ContentAlignDesc = 'contentAlign_DESC',
  CssClassAsc = 'cssClass_ASC',
  CssClassDesc = 'cssClass_DESC',
  HtmlTextAsc = 'htmlText_ASC',
  HtmlTextDesc = 'htmlText_DESC',
  IdAsc = 'id_ASC',
  IdDesc = 'id_DESC',
  ImageStyleAsc = 'imageStyle_ASC',
  ImageStyleDesc = 'imageStyle_DESC',
  LinkImageAsc = 'linkImage_ASC',
  LinkImageDesc = 'linkImage_DESC',
  LinkAsc = 'link_ASC',
  LinkDesc = 'link_DESC',
  TextContentWidthAsc = 'textContentWidth_ASC',
  TextContentWidthDesc = 'textContentWidth_DESC'
}

export type TextContentParent = HeroMediaSlider | LayoutBlockColumn;

export type TextContentParentConnectInput = {
  HeroMediaSlider?: InputMaybe<HeroMediaSliderConnectInput>;
  LayoutBlockColumn?: InputMaybe<LayoutBlockColumnConnectInput>;
};

export type TextContentParentCreateInput = {
  HeroMediaSlider?: InputMaybe<HeroMediaSliderCreateInput>;
  LayoutBlockColumn?: InputMaybe<LayoutBlockColumnCreateInput>;
};

export type TextContentParentCreateManyInlineInput = {
  /** Create and connect multiple existing TextContentParent documents */
  create?: InputMaybe<Array<TextContentParentCreateInput>>;
};

export type TextContentParentCreateOneInlineInput = {
  /** Create and connect one TextContentParent document */
  create?: InputMaybe<TextContentParentCreateInput>;
};

export type TextContentParentCreateWithPositionInput = {
  HeroMediaSlider?: InputMaybe<HeroMediaSliderCreateWithPositionInput>;
  LayoutBlockColumn?: InputMaybe<LayoutBlockColumnCreateWithPositionInput>;
};

export type TextContentParentUpdateInput = {
  HeroMediaSlider?: InputMaybe<HeroMediaSliderUpdateInput>;
  LayoutBlockColumn?: InputMaybe<LayoutBlockColumnUpdateInput>;
};

export type TextContentParentUpdateManyInlineInput = {
  /** Create and connect multiple TextContentParent component instances */
  create?: InputMaybe<Array<TextContentParentCreateWithPositionInput>>;
  /** Delete multiple TextContentParent documents */
  delete?: InputMaybe<Array<TextContentParentWhereUniqueInput>>;
  /** Update multiple TextContentParent component instances */
  update?: InputMaybe<Array<TextContentParentUpdateWithNestedWhereUniqueAndPositionInput>>;
  /** Upsert multiple TextContentParent component instances */
  upsert?: InputMaybe<Array<TextContentParentUpsertWithNestedWhereUniqueAndPositionInput>>;
};

export type TextContentParentUpdateManyWithNestedWhereInput = {
  HeroMediaSlider?: InputMaybe<HeroMediaSliderUpdateManyWithNestedWhereInput>;
  LayoutBlockColumn?: InputMaybe<LayoutBlockColumnUpdateManyWithNestedWhereInput>;
};

export type TextContentParentUpdateOneInlineInput = {
  /** Create and connect one TextContentParent document */
  create?: InputMaybe<TextContentParentCreateInput>;
  /** Delete currently connected TextContentParent document */
  delete?: InputMaybe<Scalars['Boolean']>;
  /** Update single TextContentParent document */
  update?: InputMaybe<TextContentParentUpdateWithNestedWhereUniqueInput>;
  /** Upsert single TextContentParent document */
  upsert?: InputMaybe<TextContentParentUpsertWithNestedWhereUniqueInput>;
};

export type TextContentParentUpdateWithNestedWhereUniqueAndPositionInput = {
  HeroMediaSlider?: InputMaybe<HeroMediaSliderUpdateWithNestedWhereUniqueAndPositionInput>;
  LayoutBlockColumn?: InputMaybe<LayoutBlockColumnUpdateWithNestedWhereUniqueAndPositionInput>;
};

export type TextContentParentUpdateWithNestedWhereUniqueInput = {
  HeroMediaSlider?: InputMaybe<HeroMediaSliderUpdateWithNestedWhereUniqueInput>;
  LayoutBlockColumn?: InputMaybe<LayoutBlockColumnUpdateWithNestedWhereUniqueInput>;
};

export type TextContentParentUpsertWithNestedWhereUniqueAndPositionInput = {
  HeroMediaSlider?: InputMaybe<HeroMediaSliderUpsertWithNestedWhereUniqueAndPositionInput>;
  LayoutBlockColumn?: InputMaybe<LayoutBlockColumnUpsertWithNestedWhereUniqueAndPositionInput>;
};

export type TextContentParentUpsertWithNestedWhereUniqueInput = {
  HeroMediaSlider?: InputMaybe<HeroMediaSliderUpsertWithNestedWhereUniqueInput>;
  LayoutBlockColumn?: InputMaybe<LayoutBlockColumnUpsertWithNestedWhereUniqueInput>;
};

export type TextContentParentWhereInput = {
  HeroMediaSlider?: InputMaybe<HeroMediaSliderWhereInput>;
  LayoutBlockColumn?: InputMaybe<LayoutBlockColumnWhereInput>;
};

export type TextContentParentWhereUniqueInput = {
  HeroMediaSlider?: InputMaybe<HeroMediaSliderWhereUniqueInput>;
  LayoutBlockColumn?: InputMaybe<LayoutBlockColumnWhereUniqueInput>;
};

export type TextContentUpdateInput = {
  content?: InputMaybe<Scalars['RichTextAST']>;
  contentAlign?: InputMaybe<ContentAlign>;
  contentImage?: InputMaybe<AssetUpdateOneInlineInput>;
  cssClass?: InputMaybe<Scalars['String']>;
  header?: InputMaybe<Scalars['RichTextAST']>;
  htmlText?: InputMaybe<Scalars['String']>;
  imageStyle?: InputMaybe<Array<ImageStyle>>;
  link?: InputMaybe<Scalars['String']>;
  linkImage?: InputMaybe<Scalars['Boolean']>;
  subHeader?: InputMaybe<Scalars['RichTextAST']>;
  textContentWidth?: InputMaybe<PageWidthStyle>;
};

export type TextContentUpdateManyInlineInput = {
  /** Create and connect multiple TextContent component instances */
  create?: InputMaybe<Array<TextContentCreateWithPositionInput>>;
  /** Delete multiple TextContent documents */
  delete?: InputMaybe<Array<TextContentWhereUniqueInput>>;
  /** Update multiple TextContent component instances */
  update?: InputMaybe<Array<TextContentUpdateWithNestedWhereUniqueAndPositionInput>>;
  /** Upsert multiple TextContent component instances */
  upsert?: InputMaybe<Array<TextContentUpsertWithNestedWhereUniqueAndPositionInput>>;
};

export type TextContentUpdateManyInput = {
  content?: InputMaybe<Scalars['RichTextAST']>;
  contentAlign?: InputMaybe<ContentAlign>;
  cssClass?: InputMaybe<Scalars['String']>;
  header?: InputMaybe<Scalars['RichTextAST']>;
  htmlText?: InputMaybe<Scalars['String']>;
  imageStyle?: InputMaybe<Array<ImageStyle>>;
  link?: InputMaybe<Scalars['String']>;
  linkImage?: InputMaybe<Scalars['Boolean']>;
  subHeader?: InputMaybe<Scalars['RichTextAST']>;
  textContentWidth?: InputMaybe<PageWidthStyle>;
};

export type TextContentUpdateManyWithNestedWhereInput = {
  /** Update many input */
  data: TextContentUpdateManyInput;
  /** Document search */
  where: TextContentWhereInput;
};

export type TextContentUpdateOneInlineInput = {
  /** Create and connect one TextContent document */
  create?: InputMaybe<TextContentCreateInput>;
  /** Delete currently connected TextContent document */
  delete?: InputMaybe<Scalars['Boolean']>;
  /** Update single TextContent document */
  update?: InputMaybe<TextContentUpdateWithNestedWhereUniqueInput>;
  /** Upsert single TextContent document */
  upsert?: InputMaybe<TextContentUpsertWithNestedWhereUniqueInput>;
};

export type TextContentUpdateWithNestedWhereUniqueAndPositionInput = {
  /** Document to update */
  data?: InputMaybe<TextContentUpdateInput>;
  /** Position in the list of existing component instances, will default to appending at the end of list */
  position?: InputMaybe<ConnectPositionInput>;
  /** Unique component instance search */
  where: TextContentWhereUniqueInput;
};

export type TextContentUpdateWithNestedWhereUniqueInput = {
  /** Document to update */
  data: TextContentUpdateInput;
  /** Unique document search */
  where: TextContentWhereUniqueInput;
};

export type TextContentUpsertInput = {
  /** Create document if it didn't exist */
  create: TextContentCreateInput;
  /** Update document if it exists */
  update: TextContentUpdateInput;
};

export type TextContentUpsertWithNestedWhereUniqueAndPositionInput = {
  /** Document to upsert */
  data?: InputMaybe<TextContentUpsertInput>;
  /** Position in the list of existing component instances, will default to appending at the end of list */
  position?: InputMaybe<ConnectPositionInput>;
  /** Unique component instance search */
  where: TextContentWhereUniqueInput;
};

export type TextContentUpsertWithNestedWhereUniqueInput = {
  /** Upsert data */
  data: TextContentUpsertInput;
  /** Unique document search */
  where: TextContentWhereUniqueInput;
};

/** Identifies documents */
export type TextContentWhereInput = {
  /** Logical AND on all given filters. */
  AND?: InputMaybe<Array<TextContentWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: InputMaybe<Array<TextContentWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: InputMaybe<Array<TextContentWhereInput>>;
  /** Contains search across all appropriate fields. */
  _search?: InputMaybe<Scalars['String']>;
  contentAlign?: InputMaybe<ContentAlign>;
  /** All values that are contained in given list. */
  contentAlign_in?: InputMaybe<Array<InputMaybe<ContentAlign>>>;
  /** Any other value that exists and is not equal to the given value. */
  contentAlign_not?: InputMaybe<ContentAlign>;
  /** All values that are not contained in given list. */
  contentAlign_not_in?: InputMaybe<Array<InputMaybe<ContentAlign>>>;
  contentImage?: InputMaybe<AssetWhereInput>;
  cssClass?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  cssClass_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  cssClass_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  cssClass_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Any other value that exists and is not equal to the given value. */
  cssClass_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  cssClass_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  cssClass_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  cssClass_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  cssClass_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  cssClass_starts_with?: InputMaybe<Scalars['String']>;
  htmlText?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  htmlText_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  htmlText_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  htmlText_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Any other value that exists and is not equal to the given value. */
  htmlText_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  htmlText_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  htmlText_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  htmlText_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  htmlText_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  htmlText_starts_with?: InputMaybe<Scalars['String']>;
  id?: InputMaybe<Scalars['ID']>;
  /** All values containing the given string. */
  id_contains?: InputMaybe<Scalars['ID']>;
  /** All values ending with the given string. */
  id_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are contained in given list. */
  id_in?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** Any other value that exists and is not equal to the given value. */
  id_not?: InputMaybe<Scalars['ID']>;
  /** All values not containing the given string. */
  id_not_contains?: InputMaybe<Scalars['ID']>;
  /** All values not ending with the given string */
  id_not_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are not contained in given list. */
  id_not_in?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** All values not starting with the given string. */
  id_not_starts_with?: InputMaybe<Scalars['ID']>;
  /** All values starting with the given string. */
  id_starts_with?: InputMaybe<Scalars['ID']>;
  /** Matches if the field array contains *all* items provided to the filter and order does match */
  imageStyle?: InputMaybe<Array<ImageStyle>>;
  /** Matches if the field array contains *all* items provided to the filter */
  imageStyle_contains_all?: InputMaybe<Array<ImageStyle>>;
  /** Matches if the field array does not contain any of the items provided to the filter */
  imageStyle_contains_none?: InputMaybe<Array<ImageStyle>>;
  /** Matches if the field array contains at least one item provided to the filter */
  imageStyle_contains_some?: InputMaybe<Array<ImageStyle>>;
  /** Matches if the field array does not contains *all* items provided to the filter or order does not match */
  imageStyle_not?: InputMaybe<Array<ImageStyle>>;
  link?: InputMaybe<Scalars['String']>;
  linkImage?: InputMaybe<Scalars['Boolean']>;
  /** Any other value that exists and is not equal to the given value. */
  linkImage_not?: InputMaybe<Scalars['Boolean']>;
  /** All values containing the given string. */
  link_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  link_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  link_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Any other value that exists and is not equal to the given value. */
  link_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  link_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  link_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  link_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  link_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  link_starts_with?: InputMaybe<Scalars['String']>;
  textContentWidth?: InputMaybe<PageWidthStyle>;
  /** All values that are contained in given list. */
  textContentWidth_in?: InputMaybe<Array<InputMaybe<PageWidthStyle>>>;
  /** Any other value that exists and is not equal to the given value. */
  textContentWidth_not?: InputMaybe<PageWidthStyle>;
  /** All values that are not contained in given list. */
  textContentWidth_not_in?: InputMaybe<Array<InputMaybe<PageWidthStyle>>>;
};

/** References TextContent record uniquely */
export type TextContentWhereUniqueInput = {
  id?: InputMaybe<Scalars['ID']>;
};

export enum TextSize {
  Text_2xl = 'text_2xl',
  Text_3xl = 'text_3xl',
  Text_4xl = 'text_4xl',
  Text_5xl = 'text_5xl',
  Text_6xl = 'text_6xl',
  Text_7xl = 'text_7xl',
  Text_8xl = 'text_8xl',
  Text_9xl = 'text_9xl',
  TextBase = 'text_base',
  TextLg = 'text_lg',
  TextSm = 'text_sm',
  TextXl = 'text_xl',
  TextXs = 'text_xs'
}

export type UnpublishLocaleInput = {
  /** Locales to unpublish */
  locale: Locale;
  /** Stages to unpublish selected locales from */
  stages: Array<Stage>;
};

/** User system model */
export type User = Entity & Node & {
  __typename?: 'User';
  /** The time the document was created */
  createdAt: Scalars['DateTime'];
  /** Get the document in other stages */
  documentInStages: Array<User>;
  /** The unique identifier */
  id: Scalars['ID'];
  /** Flag to determine if user is active or not */
  isActive: Scalars['Boolean'];
  /** User Kind. Can be either MEMBER, PAT or PUBLIC */
  kind: UserKind;
  /** The username */
  name: Scalars['String'];
  /** Profile Picture url */
  picture?: Maybe<Scalars['String']>;
  /** The time the document was published. Null on documents in draft stage. */
  publishedAt?: Maybe<Scalars['DateTime']>;
  /** System stage field */
  stage: Stage;
  /** The time the document was updated */
  updatedAt: Scalars['DateTime'];
};


/** User system model */
export type UserDocumentInStagesArgs = {
  includeCurrent?: Scalars['Boolean'];
  inheritLocale?: Scalars['Boolean'];
  stages?: Array<Stage>;
};

export type UserConnectInput = {
  /** Allow to specify document position in list of connected documents, will default to appending at end of list */
  position?: InputMaybe<ConnectPositionInput>;
  /** Document to connect */
  where: UserWhereUniqueInput;
};

/** A connection to a list of items. */
export type UserConnection = {
  __typename?: 'UserConnection';
  aggregate: Aggregate;
  /** A list of edges. */
  edges: Array<UserEdge>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
};

export type UserCreateManyInlineInput = {
  /** Connect multiple existing User documents */
  connect?: InputMaybe<Array<UserWhereUniqueInput>>;
};

export type UserCreateOneInlineInput = {
  /** Connect one existing User document */
  connect?: InputMaybe<UserWhereUniqueInput>;
};

/** An edge in a connection. */
export type UserEdge = {
  __typename?: 'UserEdge';
  /** A cursor for use in pagination. */
  cursor: Scalars['String'];
  /** The item at the end of the edge. */
  node: User;
};

/** System User Kind */
export enum UserKind {
  AppToken = 'APP_TOKEN',
  Member = 'MEMBER',
  Pat = 'PAT',
  Public = 'PUBLIC',
  Webhook = 'WEBHOOK'
}

/** Identifies documents */
export type UserManyWhereInput = {
  /** Logical AND on all given filters. */
  AND?: InputMaybe<Array<UserWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: InputMaybe<Array<UserWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: InputMaybe<Array<UserWhereInput>>;
  /** Contains search across all appropriate fields. */
  _search?: InputMaybe<Scalars['String']>;
  createdAt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  createdAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  createdAt_gte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  createdAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  /** All values less than the given value. */
  createdAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  createdAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** Any other value that exists and is not equal to the given value. */
  createdAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not contained in given list. */
  createdAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  documentInStages_every?: InputMaybe<UserWhereStageInput>;
  documentInStages_none?: InputMaybe<UserWhereStageInput>;
  documentInStages_some?: InputMaybe<UserWhereStageInput>;
  id?: InputMaybe<Scalars['ID']>;
  /** All values containing the given string. */
  id_contains?: InputMaybe<Scalars['ID']>;
  /** All values ending with the given string. */
  id_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are contained in given list. */
  id_in?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** Any other value that exists and is not equal to the given value. */
  id_not?: InputMaybe<Scalars['ID']>;
  /** All values not containing the given string. */
  id_not_contains?: InputMaybe<Scalars['ID']>;
  /** All values not ending with the given string */
  id_not_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are not contained in given list. */
  id_not_in?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** All values not starting with the given string. */
  id_not_starts_with?: InputMaybe<Scalars['ID']>;
  /** All values starting with the given string. */
  id_starts_with?: InputMaybe<Scalars['ID']>;
  isActive?: InputMaybe<Scalars['Boolean']>;
  /** Any other value that exists and is not equal to the given value. */
  isActive_not?: InputMaybe<Scalars['Boolean']>;
  kind?: InputMaybe<UserKind>;
  /** All values that are contained in given list. */
  kind_in?: InputMaybe<Array<InputMaybe<UserKind>>>;
  /** Any other value that exists and is not equal to the given value. */
  kind_not?: InputMaybe<UserKind>;
  /** All values that are not contained in given list. */
  kind_not_in?: InputMaybe<Array<InputMaybe<UserKind>>>;
  name?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  name_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  name_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  name_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Any other value that exists and is not equal to the given value. */
  name_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  name_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  name_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  name_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  name_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  name_starts_with?: InputMaybe<Scalars['String']>;
  picture?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  picture_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  picture_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  picture_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Any other value that exists and is not equal to the given value. */
  picture_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  picture_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  picture_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  picture_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  picture_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  picture_starts_with?: InputMaybe<Scalars['String']>;
  publishedAt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  publishedAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  publishedAt_gte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  publishedAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  /** All values less than the given value. */
  publishedAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  publishedAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** Any other value that exists and is not equal to the given value. */
  publishedAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not contained in given list. */
  publishedAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  updatedAt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  updatedAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  updatedAt_gte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  updatedAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  /** All values less than the given value. */
  updatedAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  updatedAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** Any other value that exists and is not equal to the given value. */
  updatedAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not contained in given list. */
  updatedAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
};

export enum UserOrderByInput {
  CreatedAtAsc = 'createdAt_ASC',
  CreatedAtDesc = 'createdAt_DESC',
  IdAsc = 'id_ASC',
  IdDesc = 'id_DESC',
  IsActiveAsc = 'isActive_ASC',
  IsActiveDesc = 'isActive_DESC',
  KindAsc = 'kind_ASC',
  KindDesc = 'kind_DESC',
  NameAsc = 'name_ASC',
  NameDesc = 'name_DESC',
  PictureAsc = 'picture_ASC',
  PictureDesc = 'picture_DESC',
  PublishedAtAsc = 'publishedAt_ASC',
  PublishedAtDesc = 'publishedAt_DESC',
  UpdatedAtAsc = 'updatedAt_ASC',
  UpdatedAtDesc = 'updatedAt_DESC'
}

export type UserUpdateManyInlineInput = {
  /** Connect multiple existing User documents */
  connect?: InputMaybe<Array<UserConnectInput>>;
  /** Disconnect multiple User documents */
  disconnect?: InputMaybe<Array<UserWhereUniqueInput>>;
  /** Override currently-connected documents with multiple existing User documents */
  set?: InputMaybe<Array<UserWhereUniqueInput>>;
};

export type UserUpdateOneInlineInput = {
  /** Connect existing User document */
  connect?: InputMaybe<UserWhereUniqueInput>;
  /** Disconnect currently connected User document */
  disconnect?: InputMaybe<Scalars['Boolean']>;
};

/** This contains a set of filters that can be used to compare values internally */
export type UserWhereComparatorInput = {
  /** This field can be used to request to check if the entry is outdated by internal comparison */
  outdated_to?: InputMaybe<Scalars['Boolean']>;
};

/** Identifies documents */
export type UserWhereInput = {
  /** Logical AND on all given filters. */
  AND?: InputMaybe<Array<UserWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: InputMaybe<Array<UserWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: InputMaybe<Array<UserWhereInput>>;
  /** Contains search across all appropriate fields. */
  _search?: InputMaybe<Scalars['String']>;
  createdAt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  createdAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  createdAt_gte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  createdAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  /** All values less than the given value. */
  createdAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  createdAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** Any other value that exists and is not equal to the given value. */
  createdAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not contained in given list. */
  createdAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  documentInStages_every?: InputMaybe<UserWhereStageInput>;
  documentInStages_none?: InputMaybe<UserWhereStageInput>;
  documentInStages_some?: InputMaybe<UserWhereStageInput>;
  id?: InputMaybe<Scalars['ID']>;
  /** All values containing the given string. */
  id_contains?: InputMaybe<Scalars['ID']>;
  /** All values ending with the given string. */
  id_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are contained in given list. */
  id_in?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** Any other value that exists and is not equal to the given value. */
  id_not?: InputMaybe<Scalars['ID']>;
  /** All values not containing the given string. */
  id_not_contains?: InputMaybe<Scalars['ID']>;
  /** All values not ending with the given string */
  id_not_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are not contained in given list. */
  id_not_in?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** All values not starting with the given string. */
  id_not_starts_with?: InputMaybe<Scalars['ID']>;
  /** All values starting with the given string. */
  id_starts_with?: InputMaybe<Scalars['ID']>;
  isActive?: InputMaybe<Scalars['Boolean']>;
  /** Any other value that exists and is not equal to the given value. */
  isActive_not?: InputMaybe<Scalars['Boolean']>;
  kind?: InputMaybe<UserKind>;
  /** All values that are contained in given list. */
  kind_in?: InputMaybe<Array<InputMaybe<UserKind>>>;
  /** Any other value that exists and is not equal to the given value. */
  kind_not?: InputMaybe<UserKind>;
  /** All values that are not contained in given list. */
  kind_not_in?: InputMaybe<Array<InputMaybe<UserKind>>>;
  name?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  name_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  name_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  name_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Any other value that exists and is not equal to the given value. */
  name_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  name_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  name_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  name_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  name_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  name_starts_with?: InputMaybe<Scalars['String']>;
  picture?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  picture_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  picture_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  picture_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Any other value that exists and is not equal to the given value. */
  picture_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  picture_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  picture_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  picture_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  picture_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  picture_starts_with?: InputMaybe<Scalars['String']>;
  publishedAt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  publishedAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  publishedAt_gte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  publishedAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  /** All values less than the given value. */
  publishedAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  publishedAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** Any other value that exists and is not equal to the given value. */
  publishedAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not contained in given list. */
  publishedAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  updatedAt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  updatedAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  updatedAt_gte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  updatedAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  /** All values less than the given value. */
  updatedAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  updatedAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** Any other value that exists and is not equal to the given value. */
  updatedAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not contained in given list. */
  updatedAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
};

/** The document in stages filter allows specifying a stage entry to cross compare the same document between different stages */
export type UserWhereStageInput = {
  /** Logical AND on all given filters. */
  AND?: InputMaybe<Array<UserWhereStageInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: InputMaybe<Array<UserWhereStageInput>>;
  /** Logical OR on all given filters. */
  OR?: InputMaybe<Array<UserWhereStageInput>>;
  /** This field contains fields which can be set as true or false to specify an internal comparison */
  compareWithParent?: InputMaybe<UserWhereComparatorInput>;
  /** Specify the stage to compare with */
  stage?: InputMaybe<Stage>;
};

/** References User record uniquely */
export type UserWhereUniqueInput = {
  id?: InputMaybe<Scalars['ID']>;
};

export type Version = {
  __typename?: 'Version';
  createdAt: Scalars['DateTime'];
  id: Scalars['ID'];
  revision: Scalars['Int'];
  stage: Stage;
};

export type VersionWhereInput = {
  id: Scalars['ID'];
  revision: Scalars['Int'];
  stage: Stage;
};

export type VideoBox = Entity & {
  __typename?: 'VideoBox';
  /** The unique identifier */
  id: Scalars['ID'];
  /** System stage field */
  stage: Stage;
  videoTitle?: Maybe<Scalars['String']>;
  vimeoVideoId?: Maybe<Scalars['String']>;
  youtubePlaylistId?: Maybe<Scalars['String']>;
  youtubeVideoId?: Maybe<Scalars['String']>;
};

export type VideoBoxConnectInput = {
  /** Allow to specify document position in list of connected documents, will default to appending at end of list */
  position?: InputMaybe<ConnectPositionInput>;
  /** Document to connect */
  where: VideoBoxWhereUniqueInput;
};

/** A connection to a list of items. */
export type VideoBoxConnection = {
  __typename?: 'VideoBoxConnection';
  aggregate: Aggregate;
  /** A list of edges. */
  edges: Array<VideoBoxEdge>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
};

export type VideoBoxCreateInput = {
  videoTitle?: InputMaybe<Scalars['String']>;
  vimeoVideoId?: InputMaybe<Scalars['String']>;
  youtubePlaylistId?: InputMaybe<Scalars['String']>;
  youtubeVideoId?: InputMaybe<Scalars['String']>;
};

export type VideoBoxCreateManyInlineInput = {
  /** Create and connect multiple existing VideoBox documents */
  create?: InputMaybe<Array<VideoBoxCreateInput>>;
};

export type VideoBoxCreateOneInlineInput = {
  /** Create and connect one VideoBox document */
  create?: InputMaybe<VideoBoxCreateInput>;
};

export type VideoBoxCreateWithPositionInput = {
  /** Document to create */
  data: VideoBoxCreateInput;
  /** Position in the list of existing component instances, will default to appending at the end of list */
  position?: InputMaybe<ConnectPositionInput>;
};

/** An edge in a connection. */
export type VideoBoxEdge = {
  __typename?: 'VideoBoxEdge';
  /** A cursor for use in pagination. */
  cursor: Scalars['String'];
  /** The item at the end of the edge. */
  node: VideoBox;
};

/** Identifies documents */
export type VideoBoxManyWhereInput = {
  /** Logical AND on all given filters. */
  AND?: InputMaybe<Array<VideoBoxWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: InputMaybe<Array<VideoBoxWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: InputMaybe<Array<VideoBoxWhereInput>>;
  /** Contains search across all appropriate fields. */
  _search?: InputMaybe<Scalars['String']>;
  id?: InputMaybe<Scalars['ID']>;
  /** All values containing the given string. */
  id_contains?: InputMaybe<Scalars['ID']>;
  /** All values ending with the given string. */
  id_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are contained in given list. */
  id_in?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** Any other value that exists and is not equal to the given value. */
  id_not?: InputMaybe<Scalars['ID']>;
  /** All values not containing the given string. */
  id_not_contains?: InputMaybe<Scalars['ID']>;
  /** All values not ending with the given string */
  id_not_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are not contained in given list. */
  id_not_in?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** All values not starting with the given string. */
  id_not_starts_with?: InputMaybe<Scalars['ID']>;
  /** All values starting with the given string. */
  id_starts_with?: InputMaybe<Scalars['ID']>;
  videoTitle?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  videoTitle_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  videoTitle_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  videoTitle_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Any other value that exists and is not equal to the given value. */
  videoTitle_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  videoTitle_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  videoTitle_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  videoTitle_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  videoTitle_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  videoTitle_starts_with?: InputMaybe<Scalars['String']>;
  vimeoVideoId?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  vimeoVideoId_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  vimeoVideoId_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  vimeoVideoId_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Any other value that exists and is not equal to the given value. */
  vimeoVideoId_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  vimeoVideoId_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  vimeoVideoId_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  vimeoVideoId_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  vimeoVideoId_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  vimeoVideoId_starts_with?: InputMaybe<Scalars['String']>;
  youtubePlaylistId?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  youtubePlaylistId_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  youtubePlaylistId_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  youtubePlaylistId_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Any other value that exists and is not equal to the given value. */
  youtubePlaylistId_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  youtubePlaylistId_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  youtubePlaylistId_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  youtubePlaylistId_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  youtubePlaylistId_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  youtubePlaylistId_starts_with?: InputMaybe<Scalars['String']>;
  youtubeVideoId?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  youtubeVideoId_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  youtubeVideoId_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  youtubeVideoId_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Any other value that exists and is not equal to the given value. */
  youtubeVideoId_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  youtubeVideoId_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  youtubeVideoId_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  youtubeVideoId_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  youtubeVideoId_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  youtubeVideoId_starts_with?: InputMaybe<Scalars['String']>;
};

export enum VideoBoxOrderByInput {
  IdAsc = 'id_ASC',
  IdDesc = 'id_DESC',
  VideoTitleAsc = 'videoTitle_ASC',
  VideoTitleDesc = 'videoTitle_DESC',
  VimeoVideoIdAsc = 'vimeoVideoId_ASC',
  VimeoVideoIdDesc = 'vimeoVideoId_DESC',
  YoutubePlaylistIdAsc = 'youtubePlaylistId_ASC',
  YoutubePlaylistIdDesc = 'youtubePlaylistId_DESC',
  YoutubeVideoIdAsc = 'youtubeVideoId_ASC',
  YoutubeVideoIdDesc = 'youtubeVideoId_DESC'
}

export type VideoBoxParent = Accordion | Album | Blog | Event | LayoutBlockColumn | Product | Profile;

export type VideoBoxParentConnectInput = {
  Accordion?: InputMaybe<AccordionConnectInput>;
  Album?: InputMaybe<AlbumConnectInput>;
  Blog?: InputMaybe<BlogConnectInput>;
  Event?: InputMaybe<EventConnectInput>;
  LayoutBlockColumn?: InputMaybe<LayoutBlockColumnConnectInput>;
  Product?: InputMaybe<ProductConnectInput>;
  Profile?: InputMaybe<ProfileConnectInput>;
};

export type VideoBoxParentCreateInput = {
  Accordion?: InputMaybe<AccordionCreateInput>;
  Album?: InputMaybe<AlbumCreateInput>;
  Blog?: InputMaybe<BlogCreateInput>;
  Event?: InputMaybe<EventCreateInput>;
  LayoutBlockColumn?: InputMaybe<LayoutBlockColumnCreateInput>;
  Product?: InputMaybe<ProductCreateInput>;
  Profile?: InputMaybe<ProfileCreateInput>;
};

export type VideoBoxParentCreateManyInlineInput = {
  /** Connect multiple existing VideoBoxParent documents */
  connect?: InputMaybe<Array<VideoBoxParentWhereUniqueInput>>;
  /** Create and connect multiple existing VideoBoxParent documents */
  create?: InputMaybe<Array<VideoBoxParentCreateInput>>;
};

export type VideoBoxParentCreateOneInlineInput = {
  /** Connect one existing VideoBoxParent document */
  connect?: InputMaybe<VideoBoxParentWhereUniqueInput>;
  /** Create and connect one VideoBoxParent document */
  create?: InputMaybe<VideoBoxParentCreateInput>;
};

export type VideoBoxParentUpdateInput = {
  Accordion?: InputMaybe<AccordionUpdateInput>;
  Album?: InputMaybe<AlbumUpdateInput>;
  Blog?: InputMaybe<BlogUpdateInput>;
  Event?: InputMaybe<EventUpdateInput>;
  LayoutBlockColumn?: InputMaybe<LayoutBlockColumnUpdateInput>;
  Product?: InputMaybe<ProductUpdateInput>;
  Profile?: InputMaybe<ProfileUpdateInput>;
};

export type VideoBoxParentUpdateManyInlineInput = {
  /** Connect multiple existing VideoBoxParent documents */
  connect?: InputMaybe<Array<VideoBoxParentConnectInput>>;
  /** Create and connect multiple VideoBoxParent documents */
  create?: InputMaybe<Array<VideoBoxParentCreateInput>>;
  /** Delete multiple VideoBoxParent documents */
  delete?: InputMaybe<Array<VideoBoxParentWhereUniqueInput>>;
  /** Disconnect multiple VideoBoxParent documents */
  disconnect?: InputMaybe<Array<VideoBoxParentWhereUniqueInput>>;
  /** Override currently-connected documents with multiple existing VideoBoxParent documents */
  set?: InputMaybe<Array<VideoBoxParentWhereUniqueInput>>;
  /** Update multiple VideoBoxParent documents */
  update?: InputMaybe<Array<VideoBoxParentUpdateWithNestedWhereUniqueInput>>;
  /** Upsert multiple VideoBoxParent documents */
  upsert?: InputMaybe<Array<VideoBoxParentUpsertWithNestedWhereUniqueInput>>;
};

export type VideoBoxParentUpdateManyWithNestedWhereInput = {
  Accordion?: InputMaybe<AccordionUpdateManyWithNestedWhereInput>;
  Album?: InputMaybe<AlbumUpdateManyWithNestedWhereInput>;
  Blog?: InputMaybe<BlogUpdateManyWithNestedWhereInput>;
  Event?: InputMaybe<EventUpdateManyWithNestedWhereInput>;
  LayoutBlockColumn?: InputMaybe<LayoutBlockColumnUpdateManyWithNestedWhereInput>;
  Product?: InputMaybe<ProductUpdateManyWithNestedWhereInput>;
  Profile?: InputMaybe<ProfileUpdateManyWithNestedWhereInput>;
};

export type VideoBoxParentUpdateOneInlineInput = {
  /** Connect existing VideoBoxParent document */
  connect?: InputMaybe<VideoBoxParentWhereUniqueInput>;
  /** Create and connect one VideoBoxParent document */
  create?: InputMaybe<VideoBoxParentCreateInput>;
  /** Delete currently connected VideoBoxParent document */
  delete?: InputMaybe<Scalars['Boolean']>;
  /** Disconnect currently connected VideoBoxParent document */
  disconnect?: InputMaybe<Scalars['Boolean']>;
  /** Update single VideoBoxParent document */
  update?: InputMaybe<VideoBoxParentUpdateWithNestedWhereUniqueInput>;
  /** Upsert single VideoBoxParent document */
  upsert?: InputMaybe<VideoBoxParentUpsertWithNestedWhereUniqueInput>;
};

export type VideoBoxParentUpdateWithNestedWhereUniqueInput = {
  Accordion?: InputMaybe<AccordionUpdateWithNestedWhereUniqueInput>;
  Album?: InputMaybe<AlbumUpdateWithNestedWhereUniqueInput>;
  Blog?: InputMaybe<BlogUpdateWithNestedWhereUniqueInput>;
  Event?: InputMaybe<EventUpdateWithNestedWhereUniqueInput>;
  LayoutBlockColumn?: InputMaybe<LayoutBlockColumnUpdateWithNestedWhereUniqueInput>;
  Product?: InputMaybe<ProductUpdateWithNestedWhereUniqueInput>;
  Profile?: InputMaybe<ProfileUpdateWithNestedWhereUniqueInput>;
};

export type VideoBoxParentUpsertWithNestedWhereUniqueInput = {
  Accordion?: InputMaybe<AccordionUpsertWithNestedWhereUniqueInput>;
  Album?: InputMaybe<AlbumUpsertWithNestedWhereUniqueInput>;
  Blog?: InputMaybe<BlogUpsertWithNestedWhereUniqueInput>;
  Event?: InputMaybe<EventUpsertWithNestedWhereUniqueInput>;
  LayoutBlockColumn?: InputMaybe<LayoutBlockColumnUpsertWithNestedWhereUniqueInput>;
  Product?: InputMaybe<ProductUpsertWithNestedWhereUniqueInput>;
  Profile?: InputMaybe<ProfileUpsertWithNestedWhereUniqueInput>;
};

export type VideoBoxParentWhereInput = {
  Accordion?: InputMaybe<AccordionWhereInput>;
  Album?: InputMaybe<AlbumWhereInput>;
  Blog?: InputMaybe<BlogWhereInput>;
  Event?: InputMaybe<EventWhereInput>;
  LayoutBlockColumn?: InputMaybe<LayoutBlockColumnWhereInput>;
  Product?: InputMaybe<ProductWhereInput>;
  Profile?: InputMaybe<ProfileWhereInput>;
};

export type VideoBoxParentWhereUniqueInput = {
  Accordion?: InputMaybe<AccordionWhereUniqueInput>;
  Album?: InputMaybe<AlbumWhereUniqueInput>;
  Blog?: InputMaybe<BlogWhereUniqueInput>;
  Event?: InputMaybe<EventWhereUniqueInput>;
  LayoutBlockColumn?: InputMaybe<LayoutBlockColumnWhereUniqueInput>;
  Product?: InputMaybe<ProductWhereUniqueInput>;
  Profile?: InputMaybe<ProfileWhereUniqueInput>;
};

export type VideoBoxUpdateInput = {
  videoTitle?: InputMaybe<Scalars['String']>;
  vimeoVideoId?: InputMaybe<Scalars['String']>;
  youtubePlaylistId?: InputMaybe<Scalars['String']>;
  youtubeVideoId?: InputMaybe<Scalars['String']>;
};

export type VideoBoxUpdateManyInlineInput = {
  /** Create and connect multiple VideoBox component instances */
  create?: InputMaybe<Array<VideoBoxCreateWithPositionInput>>;
  /** Delete multiple VideoBox documents */
  delete?: InputMaybe<Array<VideoBoxWhereUniqueInput>>;
  /** Update multiple VideoBox component instances */
  update?: InputMaybe<Array<VideoBoxUpdateWithNestedWhereUniqueAndPositionInput>>;
  /** Upsert multiple VideoBox component instances */
  upsert?: InputMaybe<Array<VideoBoxUpsertWithNestedWhereUniqueAndPositionInput>>;
};

export type VideoBoxUpdateManyInput = {
  videoTitle?: InputMaybe<Scalars['String']>;
  vimeoVideoId?: InputMaybe<Scalars['String']>;
  youtubePlaylistId?: InputMaybe<Scalars['String']>;
  youtubeVideoId?: InputMaybe<Scalars['String']>;
};

export type VideoBoxUpdateManyWithNestedWhereInput = {
  /** Update many input */
  data: VideoBoxUpdateManyInput;
  /** Document search */
  where: VideoBoxWhereInput;
};

export type VideoBoxUpdateOneInlineInput = {
  /** Create and connect one VideoBox document */
  create?: InputMaybe<VideoBoxCreateInput>;
  /** Delete currently connected VideoBox document */
  delete?: InputMaybe<Scalars['Boolean']>;
  /** Update single VideoBox document */
  update?: InputMaybe<VideoBoxUpdateWithNestedWhereUniqueInput>;
  /** Upsert single VideoBox document */
  upsert?: InputMaybe<VideoBoxUpsertWithNestedWhereUniqueInput>;
};

export type VideoBoxUpdateWithNestedWhereUniqueAndPositionInput = {
  /** Document to update */
  data?: InputMaybe<VideoBoxUpdateInput>;
  /** Position in the list of existing component instances, will default to appending at the end of list */
  position?: InputMaybe<ConnectPositionInput>;
  /** Unique component instance search */
  where: VideoBoxWhereUniqueInput;
};

export type VideoBoxUpdateWithNestedWhereUniqueInput = {
  /** Document to update */
  data: VideoBoxUpdateInput;
  /** Unique document search */
  where: VideoBoxWhereUniqueInput;
};

export type VideoBoxUpsertInput = {
  /** Create document if it didn't exist */
  create: VideoBoxCreateInput;
  /** Update document if it exists */
  update: VideoBoxUpdateInput;
};

export type VideoBoxUpsertWithNestedWhereUniqueAndPositionInput = {
  /** Document to upsert */
  data?: InputMaybe<VideoBoxUpsertInput>;
  /** Position in the list of existing component instances, will default to appending at the end of list */
  position?: InputMaybe<ConnectPositionInput>;
  /** Unique component instance search */
  where: VideoBoxWhereUniqueInput;
};

export type VideoBoxUpsertWithNestedWhereUniqueInput = {
  /** Upsert data */
  data: VideoBoxUpsertInput;
  /** Unique document search */
  where: VideoBoxWhereUniqueInput;
};

/** Identifies documents */
export type VideoBoxWhereInput = {
  /** Logical AND on all given filters. */
  AND?: InputMaybe<Array<VideoBoxWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: InputMaybe<Array<VideoBoxWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: InputMaybe<Array<VideoBoxWhereInput>>;
  /** Contains search across all appropriate fields. */
  _search?: InputMaybe<Scalars['String']>;
  id?: InputMaybe<Scalars['ID']>;
  /** All values containing the given string. */
  id_contains?: InputMaybe<Scalars['ID']>;
  /** All values ending with the given string. */
  id_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are contained in given list. */
  id_in?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** Any other value that exists and is not equal to the given value. */
  id_not?: InputMaybe<Scalars['ID']>;
  /** All values not containing the given string. */
  id_not_contains?: InputMaybe<Scalars['ID']>;
  /** All values not ending with the given string */
  id_not_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are not contained in given list. */
  id_not_in?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** All values not starting with the given string. */
  id_not_starts_with?: InputMaybe<Scalars['ID']>;
  /** All values starting with the given string. */
  id_starts_with?: InputMaybe<Scalars['ID']>;
  videoTitle?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  videoTitle_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  videoTitle_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  videoTitle_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Any other value that exists and is not equal to the given value. */
  videoTitle_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  videoTitle_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  videoTitle_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  videoTitle_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  videoTitle_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  videoTitle_starts_with?: InputMaybe<Scalars['String']>;
  vimeoVideoId?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  vimeoVideoId_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  vimeoVideoId_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  vimeoVideoId_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Any other value that exists and is not equal to the given value. */
  vimeoVideoId_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  vimeoVideoId_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  vimeoVideoId_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  vimeoVideoId_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  vimeoVideoId_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  vimeoVideoId_starts_with?: InputMaybe<Scalars['String']>;
  youtubePlaylistId?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  youtubePlaylistId_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  youtubePlaylistId_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  youtubePlaylistId_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Any other value that exists and is not equal to the given value. */
  youtubePlaylistId_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  youtubePlaylistId_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  youtubePlaylistId_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  youtubePlaylistId_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  youtubePlaylistId_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  youtubePlaylistId_starts_with?: InputMaybe<Scalars['String']>;
  youtubeVideoId?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  youtubeVideoId_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  youtubeVideoId_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  youtubeVideoId_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Any other value that exists and is not equal to the given value. */
  youtubeVideoId_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  youtubeVideoId_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  youtubeVideoId_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  youtubeVideoId_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  youtubeVideoId_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  youtubeVideoId_starts_with?: InputMaybe<Scalars['String']>;
};

/** References VideoBox record uniquely */
export type VideoBoxWhereUniqueInput = {
  id?: InputMaybe<Scalars['ID']>;
};

export enum _FilterKind {
  And = 'AND',
  Not = 'NOT',
  Or = 'OR',
  Contains = 'contains',
  ContainsAll = 'contains_all',
  ContainsNone = 'contains_none',
  ContainsSome = 'contains_some',
  EndsWith = 'ends_with',
  Eq = 'eq',
  EqNot = 'eq_not',
  Gt = 'gt',
  Gte = 'gte',
  In = 'in',
  JsonPathExists = 'json_path_exists',
  JsonValueRecursive = 'json_value_recursive',
  Lt = 'lt',
  Lte = 'lte',
  NotContains = 'not_contains',
  NotEndsWith = 'not_ends_with',
  NotIn = 'not_in',
  NotStartsWith = 'not_starts_with',
  RelationalEvery = 'relational_every',
  RelationalNone = 'relational_none',
  RelationalSingle = 'relational_single',
  RelationalSome = 'relational_some',
  Search = 'search',
  StartsWith = 'starts_with',
  UnionEmpty = 'union_empty',
  UnionEvery = 'union_every',
  UnionNone = 'union_none',
  UnionSingle = 'union_single',
  UnionSome = 'union_some'
}

export enum _MutationInputFieldKind {
  Enum = 'enum',
  Relation = 'relation',
  RichText = 'richText',
  RichTextWithEmbeds = 'richTextWithEmbeds',
  Scalar = 'scalar',
  Union = 'union',
  Virtual = 'virtual'
}

export enum _MutationKind {
  Create = 'create',
  Delete = 'delete',
  DeleteMany = 'deleteMany',
  Publish = 'publish',
  PublishMany = 'publishMany',
  SchedulePublish = 'schedulePublish',
  ScheduleUnpublish = 'scheduleUnpublish',
  Unpublish = 'unpublish',
  UnpublishMany = 'unpublishMany',
  Update = 'update',
  UpdateMany = 'updateMany',
  Upsert = 'upsert'
}

export enum _OrderDirection {
  Asc = 'asc',
  Desc = 'desc'
}

export enum _RelationInputCardinality {
  Many = 'many',
  One = 'one'
}

export enum _RelationInputKind {
  Create = 'create',
  Update = 'update'
}

export enum _RelationKind {
  Regular = 'regular',
  Union = 'union'
}

export enum _SystemDateTimeFieldVariation {
  Base = 'base',
  Combined = 'combined',
  Localization = 'localization'
}

export type AlbumFieldsFragment = { __typename?: 'Album', id: string, albumSlug?: string | null, title?: string | null, releaseDate?: any | null, albumBuyLink?: string | null, featureHomePage?: boolean | null, albumJsonData?: any | null, iFramePlayer?: string | null, albumCover?: { __typename?: 'Asset', id: string, url: string } | null, description?: { __typename?: 'RichText', raw: any, html: string, markdown: string, text: string } | null, videoBox: Array<{ __typename?: 'VideoBox', videoTitle?: string | null, youtubeVideoId?: string | null, vimeoVideoId?: string | null, youtubePlaylistId?: string | null }> };

export type BlogFieldsFragment = { __typename?: 'Blog', id: string, blogSlug?: string | null, blogCategory?: BlogTags | null, title?: string | null, authorQuery: Array<ContactQueries>, excerpt?: string | null, blogCallToActionText?: string | null, blogJson?: any | null, date?: any | null, blogCallToActionLink?: string | null, blogHtml?: string | null, audioBlog?: { __typename?: 'Asset', url: string } | null, image?: { __typename?: 'Asset', id: string, url: string } | null, content?: { __typename?: 'RichText', raw: any, html: string, markdown: string, text: string } | null, blogGallery: Array<{ __typename?: 'Asset', url: string }>, videoBox: Array<{ __typename?: 'VideoBox', videoTitle?: string | null, youtubeVideoId?: string | null, vimeoVideoId?: string | null, youtubePlaylistId?: string | null }> };

export type SiteLibraryFieldsFragment = { __typename?: 'SiteLibrary', id: string, title?: string | null, isSpanish?: boolean | null, facebookPixelId?: string | null, facebookLink?: string | null, tikTokLink?: string | null, instagramLink?: string | null, spotifyLink?: string | null, threadsLink?: string | null, twitterLink?: string | null, youtubeLink?: string | null, pandoraLink?: string | null, appleMusicLink?: string | null, soundcloudLink?: string | null, pinterestLink?: string | null, githubLink?: string | null, linkedinLink?: string | null, siteCssBodyClass?: string | null, mailchimp?: string | null, contactEmail?: string | null, contactPhone?: string | null, contactName?: string | null, analyticsId?: string | null, mapKey?: string | null, siteLibraryJson?: any | null, secondaryName?: string | null, secondaryLink?: string | null, paypalClientId?: string | null, metaGoogleConsoleVerification?: string | null, metaDescription?: string | null, metaDomain?: string | null, youtubeApiKey: string, logo?: { __typename?: 'Asset', id: string, url: string } | null, secondaryLogo?: { __typename?: 'Asset', id: string, url: string } | null, themeColor: { __typename?: 'RootColor', background: { __typename?: 'Color', hex: any, css: string, rgba: { __typename?: 'RGBA', r: any, g: any, b: any, a: any } }, backgroundSecondary: { __typename?: 'Color', hex: any, css: string, rgba: { __typename?: 'RGBA', r: any, g: any, b: any, a: any } }, primary: { __typename?: 'Color', hex: any, css: string, rgba: { __typename?: 'RGBA', r: any, g: any, b: any, a: any } }, secondary: { __typename?: 'Color', hex: any, css: string, rgba: { __typename?: 'RGBA', r: any, g: any, b: any, a: any } }, tertiary: { __typename?: 'Color', hex: any, css: string, rgba: { __typename?: 'RGBA', r: any, g: any, b: any, a: any } }, primaryFadeOpacity: { __typename?: 'Color', hex: any, css: string, rgba: { __typename?: 'RGBA', r: any, g: any, b: any, a: any } }, text: { __typename?: 'Color', hex: any, css: string, rgba: { __typename?: 'RGBA', r: any, g: any, b: any, a: any } }, textOverlay: { __typename?: 'Color', hex: any, css: string, rgba: { __typename?: 'RGBA', r: any, g: any, b: any, a: any } } }, favicon?: { __typename?: 'Asset', url: string } | null, metaOgImage?: { __typename?: 'Asset', url: string } | null, metaAppleTouchIcon?: { __typename?: 'Asset', url: string } | null };

export type EventFieldsFragment = { __typename?: 'Event', eventAddress?: string | null, eventAddressGoogleMapLink?: string | null, eventCityState?: string | null, eventEndDateTime?: any | null, eventIFrame?: string | null, eventFeatured?: boolean | null, eventLinkButtonText?: string | null, eventShortDescription?: string | null, eventSlug?: string | null, eventStartDateTime?: any | null, eventTicketLinkDestination?: string | null, eventTitle?: string | null, eventVenueName?: string | null, eventShowType?: EventShowType | null, videoBox: Array<{ __typename?: 'VideoBox', videoTitle?: string | null, youtubeVideoId?: string | null, vimeoVideoId?: string | null, youtubePlaylistId?: string | null }>, eventDescription?: { __typename?: 'RichText', html: string, raw: any } | null, eventFlyer?: { __typename?: 'Asset', id: string, url: string } | null, eventGallery: Array<{ __typename?: 'Asset', url: string, id: string }> };

export type TestimonialFieldsFragment = { __typename?: 'Testimonial', id: string, updatedAt: any, testimonialName?: string | null, testimonialJobTitle?: string | null, testimonialType?: TestimonialType | null, starCount?: number | null, testimonialLink?: string | null, testimonialLinkLabel?: string | null, testimonialSourceLink?: string | null, testimonialAvatar?: { __typename?: 'Asset', url: string } | null, testimonialText?: { __typename?: 'RichText', html: string, raw: any } | null, testimonialLogo?: { __typename?: 'Asset', url: string } | null };

export type LogoTableFieldsFragment = { __typename?: 'LogoTable', logoName?: string | null, logoLink?: string | null, logoType?: LogoTableItem | null, logoImage?: { __typename?: 'Asset', url: string } | null };

export type PagesSlugListFieldsFragment = { __typename?: 'Page', pageSlug?: string | null, updatedAt: any, noIndex?: boolean | null };

export type BlogsSlugListFieldsFragment = { __typename?: 'Blog', blogSlug?: string | null, updatedAt: any };

export type AlbumsSlugListFieldsFragment = { __typename?: 'Album', albumSlug?: string | null, updatedAt: any };

export type EventsSlugListFieldsFragment = { __typename?: 'Event', eventSlug?: string | null, updatedAt: any };

export type ProfilesSlugListFieldsFragment = { __typename?: 'Profile', profileSlug?: string | null, profileType: ProfilesSelect, updatedAt: any };

export type ProductsSlugListFieldsFragment = { __typename?: 'Product', productSlug: string, productType: ProductType, updatedAt: any };

export type LayoutBlockColumnFieldsFragment = { __typename?: 'LayoutBlockColumn', id: string, htmlId?: string | null, cssClass?: string | null, hideBlockColumn?: boolean | null, backgroundImage?: { __typename?: 'Asset', url: string } | null, contentTags?: { __typename?: 'ContentTag', albumDisplayType?: AlbumQueryDisplay | null, blogCategory?: BlogTags | null, blogSectionTitle?: string | null, contactType: Array<ContactQueries>, eventDisplayLayout?: EventDisplayType | null, eventShowType?: EventShowType | null, logoTableType?: LogoTableItem | null, logoTableLayout?: GalleryLayout | null, productType?: ProductType | null, profileLayoutStyle?: ProfileLayoutStyle | null, profileSectionTitle?: string | null, profileType?: ProfilesSelect | null, testimonialType?: TestimonialType | null, parentPageType?: ParentPage | null } | null, elements?: { __typename?: 'Element', stripePricingTableId?: string | null, stripePublishableKey?: string | null, displayInstagramSectionUsername?: string | null, galleryLayout?: GalleryLayout | null, standOutText?: string | null, iFrameTitle?: string | null, iFrameCode?: string | null, imageCssClass?: string | null, htmlText?: string | null, htmlTextCssClass?: string | null, elementJson?: any | null, bandsInTownKey?: string | null, parallaxImage?: { __typename?: 'Asset', url: string } | null, gallery: Array<{ __typename?: 'Asset', url: string }>, image?: { __typename?: 'Asset', url: string } | null, mapLatLong?: { __typename?: 'Location', longitude: number, latitude: number } | null } | null, sections: Array<{ __typename: 'Accordion', contentHeader?: { __typename?: 'RichText', raw: any, html: string } | null, contentDescription?: { __typename?: 'RichText', raw: any, html: string } | null, videoBox?: { __typename?: 'VideoBox', videoTitle?: string | null, youtubeVideoId?: string | null, vimeoVideoId?: string | null, youtubePlaylistId?: string | null } | null, contentImage?: { __typename?: 'Asset', url: string } | null } | { __typename: 'CallToAction', ctaLabel?: string | null, ctaLink?: string | null, ctaClass?: string | null, ctaPrimary?: boolean | null, contentAlign?: ContentAlign | null } | { __typename: 'ContactForm', contactFormTitle?: string | null, netlifyContactForm?: boolean | null, netlifyFormFields: Array<NetlifyFormFields>, jotformUrl?: string | null, hubspotFormId?: string | null, hubspotPortalId?: string | null, calendlyLink?: string | null, cssClass?: string | null, contactFormDescription?: { __typename?: 'RichText', raw: any, html: string } | null } | { __typename: 'GridBox', boxTitle?: string | null, boxLink?: string | null, boxDisplay?: GridBoxDisplay | null, boxDescription?: { __typename?: 'RichText', raw: any, html: string } | null, boxImage?: { __typename?: 'Asset', url: string } | null } | { __typename: 'HeroMediaSlider', sliderCssWrapper?: string | null, mediaType?: MediaType | null, displaySocialMedia?: boolean | null, youtubeVideoId?: string | null, id: string, sliderMediaBackground?: { __typename?: 'Asset', url: string } | null, textContent?: { __typename?: 'TextContent', link?: string | null, imageStyle: Array<ImageStyle>, textContentWidth?: PageWidthStyle | null, contentAlign?: ContentAlign | null, linkImage?: boolean | null, cssClass?: string | null, htmlText?: string | null, header?: { __typename?: 'RichText', raw: any, html: string } | null, subHeader?: { __typename?: 'RichText', raw: any, html: string } | null, content?: { __typename?: 'RichText', raw: any, html: string } | null, contentImage?: { __typename?: 'Asset', url: string } | null } | null, callToAction: Array<{ __typename?: 'CallToAction', ctaLabel?: string | null, ctaLink?: string | null, ctaClass?: string | null, ctaPrimary?: boolean | null, contentAlign?: ContentAlign | null }> } | { __typename: 'LoopText', staticText?: string | null, cssClassStatic?: string | null, cssClassItem?: string | null, cssClassWrapper?: string | null, loopTextItem: Array<{ __typename?: 'LoopTextItem', loopTextItemContent?: string | null }> } | { __typename: 'TextContent', link?: string | null, imageStyle: Array<ImageStyle>, textContentWidth?: PageWidthStyle | null, contentAlign?: ContentAlign | null, linkImage?: boolean | null, cssClass?: string | null, htmlText?: string | null, header?: { __typename?: 'RichText', raw: any, html: string } | null, subHeader?: { __typename?: 'RichText', raw: any, html: string } | null, content?: { __typename?: 'RichText', raw: any, html: string } | null, contentImage?: { __typename?: 'Asset', url: string } | null } | { __typename: 'VideoBox', videoTitle?: string | null, youtubeVideoId?: string | null, vimeoVideoId?: string | null, youtubePlaylistId?: string | null }> };

export type PageFieldsFragment = { __typename?: 'Page', id: string, pageSlug?: string | null, pageNavigationSelection?: PageNavigationSelection | null, title?: string | null, subtitle?: string | null, pageWidthStyle?: PageWidthStyle | null, contentPageJson?: any | null, hideNav?: boolean | null, hideFooter?: boolean | null, hideHeader?: boolean | null, setHomePage?: boolean | null, noIndex?: boolean | null, whatsAppContactNumberFloatingButton?: string | null, heroImage?: { __typename?: 'Asset', url: string } | null, layoutBlocks: Array<{ __typename?: 'LayoutBlock', id: string, cssClass?: string | null, backgroundColor?: { __typename?: 'Color', hex: any, css: string, rgba: { __typename?: 'RGBA', r: any, g: any, b: any, a: any } } | null, backgroundImage?: { __typename?: 'Asset', url: string } | null, layoutBlockColumns: Array<{ __typename?: 'LayoutBlockColumn', id: string, htmlId?: string | null, cssClass?: string | null, hideBlockColumn?: boolean | null, backgroundImage?: { __typename?: 'Asset', url: string } | null, contentTags?: { __typename?: 'ContentTag', albumDisplayType?: AlbumQueryDisplay | null, blogCategory?: BlogTags | null, blogSectionTitle?: string | null, contactType: Array<ContactQueries>, eventDisplayLayout?: EventDisplayType | null, eventShowType?: EventShowType | null, logoTableType?: LogoTableItem | null, logoTableLayout?: GalleryLayout | null, productType?: ProductType | null, profileLayoutStyle?: ProfileLayoutStyle | null, profileSectionTitle?: string | null, profileType?: ProfilesSelect | null, testimonialType?: TestimonialType | null, parentPageType?: ParentPage | null } | null, elements?: { __typename?: 'Element', stripePricingTableId?: string | null, stripePublishableKey?: string | null, displayInstagramSectionUsername?: string | null, galleryLayout?: GalleryLayout | null, standOutText?: string | null, iFrameTitle?: string | null, iFrameCode?: string | null, imageCssClass?: string | null, htmlText?: string | null, htmlTextCssClass?: string | null, elementJson?: any | null, bandsInTownKey?: string | null, parallaxImage?: { __typename?: 'Asset', url: string } | null, gallery: Array<{ __typename?: 'Asset', url: string }>, image?: { __typename?: 'Asset', url: string } | null, mapLatLong?: { __typename?: 'Location', longitude: number, latitude: number } | null } | null, sections: Array<{ __typename: 'Accordion', contentHeader?: { __typename?: 'RichText', raw: any, html: string } | null, contentDescription?: { __typename?: 'RichText', raw: any, html: string } | null, videoBox?: { __typename?: 'VideoBox', videoTitle?: string | null, youtubeVideoId?: string | null, vimeoVideoId?: string | null, youtubePlaylistId?: string | null } | null, contentImage?: { __typename?: 'Asset', url: string } | null } | { __typename: 'CallToAction', ctaLabel?: string | null, ctaLink?: string | null, ctaClass?: string | null, ctaPrimary?: boolean | null, contentAlign?: ContentAlign | null } | { __typename: 'ContactForm', contactFormTitle?: string | null, netlifyContactForm?: boolean | null, netlifyFormFields: Array<NetlifyFormFields>, jotformUrl?: string | null, hubspotFormId?: string | null, hubspotPortalId?: string | null, calendlyLink?: string | null, cssClass?: string | null, contactFormDescription?: { __typename?: 'RichText', raw: any, html: string } | null } | { __typename: 'GridBox', boxTitle?: string | null, boxLink?: string | null, boxDisplay?: GridBoxDisplay | null, boxDescription?: { __typename?: 'RichText', raw: any, html: string } | null, boxImage?: { __typename?: 'Asset', url: string } | null } | { __typename: 'HeroMediaSlider', sliderCssWrapper?: string | null, mediaType?: MediaType | null, displaySocialMedia?: boolean | null, youtubeVideoId?: string | null, id: string, sliderMediaBackground?: { __typename?: 'Asset', url: string } | null, textContent?: { __typename?: 'TextContent', link?: string | null, imageStyle: Array<ImageStyle>, textContentWidth?: PageWidthStyle | null, contentAlign?: ContentAlign | null, linkImage?: boolean | null, cssClass?: string | null, htmlText?: string | null, header?: { __typename?: 'RichText', raw: any, html: string } | null, subHeader?: { __typename?: 'RichText', raw: any, html: string } | null, content?: { __typename?: 'RichText', raw: any, html: string } | null, contentImage?: { __typename?: 'Asset', url: string } | null } | null, callToAction: Array<{ __typename?: 'CallToAction', ctaLabel?: string | null, ctaLink?: string | null, ctaClass?: string | null, ctaPrimary?: boolean | null, contentAlign?: ContentAlign | null }> } | { __typename: 'LoopText', staticText?: string | null, cssClassStatic?: string | null, cssClassItem?: string | null, cssClassWrapper?: string | null, loopTextItem: Array<{ __typename?: 'LoopTextItem', loopTextItemContent?: string | null }> } | { __typename: 'TextContent', link?: string | null, imageStyle: Array<ImageStyle>, textContentWidth?: PageWidthStyle | null, contentAlign?: ContentAlign | null, linkImage?: boolean | null, cssClass?: string | null, htmlText?: string | null, header?: { __typename?: 'RichText', raw: any, html: string } | null, subHeader?: { __typename?: 'RichText', raw: any, html: string } | null, content?: { __typename?: 'RichText', raw: any, html: string } | null, contentImage?: { __typename?: 'Asset', url: string } | null } | { __typename: 'VideoBox', videoTitle?: string | null, youtubeVideoId?: string | null, vimeoVideoId?: string | null, youtubePlaylistId?: string | null }> }> }>, popup?: { __typename?: 'Popup', duration?: number | null, header?: string | null, buttonOpenText?: string | null, buttonOpenCss?: string | null, openOnScroll: boolean, popupContent: Array<{ __typename?: 'LayoutBlockColumn', id: string, htmlId?: string | null, cssClass?: string | null, hideBlockColumn?: boolean | null, backgroundImage?: { __typename?: 'Asset', url: string } | null, contentTags?: { __typename?: 'ContentTag', albumDisplayType?: AlbumQueryDisplay | null, blogCategory?: BlogTags | null, blogSectionTitle?: string | null, contactType: Array<ContactQueries>, eventDisplayLayout?: EventDisplayType | null, eventShowType?: EventShowType | null, logoTableType?: LogoTableItem | null, logoTableLayout?: GalleryLayout | null, productType?: ProductType | null, profileLayoutStyle?: ProfileLayoutStyle | null, profileSectionTitle?: string | null, profileType?: ProfilesSelect | null, testimonialType?: TestimonialType | null, parentPageType?: ParentPage | null } | null, elements?: { __typename?: 'Element', stripePricingTableId?: string | null, stripePublishableKey?: string | null, displayInstagramSectionUsername?: string | null, galleryLayout?: GalleryLayout | null, standOutText?: string | null, iFrameTitle?: string | null, iFrameCode?: string | null, imageCssClass?: string | null, htmlText?: string | null, htmlTextCssClass?: string | null, elementJson?: any | null, bandsInTownKey?: string | null, parallaxImage?: { __typename?: 'Asset', url: string } | null, gallery: Array<{ __typename?: 'Asset', url: string }>, image?: { __typename?: 'Asset', url: string } | null, mapLatLong?: { __typename?: 'Location', longitude: number, latitude: number } | null } | null, sections: Array<{ __typename: 'Accordion', contentHeader?: { __typename?: 'RichText', raw: any, html: string } | null, contentDescription?: { __typename?: 'RichText', raw: any, html: string } | null, videoBox?: { __typename?: 'VideoBox', videoTitle?: string | null, youtubeVideoId?: string | null, vimeoVideoId?: string | null, youtubePlaylistId?: string | null } | null, contentImage?: { __typename?: 'Asset', url: string } | null } | { __typename: 'CallToAction', ctaLabel?: string | null, ctaLink?: string | null, ctaClass?: string | null, ctaPrimary?: boolean | null, contentAlign?: ContentAlign | null } | { __typename: 'ContactForm', contactFormTitle?: string | null, netlifyContactForm?: boolean | null, netlifyFormFields: Array<NetlifyFormFields>, jotformUrl?: string | null, hubspotFormId?: string | null, hubspotPortalId?: string | null, calendlyLink?: string | null, cssClass?: string | null, contactFormDescription?: { __typename?: 'RichText', raw: any, html: string } | null } | { __typename: 'GridBox', boxTitle?: string | null, boxLink?: string | null, boxDisplay?: GridBoxDisplay | null, boxDescription?: { __typename?: 'RichText', raw: any, html: string } | null, boxImage?: { __typename?: 'Asset', url: string } | null } | { __typename: 'HeroMediaSlider', sliderCssWrapper?: string | null, mediaType?: MediaType | null, displaySocialMedia?: boolean | null, youtubeVideoId?: string | null, id: string, sliderMediaBackground?: { __typename?: 'Asset', url: string } | null, textContent?: { __typename?: 'TextContent', link?: string | null, imageStyle: Array<ImageStyle>, textContentWidth?: PageWidthStyle | null, contentAlign?: ContentAlign | null, linkImage?: boolean | null, cssClass?: string | null, htmlText?: string | null, header?: { __typename?: 'RichText', raw: any, html: string } | null, subHeader?: { __typename?: 'RichText', raw: any, html: string } | null, content?: { __typename?: 'RichText', raw: any, html: string } | null, contentImage?: { __typename?: 'Asset', url: string } | null } | null, callToAction: Array<{ __typename?: 'CallToAction', ctaLabel?: string | null, ctaLink?: string | null, ctaClass?: string | null, ctaPrimary?: boolean | null, contentAlign?: ContentAlign | null }> } | { __typename: 'LoopText', staticText?: string | null, cssClassStatic?: string | null, cssClassItem?: string | null, cssClassWrapper?: string | null, loopTextItem: Array<{ __typename?: 'LoopTextItem', loopTextItemContent?: string | null }> } | { __typename: 'TextContent', link?: string | null, imageStyle: Array<ImageStyle>, textContentWidth?: PageWidthStyle | null, contentAlign?: ContentAlign | null, linkImage?: boolean | null, cssClass?: string | null, htmlText?: string | null, header?: { __typename?: 'RichText', raw: any, html: string } | null, subHeader?: { __typename?: 'RichText', raw: any, html: string } | null, content?: { __typename?: 'RichText', raw: any, html: string } | null, contentImage?: { __typename?: 'Asset', url: string } | null } | { __typename: 'VideoBox', videoTitle?: string | null, youtubeVideoId?: string | null, vimeoVideoId?: string | null, youtubePlaylistId?: string | null }> }> } | null };

export type LoopTextFieldsFragment = { __typename?: 'LoopText', staticText?: string | null, cssClassStatic?: string | null, cssClassItem?: string | null, cssClassWrapper?: string | null, loopTextItem: Array<{ __typename?: 'LoopTextItem', loopTextItemContent?: string | null }> };

export type TextContentFieldsFragment = { __typename?: 'TextContent', link?: string | null, imageStyle: Array<ImageStyle>, textContentWidth?: PageWidthStyle | null, contentAlign?: ContentAlign | null, linkImage?: boolean | null, cssClass?: string | null, htmlText?: string | null, header?: { __typename?: 'RichText', raw: any, html: string } | null, subHeader?: { __typename?: 'RichText', raw: any, html: string } | null, content?: { __typename?: 'RichText', raw: any, html: string } | null, contentImage?: { __typename?: 'Asset', url: string } | null };

export type CallToActionFieldsFragment = { __typename?: 'CallToAction', ctaLabel?: string | null, ctaLink?: string | null, ctaClass?: string | null, ctaPrimary?: boolean | null, contentAlign?: ContentAlign | null };

export type HeroMediaSliderFieldsFragment = { __typename?: 'HeroMediaSlider', sliderCssWrapper?: string | null, mediaType?: MediaType | null, displaySocialMedia?: boolean | null, youtubeVideoId?: string | null, id: string, sliderMediaBackground?: { __typename?: 'Asset', url: string } | null, textContent?: { __typename?: 'TextContent', link?: string | null, imageStyle: Array<ImageStyle>, textContentWidth?: PageWidthStyle | null, contentAlign?: ContentAlign | null, linkImage?: boolean | null, cssClass?: string | null, htmlText?: string | null, header?: { __typename?: 'RichText', raw: any, html: string } | null, subHeader?: { __typename?: 'RichText', raw: any, html: string } | null, content?: { __typename?: 'RichText', raw: any, html: string } | null, contentImage?: { __typename?: 'Asset', url: string } | null } | null, callToAction: Array<{ __typename?: 'CallToAction', ctaLabel?: string | null, ctaLink?: string | null, ctaClass?: string | null, ctaPrimary?: boolean | null, contentAlign?: ContentAlign | null }> };

export type ContactFormFieldsFragment = { __typename?: 'ContactForm', contactFormTitle?: string | null, netlifyContactForm?: boolean | null, netlifyFormFields: Array<NetlifyFormFields>, jotformUrl?: string | null, hubspotFormId?: string | null, hubspotPortalId?: string | null, calendlyLink?: string | null, cssClass?: string | null, contactFormDescription?: { __typename?: 'RichText', raw: any, html: string } | null };

export type GridBoxFieldsFragment = { __typename?: 'GridBox', boxTitle?: string | null, boxLink?: string | null, boxDisplay?: GridBoxDisplay | null, boxDescription?: { __typename?: 'RichText', raw: any, html: string } | null, boxImage?: { __typename?: 'Asset', url: string } | null };

export type AccordionFieldsFragment = { __typename?: 'Accordion', contentHeader?: { __typename?: 'RichText', raw: any, html: string } | null, contentDescription?: { __typename?: 'RichText', raw: any, html: string } | null, videoBox?: { __typename?: 'VideoBox', videoTitle?: string | null, youtubeVideoId?: string | null, vimeoVideoId?: string | null, youtubePlaylistId?: string | null } | null, contentImage?: { __typename?: 'Asset', url: string } | null };

export type VideoBoxFieldsFragment = { __typename?: 'VideoBox', videoTitle?: string | null, youtubeVideoId?: string | null, vimeoVideoId?: string | null, youtubePlaylistId?: string | null };

export type NavigationFieldsFragment = { __typename?: 'Navigation', navigationLayoutStyle?: NavigationLayout | null, pageNavigationSelection?: PageNavigationSelection | null, navigationWrapperCssClass?: string | null, footerWrapperCssClass?: string | null, navigationLogo?: { __typename?: 'Asset', url: string } | null, items: Array<{ __typename?: 'NavigationItem', link?: string | null, label?: string | null, cssClass?: string | null, sameTab?: boolean | null, primaryItem?: boolean | null, image?: { __typename?: 'Asset', id: string, url: string } | null, items: Array<{ __typename?: 'NavigationItem', link?: string | null, label?: string | null, cssClass?: string | null, sameTab?: boolean | null, image?: { __typename?: 'Asset', id: string, url: string } | null }> }>, footerColumns: Array<{ __typename?: 'FooterColumn', footerIframe?: string | null, footerTitle?: string | null, wideColumn?: boolean | null, recentBlogByCategory?: BlogTags | null, footerColumnCssWrapper?: string | null, footerImage?: { __typename?: 'Asset', url: string } | null, footerText?: { __typename?: 'RichText', html: string, raw: any } | null, footerLink: Array<{ __typename?: 'NavigationItem', link?: string | null, label?: string | null, cssClass?: string | null, sameTab?: boolean | null, image?: { __typename?: 'Asset', id: string, url: string } | null, items: Array<{ __typename?: 'NavigationItem', link?: string | null, label?: string | null, cssClass?: string | null, sameTab?: boolean | null, image?: { __typename?: 'Asset', id: string, url: string } | null }> }> }>, footerItems: Array<{ __typename?: 'NavigationItem', link?: string | null, label?: string | null, cssClass?: string | null, sameTab?: boolean | null, image?: { __typename?: 'Asset', id: string, url: string } | null, items: Array<{ __typename?: 'NavigationItem', link?: string | null, label?: string | null, cssClass?: string | null, sameTab?: boolean | null, image?: { __typename?: 'Asset', id: string, url: string } | null }> }> };

export type ProfileFieldsFragment = { __typename?: 'Profile', createdAt: any, updatedAt: any, appleMusicLink?: string | null, calendlyLink?: string | null, email?: string | null, epkLink?: string | null, facebookLink?: string | null, iFrame?: string | null, instagramLink?: string | null, role?: string | null, linkedinLink?: string | null, profileType: ProfilesSelect, miniBio?: string | null, name?: string | null, order?: number | null, pandoraLink?: string | null, phoneNumber?: string | null, primaryProfile?: boolean | null, soundcloudLink?: string | null, spotifyLink?: string | null, profileSlug?: string | null, tikTokLink?: string | null, tourWidgetiFrame?: string | null, threadsLink?: string | null, twitterLink?: string | null, websiteLink?: string | null, youtubeLink?: string | null, contactQuery: Array<ContactQueries>, displayVcf?: boolean | null, profileJson?: any | null, bandsInTownKey?: string | null, profilePageLayoutStyle?: ProfilePageLayoutStyle | null, externalLink?: string | null, fullBio?: { __typename?: 'RichText', html: string, raw: any } | null, avatarImage?: { __typename?: 'Asset', url: string } | null, imageGallery: Array<{ __typename?: 'Asset', url: string }>, portfolioGallery: Array<{ __typename?: 'Asset', url: string }>, videoBox: Array<{ __typename?: 'VideoBox', videoTitle?: string | null, youtubeVideoId?: string | null, vimeoVideoId?: string | null, youtubePlaylistId?: string | null }>, heroImage?: { __typename?: 'Asset', url: string } | null, profileLogo?: { __typename?: 'Asset', url: string } | null };

export type ContactFieldsFragment = { __typename?: 'Contact', contactName: string, contactQuery: ContactQueries, contactEmail?: string | null, contactTitle?: string | null, contactPhone?: string | null, contactAddress?: string | null, contactGoogleAddressLink?: string | null, contactWhatsapp?: string | null, contactCalendly?: string | null, contactLinkedin?: string | null, contactAvatar?: { __typename?: 'Asset', id: string, url: string } | null };

export type ProductFieldsFragment = { __typename?: 'Product', name: string, id: string, productSlug: string, vendor?: string | null, price?: string | null, sku?: string | null, purchaseLink?: string | null, purchaseLabel?: string | null, enableProduct?: boolean | null, productType: ProductType, iFrame?: string | null, productJson?: any | null, gallery: Array<{ __typename?: 'Asset', url: string }>, description?: { __typename?: 'RichText', html: string } | null, videoBox: Array<{ __typename?: 'VideoBox', videoTitle?: string | null, youtubeVideoId?: string | null, vimeoVideoId?: string | null, youtubePlaylistId?: string | null }> };

export type LayoutQueryVariables = Exact<{
  eventFirst?: InputMaybe<Scalars['Int']>;
  blogFirst?: InputMaybe<Scalars['Int']>;
  eventOrderBy?: InputMaybe<EventOrderByInput>;
  blogOrderBy?: InputMaybe<BlogOrderByInput>;
  albumFirst?: InputMaybe<Scalars['Int']>;
  albumOrderBy?: InputMaybe<AlbumOrderByInput>;
  contactFirst?: InputMaybe<Scalars['Int']>;
  testimonialOrderBy?: InputMaybe<TestimonialOrderByInput>;
  testimonialFirst?: InputMaybe<Scalars['Int']>;
  profilesFirst?: InputMaybe<Scalars['Int']>;
  pageSlug: Scalars['String'];
  productFirst?: InputMaybe<Scalars['Int']>;
  logoTableFirst?: InputMaybe<Scalars['Int']>;
  logoTableOrderBy?: InputMaybe<LogoTableOrderByInput>;
}>;


export type LayoutQuery = { __typename?: 'Query', siteLibrary?: { __typename?: 'SiteLibrary', id: string, title?: string | null, isSpanish?: boolean | null, facebookPixelId?: string | null, facebookLink?: string | null, tikTokLink?: string | null, instagramLink?: string | null, spotifyLink?: string | null, threadsLink?: string | null, twitterLink?: string | null, youtubeLink?: string | null, pandoraLink?: string | null, appleMusicLink?: string | null, soundcloudLink?: string | null, pinterestLink?: string | null, githubLink?: string | null, linkedinLink?: string | null, siteCssBodyClass?: string | null, mailchimp?: string | null, contactEmail?: string | null, contactPhone?: string | null, contactName?: string | null, analyticsId?: string | null, mapKey?: string | null, siteLibraryJson?: any | null, secondaryName?: string | null, secondaryLink?: string | null, paypalClientId?: string | null, metaGoogleConsoleVerification?: string | null, metaDescription?: string | null, metaDomain?: string | null, youtubeApiKey: string, logo?: { __typename?: 'Asset', id: string, url: string } | null, secondaryLogo?: { __typename?: 'Asset', id: string, url: string } | null, themeColor: { __typename?: 'RootColor', background: { __typename?: 'Color', hex: any, css: string, rgba: { __typename?: 'RGBA', r: any, g: any, b: any, a: any } }, backgroundSecondary: { __typename?: 'Color', hex: any, css: string, rgba: { __typename?: 'RGBA', r: any, g: any, b: any, a: any } }, primary: { __typename?: 'Color', hex: any, css: string, rgba: { __typename?: 'RGBA', r: any, g: any, b: any, a: any } }, secondary: { __typename?: 'Color', hex: any, css: string, rgba: { __typename?: 'RGBA', r: any, g: any, b: any, a: any } }, tertiary: { __typename?: 'Color', hex: any, css: string, rgba: { __typename?: 'RGBA', r: any, g: any, b: any, a: any } }, primaryFadeOpacity: { __typename?: 'Color', hex: any, css: string, rgba: { __typename?: 'RGBA', r: any, g: any, b: any, a: any } }, text: { __typename?: 'Color', hex: any, css: string, rgba: { __typename?: 'RGBA', r: any, g: any, b: any, a: any } }, textOverlay: { __typename?: 'Color', hex: any, css: string, rgba: { __typename?: 'RGBA', r: any, g: any, b: any, a: any } } }, favicon?: { __typename?: 'Asset', url: string } | null, metaOgImage?: { __typename?: 'Asset', url: string } | null, metaAppleTouchIcon?: { __typename?: 'Asset', url: string } | null } | null, events: Array<{ __typename?: 'Event', eventAddress?: string | null, eventAddressGoogleMapLink?: string | null, eventCityState?: string | null, eventEndDateTime?: any | null, eventIFrame?: string | null, eventFeatured?: boolean | null, eventLinkButtonText?: string | null, eventShortDescription?: string | null, eventSlug?: string | null, eventStartDateTime?: any | null, eventTicketLinkDestination?: string | null, eventTitle?: string | null, eventVenueName?: string | null, eventShowType?: EventShowType | null, videoBox: Array<{ __typename?: 'VideoBox', videoTitle?: string | null, youtubeVideoId?: string | null, vimeoVideoId?: string | null, youtubePlaylistId?: string | null }>, eventDescription?: { __typename?: 'RichText', html: string, raw: any } | null, eventFlyer?: { __typename?: 'Asset', id: string, url: string } | null, eventGallery: Array<{ __typename?: 'Asset', url: string, id: string }> }>, albums: Array<{ __typename?: 'Album', id: string, albumSlug?: string | null, title?: string | null, releaseDate?: any | null, albumBuyLink?: string | null, featureHomePage?: boolean | null, albumJsonData?: any | null, iFramePlayer?: string | null, albumCover?: { __typename?: 'Asset', id: string, url: string } | null, description?: { __typename?: 'RichText', raw: any, html: string, markdown: string, text: string } | null, videoBox: Array<{ __typename?: 'VideoBox', videoTitle?: string | null, youtubeVideoId?: string | null, vimeoVideoId?: string | null, youtubePlaylistId?: string | null }> }>, testimonials: Array<{ __typename?: 'Testimonial', id: string, updatedAt: any, testimonialName?: string | null, testimonialJobTitle?: string | null, testimonialType?: TestimonialType | null, starCount?: number | null, testimonialLink?: string | null, testimonialLinkLabel?: string | null, testimonialSourceLink?: string | null, testimonialAvatar?: { __typename?: 'Asset', url: string } | null, testimonialText?: { __typename?: 'RichText', html: string, raw: any } | null, testimonialLogo?: { __typename?: 'Asset', url: string } | null }>, blogs: Array<{ __typename?: 'Blog', id: string, blogSlug?: string | null, blogCategory?: BlogTags | null, title?: string | null, authorQuery: Array<ContactQueries>, excerpt?: string | null, blogCallToActionText?: string | null, blogJson?: any | null, date?: any | null, blogCallToActionLink?: string | null, blogHtml?: string | null, audioBlog?: { __typename?: 'Asset', url: string } | null, image?: { __typename?: 'Asset', id: string, url: string } | null, content?: { __typename?: 'RichText', raw: any, html: string, markdown: string, text: string } | null, blogGallery: Array<{ __typename?: 'Asset', url: string }>, videoBox: Array<{ __typename?: 'VideoBox', videoTitle?: string | null, youtubeVideoId?: string | null, vimeoVideoId?: string | null, youtubePlaylistId?: string | null }> }>, profiles: Array<{ __typename?: 'Profile', createdAt: any, updatedAt: any, appleMusicLink?: string | null, calendlyLink?: string | null, email?: string | null, epkLink?: string | null, facebookLink?: string | null, iFrame?: string | null, instagramLink?: string | null, role?: string | null, linkedinLink?: string | null, profileType: ProfilesSelect, miniBio?: string | null, name?: string | null, order?: number | null, pandoraLink?: string | null, phoneNumber?: string | null, primaryProfile?: boolean | null, soundcloudLink?: string | null, spotifyLink?: string | null, profileSlug?: string | null, tikTokLink?: string | null, tourWidgetiFrame?: string | null, threadsLink?: string | null, twitterLink?: string | null, websiteLink?: string | null, youtubeLink?: string | null, contactQuery: Array<ContactQueries>, displayVcf?: boolean | null, profileJson?: any | null, bandsInTownKey?: string | null, profilePageLayoutStyle?: ProfilePageLayoutStyle | null, externalLink?: string | null, fullBio?: { __typename?: 'RichText', html: string, raw: any } | null, avatarImage?: { __typename?: 'Asset', url: string } | null, imageGallery: Array<{ __typename?: 'Asset', url: string }>, portfolioGallery: Array<{ __typename?: 'Asset', url: string }>, videoBox: Array<{ __typename?: 'VideoBox', videoTitle?: string | null, youtubeVideoId?: string | null, vimeoVideoId?: string | null, youtubePlaylistId?: string | null }>, heroImage?: { __typename?: 'Asset', url: string } | null, profileLogo?: { __typename?: 'Asset', url: string } | null }>, page?: { __typename?: 'Page', id: string, pageSlug?: string | null, pageNavigationSelection?: PageNavigationSelection | null, title?: string | null, subtitle?: string | null, pageWidthStyle?: PageWidthStyle | null, contentPageJson?: any | null, hideNav?: boolean | null, hideFooter?: boolean | null, hideHeader?: boolean | null, setHomePage?: boolean | null, noIndex?: boolean | null, whatsAppContactNumberFloatingButton?: string | null, heroImage?: { __typename?: 'Asset', url: string } | null, layoutBlocks: Array<{ __typename?: 'LayoutBlock', id: string, cssClass?: string | null, backgroundColor?: { __typename?: 'Color', hex: any, css: string, rgba: { __typename?: 'RGBA', r: any, g: any, b: any, a: any } } | null, backgroundImage?: { __typename?: 'Asset', url: string } | null, layoutBlockColumns: Array<{ __typename?: 'LayoutBlockColumn', id: string, htmlId?: string | null, cssClass?: string | null, hideBlockColumn?: boolean | null, backgroundImage?: { __typename?: 'Asset', url: string } | null, contentTags?: { __typename?: 'ContentTag', albumDisplayType?: AlbumQueryDisplay | null, blogCategory?: BlogTags | null, blogSectionTitle?: string | null, contactType: Array<ContactQueries>, eventDisplayLayout?: EventDisplayType | null, eventShowType?: EventShowType | null, logoTableType?: LogoTableItem | null, logoTableLayout?: GalleryLayout | null, productType?: ProductType | null, profileLayoutStyle?: ProfileLayoutStyle | null, profileSectionTitle?: string | null, profileType?: ProfilesSelect | null, testimonialType?: TestimonialType | null, parentPageType?: ParentPage | null } | null, elements?: { __typename?: 'Element', stripePricingTableId?: string | null, stripePublishableKey?: string | null, displayInstagramSectionUsername?: string | null, galleryLayout?: GalleryLayout | null, standOutText?: string | null, iFrameTitle?: string | null, iFrameCode?: string | null, imageCssClass?: string | null, htmlText?: string | null, htmlTextCssClass?: string | null, elementJson?: any | null, bandsInTownKey?: string | null, parallaxImage?: { __typename?: 'Asset', url: string } | null, gallery: Array<{ __typename?: 'Asset', url: string }>, image?: { __typename?: 'Asset', url: string } | null, mapLatLong?: { __typename?: 'Location', longitude: number, latitude: number } | null } | null, sections: Array<{ __typename: 'Accordion', contentHeader?: { __typename?: 'RichText', raw: any, html: string } | null, contentDescription?: { __typename?: 'RichText', raw: any, html: string } | null, videoBox?: { __typename?: 'VideoBox', videoTitle?: string | null, youtubeVideoId?: string | null, vimeoVideoId?: string | null, youtubePlaylistId?: string | null } | null, contentImage?: { __typename?: 'Asset', url: string } | null } | { __typename: 'CallToAction', ctaLabel?: string | null, ctaLink?: string | null, ctaClass?: string | null, ctaPrimary?: boolean | null, contentAlign?: ContentAlign | null } | { __typename: 'ContactForm', contactFormTitle?: string | null, netlifyContactForm?: boolean | null, netlifyFormFields: Array<NetlifyFormFields>, jotformUrl?: string | null, hubspotFormId?: string | null, hubspotPortalId?: string | null, calendlyLink?: string | null, cssClass?: string | null, contactFormDescription?: { __typename?: 'RichText', raw: any, html: string } | null } | { __typename: 'GridBox', boxTitle?: string | null, boxLink?: string | null, boxDisplay?: GridBoxDisplay | null, boxDescription?: { __typename?: 'RichText', raw: any, html: string } | null, boxImage?: { __typename?: 'Asset', url: string } | null } | { __typename: 'HeroMediaSlider', sliderCssWrapper?: string | null, mediaType?: MediaType | null, displaySocialMedia?: boolean | null, youtubeVideoId?: string | null, id: string, sliderMediaBackground?: { __typename?: 'Asset', url: string } | null, textContent?: { __typename?: 'TextContent', link?: string | null, imageStyle: Array<ImageStyle>, textContentWidth?: PageWidthStyle | null, contentAlign?: ContentAlign | null, linkImage?: boolean | null, cssClass?: string | null, htmlText?: string | null, header?: { __typename?: 'RichText', raw: any, html: string } | null, subHeader?: { __typename?: 'RichText', raw: any, html: string } | null, content?: { __typename?: 'RichText', raw: any, html: string } | null, contentImage?: { __typename?: 'Asset', url: string } | null } | null, callToAction: Array<{ __typename?: 'CallToAction', ctaLabel?: string | null, ctaLink?: string | null, ctaClass?: string | null, ctaPrimary?: boolean | null, contentAlign?: ContentAlign | null }> } | { __typename: 'LoopText', staticText?: string | null, cssClassStatic?: string | null, cssClassItem?: string | null, cssClassWrapper?: string | null, loopTextItem: Array<{ __typename?: 'LoopTextItem', loopTextItemContent?: string | null }> } | { __typename: 'TextContent', link?: string | null, imageStyle: Array<ImageStyle>, textContentWidth?: PageWidthStyle | null, contentAlign?: ContentAlign | null, linkImage?: boolean | null, cssClass?: string | null, htmlText?: string | null, header?: { __typename?: 'RichText', raw: any, html: string } | null, subHeader?: { __typename?: 'RichText', raw: any, html: string } | null, content?: { __typename?: 'RichText', raw: any, html: string } | null, contentImage?: { __typename?: 'Asset', url: string } | null } | { __typename: 'VideoBox', videoTitle?: string | null, youtubeVideoId?: string | null, vimeoVideoId?: string | null, youtubePlaylistId?: string | null }> }> }>, popup?: { __typename?: 'Popup', duration?: number | null, header?: string | null, buttonOpenText?: string | null, buttonOpenCss?: string | null, openOnScroll: boolean, popupContent: Array<{ __typename?: 'LayoutBlockColumn', id: string, htmlId?: string | null, cssClass?: string | null, hideBlockColumn?: boolean | null, backgroundImage?: { __typename?: 'Asset', url: string } | null, contentTags?: { __typename?: 'ContentTag', albumDisplayType?: AlbumQueryDisplay | null, blogCategory?: BlogTags | null, blogSectionTitle?: string | null, contactType: Array<ContactQueries>, eventDisplayLayout?: EventDisplayType | null, eventShowType?: EventShowType | null, logoTableType?: LogoTableItem | null, logoTableLayout?: GalleryLayout | null, productType?: ProductType | null, profileLayoutStyle?: ProfileLayoutStyle | null, profileSectionTitle?: string | null, profileType?: ProfilesSelect | null, testimonialType?: TestimonialType | null, parentPageType?: ParentPage | null } | null, elements?: { __typename?: 'Element', stripePricingTableId?: string | null, stripePublishableKey?: string | null, displayInstagramSectionUsername?: string | null, galleryLayout?: GalleryLayout | null, standOutText?: string | null, iFrameTitle?: string | null, iFrameCode?: string | null, imageCssClass?: string | null, htmlText?: string | null, htmlTextCssClass?: string | null, elementJson?: any | null, bandsInTownKey?: string | null, parallaxImage?: { __typename?: 'Asset', url: string } | null, gallery: Array<{ __typename?: 'Asset', url: string }>, image?: { __typename?: 'Asset', url: string } | null, mapLatLong?: { __typename?: 'Location', longitude: number, latitude: number } | null } | null, sections: Array<{ __typename: 'Accordion', contentHeader?: { __typename?: 'RichText', raw: any, html: string } | null, contentDescription?: { __typename?: 'RichText', raw: any, html: string } | null, videoBox?: { __typename?: 'VideoBox', videoTitle?: string | null, youtubeVideoId?: string | null, vimeoVideoId?: string | null, youtubePlaylistId?: string | null } | null, contentImage?: { __typename?: 'Asset', url: string } | null } | { __typename: 'CallToAction', ctaLabel?: string | null, ctaLink?: string | null, ctaClass?: string | null, ctaPrimary?: boolean | null, contentAlign?: ContentAlign | null } | { __typename: 'ContactForm', contactFormTitle?: string | null, netlifyContactForm?: boolean | null, netlifyFormFields: Array<NetlifyFormFields>, jotformUrl?: string | null, hubspotFormId?: string | null, hubspotPortalId?: string | null, calendlyLink?: string | null, cssClass?: string | null, contactFormDescription?: { __typename?: 'RichText', raw: any, html: string } | null } | { __typename: 'GridBox', boxTitle?: string | null, boxLink?: string | null, boxDisplay?: GridBoxDisplay | null, boxDescription?: { __typename?: 'RichText', raw: any, html: string } | null, boxImage?: { __typename?: 'Asset', url: string } | null } | { __typename: 'HeroMediaSlider', sliderCssWrapper?: string | null, mediaType?: MediaType | null, displaySocialMedia?: boolean | null, youtubeVideoId?: string | null, id: string, sliderMediaBackground?: { __typename?: 'Asset', url: string } | null, textContent?: { __typename?: 'TextContent', link?: string | null, imageStyle: Array<ImageStyle>, textContentWidth?: PageWidthStyle | null, contentAlign?: ContentAlign | null, linkImage?: boolean | null, cssClass?: string | null, htmlText?: string | null, header?: { __typename?: 'RichText', raw: any, html: string } | null, subHeader?: { __typename?: 'RichText', raw: any, html: string } | null, content?: { __typename?: 'RichText', raw: any, html: string } | null, contentImage?: { __typename?: 'Asset', url: string } | null } | null, callToAction: Array<{ __typename?: 'CallToAction', ctaLabel?: string | null, ctaLink?: string | null, ctaClass?: string | null, ctaPrimary?: boolean | null, contentAlign?: ContentAlign | null }> } | { __typename: 'LoopText', staticText?: string | null, cssClassStatic?: string | null, cssClassItem?: string | null, cssClassWrapper?: string | null, loopTextItem: Array<{ __typename?: 'LoopTextItem', loopTextItemContent?: string | null }> } | { __typename: 'TextContent', link?: string | null, imageStyle: Array<ImageStyle>, textContentWidth?: PageWidthStyle | null, contentAlign?: ContentAlign | null, linkImage?: boolean | null, cssClass?: string | null, htmlText?: string | null, header?: { __typename?: 'RichText', raw: any, html: string } | null, subHeader?: { __typename?: 'RichText', raw: any, html: string } | null, content?: { __typename?: 'RichText', raw: any, html: string } | null, contentImage?: { __typename?: 'Asset', url: string } | null } | { __typename: 'VideoBox', videoTitle?: string | null, youtubeVideoId?: string | null, vimeoVideoId?: string | null, youtubePlaylistId?: string | null }> }> } | null } | null, navigations: Array<{ __typename?: 'Navigation', navigationLayoutStyle?: NavigationLayout | null, pageNavigationSelection?: PageNavigationSelection | null, navigationWrapperCssClass?: string | null, footerWrapperCssClass?: string | null, navigationLogo?: { __typename?: 'Asset', url: string } | null, items: Array<{ __typename?: 'NavigationItem', link?: string | null, label?: string | null, cssClass?: string | null, sameTab?: boolean | null, primaryItem?: boolean | null, image?: { __typename?: 'Asset', id: string, url: string } | null, items: Array<{ __typename?: 'NavigationItem', link?: string | null, label?: string | null, cssClass?: string | null, sameTab?: boolean | null, image?: { __typename?: 'Asset', id: string, url: string } | null }> }>, footerColumns: Array<{ __typename?: 'FooterColumn', footerIframe?: string | null, footerTitle?: string | null, wideColumn?: boolean | null, recentBlogByCategory?: BlogTags | null, footerColumnCssWrapper?: string | null, footerImage?: { __typename?: 'Asset', url: string } | null, footerText?: { __typename?: 'RichText', html: string, raw: any } | null, footerLink: Array<{ __typename?: 'NavigationItem', link?: string | null, label?: string | null, cssClass?: string | null, sameTab?: boolean | null, image?: { __typename?: 'Asset', id: string, url: string } | null, items: Array<{ __typename?: 'NavigationItem', link?: string | null, label?: string | null, cssClass?: string | null, sameTab?: boolean | null, image?: { __typename?: 'Asset', id: string, url: string } | null }> }> }>, footerItems: Array<{ __typename?: 'NavigationItem', link?: string | null, label?: string | null, cssClass?: string | null, sameTab?: boolean | null, image?: { __typename?: 'Asset', id: string, url: string } | null, items: Array<{ __typename?: 'NavigationItem', link?: string | null, label?: string | null, cssClass?: string | null, sameTab?: boolean | null, image?: { __typename?: 'Asset', id: string, url: string } | null }> }> }>, contacts: Array<{ __typename?: 'Contact', contactName: string, contactQuery: ContactQueries, contactEmail?: string | null, contactTitle?: string | null, contactPhone?: string | null, contactAddress?: string | null, contactGoogleAddressLink?: string | null, contactWhatsapp?: string | null, contactCalendly?: string | null, contactLinkedin?: string | null, contactAvatar?: { __typename?: 'Asset', id: string, url: string } | null }>, products: Array<{ __typename?: 'Product', name: string, id: string, productSlug: string, vendor?: string | null, price?: string | null, sku?: string | null, purchaseLink?: string | null, purchaseLabel?: string | null, enableProduct?: boolean | null, productType: ProductType, iFrame?: string | null, productJson?: any | null, gallery: Array<{ __typename?: 'Asset', url: string }>, description?: { __typename?: 'RichText', html: string } | null, videoBox: Array<{ __typename?: 'VideoBox', videoTitle?: string | null, youtubeVideoId?: string | null, vimeoVideoId?: string | null, youtubePlaylistId?: string | null }> }>, logoTables: Array<{ __typename?: 'LogoTable', logoName?: string | null, logoLink?: string | null, logoType?: LogoTableItem | null, logoImage?: { __typename?: 'Asset', url: string } | null }> };

export type PagesQueryVariables = Exact<{ [key: string]: never; }>;


export type PagesQuery = { __typename?: 'Query', pages: Array<{ __typename?: 'Page', id: string, pageSlug?: string | null, pageNavigationSelection?: PageNavigationSelection | null, title?: string | null, subtitle?: string | null, pageWidthStyle?: PageWidthStyle | null, contentPageJson?: any | null, hideNav?: boolean | null, hideFooter?: boolean | null, hideHeader?: boolean | null, setHomePage?: boolean | null, noIndex?: boolean | null, whatsAppContactNumberFloatingButton?: string | null, heroImage?: { __typename?: 'Asset', url: string } | null, layoutBlocks: Array<{ __typename?: 'LayoutBlock', id: string, cssClass?: string | null, backgroundColor?: { __typename?: 'Color', hex: any, css: string, rgba: { __typename?: 'RGBA', r: any, g: any, b: any, a: any } } | null, backgroundImage?: { __typename?: 'Asset', url: string } | null, layoutBlockColumns: Array<{ __typename?: 'LayoutBlockColumn', id: string, htmlId?: string | null, cssClass?: string | null, hideBlockColumn?: boolean | null, backgroundImage?: { __typename?: 'Asset', url: string } | null, contentTags?: { __typename?: 'ContentTag', albumDisplayType?: AlbumQueryDisplay | null, blogCategory?: BlogTags | null, blogSectionTitle?: string | null, contactType: Array<ContactQueries>, eventDisplayLayout?: EventDisplayType | null, eventShowType?: EventShowType | null, logoTableType?: LogoTableItem | null, logoTableLayout?: GalleryLayout | null, productType?: ProductType | null, profileLayoutStyle?: ProfileLayoutStyle | null, profileSectionTitle?: string | null, profileType?: ProfilesSelect | null, testimonialType?: TestimonialType | null, parentPageType?: ParentPage | null } | null, elements?: { __typename?: 'Element', stripePricingTableId?: string | null, stripePublishableKey?: string | null, displayInstagramSectionUsername?: string | null, galleryLayout?: GalleryLayout | null, standOutText?: string | null, iFrameTitle?: string | null, iFrameCode?: string | null, imageCssClass?: string | null, htmlText?: string | null, htmlTextCssClass?: string | null, elementJson?: any | null, bandsInTownKey?: string | null, parallaxImage?: { __typename?: 'Asset', url: string } | null, gallery: Array<{ __typename?: 'Asset', url: string }>, image?: { __typename?: 'Asset', url: string } | null, mapLatLong?: { __typename?: 'Location', longitude: number, latitude: number } | null } | null, sections: Array<{ __typename: 'Accordion', contentHeader?: { __typename?: 'RichText', raw: any, html: string } | null, contentDescription?: { __typename?: 'RichText', raw: any, html: string } | null, videoBox?: { __typename?: 'VideoBox', videoTitle?: string | null, youtubeVideoId?: string | null, vimeoVideoId?: string | null, youtubePlaylistId?: string | null } | null, contentImage?: { __typename?: 'Asset', url: string } | null } | { __typename: 'CallToAction', ctaLabel?: string | null, ctaLink?: string | null, ctaClass?: string | null, ctaPrimary?: boolean | null, contentAlign?: ContentAlign | null } | { __typename: 'ContactForm', contactFormTitle?: string | null, netlifyContactForm?: boolean | null, netlifyFormFields: Array<NetlifyFormFields>, jotformUrl?: string | null, hubspotFormId?: string | null, hubspotPortalId?: string | null, calendlyLink?: string | null, cssClass?: string | null, contactFormDescription?: { __typename?: 'RichText', raw: any, html: string } | null } | { __typename: 'GridBox', boxTitle?: string | null, boxLink?: string | null, boxDisplay?: GridBoxDisplay | null, boxDescription?: { __typename?: 'RichText', raw: any, html: string } | null, boxImage?: { __typename?: 'Asset', url: string } | null } | { __typename: 'HeroMediaSlider', sliderCssWrapper?: string | null, mediaType?: MediaType | null, displaySocialMedia?: boolean | null, youtubeVideoId?: string | null, id: string, sliderMediaBackground?: { __typename?: 'Asset', url: string } | null, textContent?: { __typename?: 'TextContent', link?: string | null, imageStyle: Array<ImageStyle>, textContentWidth?: PageWidthStyle | null, contentAlign?: ContentAlign | null, linkImage?: boolean | null, cssClass?: string | null, htmlText?: string | null, header?: { __typename?: 'RichText', raw: any, html: string } | null, subHeader?: { __typename?: 'RichText', raw: any, html: string } | null, content?: { __typename?: 'RichText', raw: any, html: string } | null, contentImage?: { __typename?: 'Asset', url: string } | null } | null, callToAction: Array<{ __typename?: 'CallToAction', ctaLabel?: string | null, ctaLink?: string | null, ctaClass?: string | null, ctaPrimary?: boolean | null, contentAlign?: ContentAlign | null }> } | { __typename: 'LoopText', staticText?: string | null, cssClassStatic?: string | null, cssClassItem?: string | null, cssClassWrapper?: string | null, loopTextItem: Array<{ __typename?: 'LoopTextItem', loopTextItemContent?: string | null }> } | { __typename: 'TextContent', link?: string | null, imageStyle: Array<ImageStyle>, textContentWidth?: PageWidthStyle | null, contentAlign?: ContentAlign | null, linkImage?: boolean | null, cssClass?: string | null, htmlText?: string | null, header?: { __typename?: 'RichText', raw: any, html: string } | null, subHeader?: { __typename?: 'RichText', raw: any, html: string } | null, content?: { __typename?: 'RichText', raw: any, html: string } | null, contentImage?: { __typename?: 'Asset', url: string } | null } | { __typename: 'VideoBox', videoTitle?: string | null, youtubeVideoId?: string | null, vimeoVideoId?: string | null, youtubePlaylistId?: string | null }> }> }>, popup?: { __typename?: 'Popup', duration?: number | null, header?: string | null, buttonOpenText?: string | null, buttonOpenCss?: string | null, openOnScroll: boolean, popupContent: Array<{ __typename?: 'LayoutBlockColumn', id: string, htmlId?: string | null, cssClass?: string | null, hideBlockColumn?: boolean | null, backgroundImage?: { __typename?: 'Asset', url: string } | null, contentTags?: { __typename?: 'ContentTag', albumDisplayType?: AlbumQueryDisplay | null, blogCategory?: BlogTags | null, blogSectionTitle?: string | null, contactType: Array<ContactQueries>, eventDisplayLayout?: EventDisplayType | null, eventShowType?: EventShowType | null, logoTableType?: LogoTableItem | null, logoTableLayout?: GalleryLayout | null, productType?: ProductType | null, profileLayoutStyle?: ProfileLayoutStyle | null, profileSectionTitle?: string | null, profileType?: ProfilesSelect | null, testimonialType?: TestimonialType | null, parentPageType?: ParentPage | null } | null, elements?: { __typename?: 'Element', stripePricingTableId?: string | null, stripePublishableKey?: string | null, displayInstagramSectionUsername?: string | null, galleryLayout?: GalleryLayout | null, standOutText?: string | null, iFrameTitle?: string | null, iFrameCode?: string | null, imageCssClass?: string | null, htmlText?: string | null, htmlTextCssClass?: string | null, elementJson?: any | null, bandsInTownKey?: string | null, parallaxImage?: { __typename?: 'Asset', url: string } | null, gallery: Array<{ __typename?: 'Asset', url: string }>, image?: { __typename?: 'Asset', url: string } | null, mapLatLong?: { __typename?: 'Location', longitude: number, latitude: number } | null } | null, sections: Array<{ __typename: 'Accordion', contentHeader?: { __typename?: 'RichText', raw: any, html: string } | null, contentDescription?: { __typename?: 'RichText', raw: any, html: string } | null, videoBox?: { __typename?: 'VideoBox', videoTitle?: string | null, youtubeVideoId?: string | null, vimeoVideoId?: string | null, youtubePlaylistId?: string | null } | null, contentImage?: { __typename?: 'Asset', url: string } | null } | { __typename: 'CallToAction', ctaLabel?: string | null, ctaLink?: string | null, ctaClass?: string | null, ctaPrimary?: boolean | null, contentAlign?: ContentAlign | null } | { __typename: 'ContactForm', contactFormTitle?: string | null, netlifyContactForm?: boolean | null, netlifyFormFields: Array<NetlifyFormFields>, jotformUrl?: string | null, hubspotFormId?: string | null, hubspotPortalId?: string | null, calendlyLink?: string | null, cssClass?: string | null, contactFormDescription?: { __typename?: 'RichText', raw: any, html: string } | null } | { __typename: 'GridBox', boxTitle?: string | null, boxLink?: string | null, boxDisplay?: GridBoxDisplay | null, boxDescription?: { __typename?: 'RichText', raw: any, html: string } | null, boxImage?: { __typename?: 'Asset', url: string } | null } | { __typename: 'HeroMediaSlider', sliderCssWrapper?: string | null, mediaType?: MediaType | null, displaySocialMedia?: boolean | null, youtubeVideoId?: string | null, id: string, sliderMediaBackground?: { __typename?: 'Asset', url: string } | null, textContent?: { __typename?: 'TextContent', link?: string | null, imageStyle: Array<ImageStyle>, textContentWidth?: PageWidthStyle | null, contentAlign?: ContentAlign | null, linkImage?: boolean | null, cssClass?: string | null, htmlText?: string | null, header?: { __typename?: 'RichText', raw: any, html: string } | null, subHeader?: { __typename?: 'RichText', raw: any, html: string } | null, content?: { __typename?: 'RichText', raw: any, html: string } | null, contentImage?: { __typename?: 'Asset', url: string } | null } | null, callToAction: Array<{ __typename?: 'CallToAction', ctaLabel?: string | null, ctaLink?: string | null, ctaClass?: string | null, ctaPrimary?: boolean | null, contentAlign?: ContentAlign | null }> } | { __typename: 'LoopText', staticText?: string | null, cssClassStatic?: string | null, cssClassItem?: string | null, cssClassWrapper?: string | null, loopTextItem: Array<{ __typename?: 'LoopTextItem', loopTextItemContent?: string | null }> } | { __typename: 'TextContent', link?: string | null, imageStyle: Array<ImageStyle>, textContentWidth?: PageWidthStyle | null, contentAlign?: ContentAlign | null, linkImage?: boolean | null, cssClass?: string | null, htmlText?: string | null, header?: { __typename?: 'RichText', raw: any, html: string } | null, subHeader?: { __typename?: 'RichText', raw: any, html: string } | null, content?: { __typename?: 'RichText', raw: any, html: string } | null, contentImage?: { __typename?: 'Asset', url: string } | null } | { __typename: 'VideoBox', videoTitle?: string | null, youtubeVideoId?: string | null, vimeoVideoId?: string | null, youtubePlaylistId?: string | null }> }> } | null }> };

export type PagesSlugListQueryVariables = Exact<{
  pageSlugFirst?: InputMaybe<Scalars['Int']>;
}>;


export type PagesSlugListQuery = { __typename?: 'Query', pages: Array<{ __typename?: 'Page', pageSlug?: string | null, updatedAt: any, noIndex?: boolean | null }>, blogs: Array<{ __typename?: 'Blog', blogSlug?: string | null, updatedAt: any }>, albums: Array<{ __typename?: 'Album', albumSlug?: string | null, updatedAt: any }>, events: Array<{ __typename?: 'Event', eventSlug?: string | null, updatedAt: any }>, profiles: Array<{ __typename?: 'Profile', profileSlug?: string | null, profileType: ProfilesSelect, updatedAt: any }>, products: Array<{ __typename?: 'Product', productSlug: string, productType: ProductType, updatedAt: any }> };

export type BlogQueryVariables = Exact<{
  blogSlug: Scalars['String'];
}>;


export type BlogQuery = { __typename?: 'Query', blog?: { __typename?: 'Blog', id: string, blogSlug?: string | null, blogCategory?: BlogTags | null, title?: string | null, authorQuery: Array<ContactQueries>, excerpt?: string | null, blogCallToActionText?: string | null, blogJson?: any | null, date?: any | null, blogCallToActionLink?: string | null, blogHtml?: string | null, audioBlog?: { __typename?: 'Asset', url: string } | null, image?: { __typename?: 'Asset', id: string, url: string } | null, content?: { __typename?: 'RichText', raw: any, html: string, markdown: string, text: string } | null, blogGallery: Array<{ __typename?: 'Asset', url: string }>, videoBox: Array<{ __typename?: 'VideoBox', videoTitle?: string | null, youtubeVideoId?: string | null, vimeoVideoId?: string | null, youtubePlaylistId?: string | null }> } | null };

export type BlogsQueryVariables = Exact<{ [key: string]: never; }>;


export type BlogsQuery = { __typename?: 'Query', blogs: Array<{ __typename?: 'Blog', id: string, blogSlug?: string | null, blogCategory?: BlogTags | null, title?: string | null, authorQuery: Array<ContactQueries>, excerpt?: string | null, blogCallToActionText?: string | null, blogJson?: any | null, date?: any | null, blogCallToActionLink?: string | null, blogHtml?: string | null, audioBlog?: { __typename?: 'Asset', url: string } | null, image?: { __typename?: 'Asset', id: string, url: string } | null, content?: { __typename?: 'RichText', raw: any, html: string, markdown: string, text: string } | null, blogGallery: Array<{ __typename?: 'Asset', url: string }>, videoBox: Array<{ __typename?: 'VideoBox', videoTitle?: string | null, youtubeVideoId?: string | null, vimeoVideoId?: string | null, youtubePlaylistId?: string | null }> }> };

export type ContactsQueryVariables = Exact<{ [key: string]: never; }>;


export type ContactsQuery = { __typename?: 'Query', contacts: Array<{ __typename?: 'Contact', contactName: string, contactQuery: ContactQueries, contactEmail?: string | null, contactTitle?: string | null, contactPhone?: string | null, contactAddress?: string | null, contactGoogleAddressLink?: string | null, contactWhatsapp?: string | null, contactCalendly?: string | null, contactLinkedin?: string | null, contactAvatar?: { __typename?: 'Asset', id: string, url: string } | null }> };

export type SiteLibraryQueryVariables = Exact<{ [key: string]: never; }>;


export type SiteLibraryQuery = { __typename?: 'Query', siteLibrary?: { __typename?: 'SiteLibrary', id: string, title?: string | null, isSpanish?: boolean | null, facebookPixelId?: string | null, facebookLink?: string | null, tikTokLink?: string | null, instagramLink?: string | null, spotifyLink?: string | null, threadsLink?: string | null, twitterLink?: string | null, youtubeLink?: string | null, pandoraLink?: string | null, appleMusicLink?: string | null, soundcloudLink?: string | null, pinterestLink?: string | null, githubLink?: string | null, linkedinLink?: string | null, siteCssBodyClass?: string | null, mailchimp?: string | null, contactEmail?: string | null, contactPhone?: string | null, contactName?: string | null, analyticsId?: string | null, mapKey?: string | null, siteLibraryJson?: any | null, secondaryName?: string | null, secondaryLink?: string | null, paypalClientId?: string | null, metaGoogleConsoleVerification?: string | null, metaDescription?: string | null, metaDomain?: string | null, youtubeApiKey: string, logo?: { __typename?: 'Asset', id: string, url: string } | null, secondaryLogo?: { __typename?: 'Asset', id: string, url: string } | null, themeColor: { __typename?: 'RootColor', background: { __typename?: 'Color', hex: any, css: string, rgba: { __typename?: 'RGBA', r: any, g: any, b: any, a: any } }, backgroundSecondary: { __typename?: 'Color', hex: any, css: string, rgba: { __typename?: 'RGBA', r: any, g: any, b: any, a: any } }, primary: { __typename?: 'Color', hex: any, css: string, rgba: { __typename?: 'RGBA', r: any, g: any, b: any, a: any } }, secondary: { __typename?: 'Color', hex: any, css: string, rgba: { __typename?: 'RGBA', r: any, g: any, b: any, a: any } }, tertiary: { __typename?: 'Color', hex: any, css: string, rgba: { __typename?: 'RGBA', r: any, g: any, b: any, a: any } }, primaryFadeOpacity: { __typename?: 'Color', hex: any, css: string, rgba: { __typename?: 'RGBA', r: any, g: any, b: any, a: any } }, text: { __typename?: 'Color', hex: any, css: string, rgba: { __typename?: 'RGBA', r: any, g: any, b: any, a: any } }, textOverlay: { __typename?: 'Color', hex: any, css: string, rgba: { __typename?: 'RGBA', r: any, g: any, b: any, a: any } } }, favicon?: { __typename?: 'Asset', url: string } | null, metaOgImage?: { __typename?: 'Asset', url: string } | null, metaAppleTouchIcon?: { __typename?: 'Asset', url: string } | null } | null };

export type NavigationQueryVariables = Exact<{ [key: string]: never; }>;


export type NavigationQuery = { __typename?: 'Query', navigations: Array<{ __typename?: 'Navigation', navigationLayoutStyle?: NavigationLayout | null, pageNavigationSelection?: PageNavigationSelection | null, navigationWrapperCssClass?: string | null, footerWrapperCssClass?: string | null, navigationLogo?: { __typename?: 'Asset', url: string } | null, items: Array<{ __typename?: 'NavigationItem', link?: string | null, label?: string | null, cssClass?: string | null, sameTab?: boolean | null, primaryItem?: boolean | null, image?: { __typename?: 'Asset', id: string, url: string } | null, items: Array<{ __typename?: 'NavigationItem', link?: string | null, label?: string | null, cssClass?: string | null, sameTab?: boolean | null, image?: { __typename?: 'Asset', id: string, url: string } | null }> }>, footerColumns: Array<{ __typename?: 'FooterColumn', footerIframe?: string | null, footerTitle?: string | null, wideColumn?: boolean | null, recentBlogByCategory?: BlogTags | null, footerColumnCssWrapper?: string | null, footerImage?: { __typename?: 'Asset', url: string } | null, footerText?: { __typename?: 'RichText', html: string, raw: any } | null, footerLink: Array<{ __typename?: 'NavigationItem', link?: string | null, label?: string | null, cssClass?: string | null, sameTab?: boolean | null, image?: { __typename?: 'Asset', id: string, url: string } | null, items: Array<{ __typename?: 'NavigationItem', link?: string | null, label?: string | null, cssClass?: string | null, sameTab?: boolean | null, image?: { __typename?: 'Asset', id: string, url: string } | null }> }> }>, footerItems: Array<{ __typename?: 'NavigationItem', link?: string | null, label?: string | null, cssClass?: string | null, sameTab?: boolean | null, image?: { __typename?: 'Asset', id: string, url: string } | null, items: Array<{ __typename?: 'NavigationItem', link?: string | null, label?: string | null, cssClass?: string | null, sameTab?: boolean | null, image?: { __typename?: 'Asset', id: string, url: string } | null }> }> }> };

export type EventQueryVariables = Exact<{
  eventSlug: Scalars['String'];
}>;


export type EventQuery = { __typename?: 'Query', event?: { __typename?: 'Event', eventAddress?: string | null, eventAddressGoogleMapLink?: string | null, eventCityState?: string | null, eventEndDateTime?: any | null, eventIFrame?: string | null, eventFeatured?: boolean | null, eventLinkButtonText?: string | null, eventShortDescription?: string | null, eventSlug?: string | null, eventStartDateTime?: any | null, eventTicketLinkDestination?: string | null, eventTitle?: string | null, eventVenueName?: string | null, eventShowType?: EventShowType | null, videoBox: Array<{ __typename?: 'VideoBox', videoTitle?: string | null, youtubeVideoId?: string | null, vimeoVideoId?: string | null, youtubePlaylistId?: string | null }>, eventDescription?: { __typename?: 'RichText', html: string, raw: any } | null, eventFlyer?: { __typename?: 'Asset', id: string, url: string } | null, eventGallery: Array<{ __typename?: 'Asset', url: string, id: string }> } | null };

export type AlbumQueryVariables = Exact<{
  albumSlug: Scalars['String'];
}>;


export type AlbumQuery = { __typename?: 'Query', album?: { __typename?: 'Album', id: string, albumSlug?: string | null, title?: string | null, releaseDate?: any | null, albumBuyLink?: string | null, featureHomePage?: boolean | null, albumJsonData?: any | null, iFramePlayer?: string | null, albumCover?: { __typename?: 'Asset', id: string, url: string } | null, description?: { __typename?: 'RichText', raw: any, html: string, markdown: string, text: string } | null, videoBox: Array<{ __typename?: 'VideoBox', videoTitle?: string | null, youtubeVideoId?: string | null, vimeoVideoId?: string | null, youtubePlaylistId?: string | null }> } | null };

export type TestimonialsQueryVariables = Exact<{ [key: string]: never; }>;


export type TestimonialsQuery = { __typename?: 'Query', testimonials: Array<{ __typename?: 'Testimonial', id: string, updatedAt: any, testimonialName?: string | null, testimonialJobTitle?: string | null, testimonialType?: TestimonialType | null, starCount?: number | null, testimonialLink?: string | null, testimonialLinkLabel?: string | null, testimonialSourceLink?: string | null, testimonialAvatar?: { __typename?: 'Asset', url: string } | null, testimonialText?: { __typename?: 'RichText', html: string, raw: any } | null, testimonialLogo?: { __typename?: 'Asset', url: string } | null }> };

export type ProfilesQueryVariables = Exact<{ [key: string]: never; }>;


export type ProfilesQuery = { __typename?: 'Query', profiles: Array<{ __typename?: 'Profile', createdAt: any, updatedAt: any, appleMusicLink?: string | null, calendlyLink?: string | null, email?: string | null, epkLink?: string | null, facebookLink?: string | null, iFrame?: string | null, instagramLink?: string | null, role?: string | null, linkedinLink?: string | null, profileType: ProfilesSelect, miniBio?: string | null, name?: string | null, order?: number | null, pandoraLink?: string | null, phoneNumber?: string | null, primaryProfile?: boolean | null, soundcloudLink?: string | null, spotifyLink?: string | null, profileSlug?: string | null, tikTokLink?: string | null, tourWidgetiFrame?: string | null, threadsLink?: string | null, twitterLink?: string | null, websiteLink?: string | null, youtubeLink?: string | null, contactQuery: Array<ContactQueries>, displayVcf?: boolean | null, profileJson?: any | null, bandsInTownKey?: string | null, profilePageLayoutStyle?: ProfilePageLayoutStyle | null, externalLink?: string | null, fullBio?: { __typename?: 'RichText', html: string, raw: any } | null, avatarImage?: { __typename?: 'Asset', url: string } | null, imageGallery: Array<{ __typename?: 'Asset', url: string }>, portfolioGallery: Array<{ __typename?: 'Asset', url: string }>, videoBox: Array<{ __typename?: 'VideoBox', videoTitle?: string | null, youtubeVideoId?: string | null, vimeoVideoId?: string | null, youtubePlaylistId?: string | null }>, heroImage?: { __typename?: 'Asset', url: string } | null, profileLogo?: { __typename?: 'Asset', url: string } | null }> };

export type ProfileQueryVariables = Exact<{
  profileSlug: Scalars['String'];
}>;


export type ProfileQuery = { __typename?: 'Query', profile?: { __typename?: 'Profile', createdAt: any, updatedAt: any, appleMusicLink?: string | null, calendlyLink?: string | null, email?: string | null, epkLink?: string | null, facebookLink?: string | null, iFrame?: string | null, instagramLink?: string | null, role?: string | null, linkedinLink?: string | null, profileType: ProfilesSelect, miniBio?: string | null, name?: string | null, order?: number | null, pandoraLink?: string | null, phoneNumber?: string | null, primaryProfile?: boolean | null, soundcloudLink?: string | null, spotifyLink?: string | null, profileSlug?: string | null, tikTokLink?: string | null, tourWidgetiFrame?: string | null, threadsLink?: string | null, twitterLink?: string | null, websiteLink?: string | null, youtubeLink?: string | null, contactQuery: Array<ContactQueries>, displayVcf?: boolean | null, profileJson?: any | null, bandsInTownKey?: string | null, profilePageLayoutStyle?: ProfilePageLayoutStyle | null, externalLink?: string | null, fullBio?: { __typename?: 'RichText', html: string, raw: any } | null, avatarImage?: { __typename?: 'Asset', url: string } | null, imageGallery: Array<{ __typename?: 'Asset', url: string }>, portfolioGallery: Array<{ __typename?: 'Asset', url: string }>, videoBox: Array<{ __typename?: 'VideoBox', videoTitle?: string | null, youtubeVideoId?: string | null, vimeoVideoId?: string | null, youtubePlaylistId?: string | null }>, heroImage?: { __typename?: 'Asset', url: string } | null, profileLogo?: { __typename?: 'Asset', url: string } | null } | null };

export type ProfilePageQueryVariables = Exact<{
  profileSlug: Scalars['String'];
}>;


export type ProfilePageQuery = { __typename?: 'Query', profile?: { __typename?: 'Profile', createdAt: any, updatedAt: any, appleMusicLink?: string | null, calendlyLink?: string | null, email?: string | null, epkLink?: string | null, facebookLink?: string | null, iFrame?: string | null, instagramLink?: string | null, role?: string | null, linkedinLink?: string | null, profileType: ProfilesSelect, miniBio?: string | null, name?: string | null, order?: number | null, pandoraLink?: string | null, phoneNumber?: string | null, primaryProfile?: boolean | null, soundcloudLink?: string | null, spotifyLink?: string | null, profileSlug?: string | null, tikTokLink?: string | null, tourWidgetiFrame?: string | null, threadsLink?: string | null, twitterLink?: string | null, websiteLink?: string | null, youtubeLink?: string | null, contactQuery: Array<ContactQueries>, displayVcf?: boolean | null, profileJson?: any | null, bandsInTownKey?: string | null, profilePageLayoutStyle?: ProfilePageLayoutStyle | null, externalLink?: string | null, fullBio?: { __typename?: 'RichText', html: string, raw: any } | null, avatarImage?: { __typename?: 'Asset', url: string } | null, imageGallery: Array<{ __typename?: 'Asset', url: string }>, portfolioGallery: Array<{ __typename?: 'Asset', url: string }>, videoBox: Array<{ __typename?: 'VideoBox', videoTitle?: string | null, youtubeVideoId?: string | null, vimeoVideoId?: string | null, youtubePlaylistId?: string | null }>, heroImage?: { __typename?: 'Asset', url: string } | null, profileLogo?: { __typename?: 'Asset', url: string } | null } | null, blogs: Array<{ __typename?: 'Blog', id: string, blogSlug?: string | null, blogCategory?: BlogTags | null, title?: string | null, authorQuery: Array<ContactQueries>, excerpt?: string | null, blogCallToActionText?: string | null, blogJson?: any | null, date?: any | null, blogCallToActionLink?: string | null, blogHtml?: string | null, audioBlog?: { __typename?: 'Asset', url: string } | null, image?: { __typename?: 'Asset', id: string, url: string } | null, content?: { __typename?: 'RichText', raw: any, html: string, markdown: string, text: string } | null, blogGallery: Array<{ __typename?: 'Asset', url: string }>, videoBox: Array<{ __typename?: 'VideoBox', videoTitle?: string | null, youtubeVideoId?: string | null, vimeoVideoId?: string | null, youtubePlaylistId?: string | null }> }>, siteLibrary?: { __typename?: 'SiteLibrary', id: string, title?: string | null, isSpanish?: boolean | null, facebookPixelId?: string | null, facebookLink?: string | null, tikTokLink?: string | null, instagramLink?: string | null, spotifyLink?: string | null, threadsLink?: string | null, twitterLink?: string | null, youtubeLink?: string | null, pandoraLink?: string | null, appleMusicLink?: string | null, soundcloudLink?: string | null, pinterestLink?: string | null, githubLink?: string | null, linkedinLink?: string | null, siteCssBodyClass?: string | null, mailchimp?: string | null, contactEmail?: string | null, contactPhone?: string | null, contactName?: string | null, analyticsId?: string | null, mapKey?: string | null, siteLibraryJson?: any | null, secondaryName?: string | null, secondaryLink?: string | null, paypalClientId?: string | null, metaGoogleConsoleVerification?: string | null, metaDescription?: string | null, metaDomain?: string | null, youtubeApiKey: string, logo?: { __typename?: 'Asset', id: string, url: string } | null, secondaryLogo?: { __typename?: 'Asset', id: string, url: string } | null, themeColor: { __typename?: 'RootColor', background: { __typename?: 'Color', hex: any, css: string, rgba: { __typename?: 'RGBA', r: any, g: any, b: any, a: any } }, backgroundSecondary: { __typename?: 'Color', hex: any, css: string, rgba: { __typename?: 'RGBA', r: any, g: any, b: any, a: any } }, primary: { __typename?: 'Color', hex: any, css: string, rgba: { __typename?: 'RGBA', r: any, g: any, b: any, a: any } }, secondary: { __typename?: 'Color', hex: any, css: string, rgba: { __typename?: 'RGBA', r: any, g: any, b: any, a: any } }, tertiary: { __typename?: 'Color', hex: any, css: string, rgba: { __typename?: 'RGBA', r: any, g: any, b: any, a: any } }, primaryFadeOpacity: { __typename?: 'Color', hex: any, css: string, rgba: { __typename?: 'RGBA', r: any, g: any, b: any, a: any } }, text: { __typename?: 'Color', hex: any, css: string, rgba: { __typename?: 'RGBA', r: any, g: any, b: any, a: any } }, textOverlay: { __typename?: 'Color', hex: any, css: string, rgba: { __typename?: 'RGBA', r: any, g: any, b: any, a: any } } }, favicon?: { __typename?: 'Asset', url: string } | null, metaOgImage?: { __typename?: 'Asset', url: string } | null, metaAppleTouchIcon?: { __typename?: 'Asset', url: string } | null } | null, contacts: Array<{ __typename?: 'Contact', contactName: string, contactQuery: ContactQueries, contactEmail?: string | null, contactTitle?: string | null, contactPhone?: string | null, contactAddress?: string | null, contactGoogleAddressLink?: string | null, contactWhatsapp?: string | null, contactCalendly?: string | null, contactLinkedin?: string | null, contactAvatar?: { __typename?: 'Asset', id: string, url: string } | null }>, profiles: Array<{ __typename?: 'Profile', createdAt: any, updatedAt: any, appleMusicLink?: string | null, calendlyLink?: string | null, email?: string | null, epkLink?: string | null, facebookLink?: string | null, iFrame?: string | null, instagramLink?: string | null, role?: string | null, linkedinLink?: string | null, profileType: ProfilesSelect, miniBio?: string | null, name?: string | null, order?: number | null, pandoraLink?: string | null, phoneNumber?: string | null, primaryProfile?: boolean | null, soundcloudLink?: string | null, spotifyLink?: string | null, profileSlug?: string | null, tikTokLink?: string | null, tourWidgetiFrame?: string | null, threadsLink?: string | null, twitterLink?: string | null, websiteLink?: string | null, youtubeLink?: string | null, contactQuery: Array<ContactQueries>, displayVcf?: boolean | null, profileJson?: any | null, bandsInTownKey?: string | null, profilePageLayoutStyle?: ProfilePageLayoutStyle | null, externalLink?: string | null, fullBio?: { __typename?: 'RichText', html: string, raw: any } | null, avatarImage?: { __typename?: 'Asset', url: string } | null, imageGallery: Array<{ __typename?: 'Asset', url: string }>, portfolioGallery: Array<{ __typename?: 'Asset', url: string }>, videoBox: Array<{ __typename?: 'VideoBox', videoTitle?: string | null, youtubeVideoId?: string | null, vimeoVideoId?: string | null, youtubePlaylistId?: string | null }>, heroImage?: { __typename?: 'Asset', url: string } | null, profileLogo?: { __typename?: 'Asset', url: string } | null }>, navigations: Array<{ __typename?: 'Navigation', navigationLayoutStyle?: NavigationLayout | null, pageNavigationSelection?: PageNavigationSelection | null, navigationWrapperCssClass?: string | null, footerWrapperCssClass?: string | null, navigationLogo?: { __typename?: 'Asset', url: string } | null, items: Array<{ __typename?: 'NavigationItem', link?: string | null, label?: string | null, cssClass?: string | null, sameTab?: boolean | null, primaryItem?: boolean | null, image?: { __typename?: 'Asset', id: string, url: string } | null, items: Array<{ __typename?: 'NavigationItem', link?: string | null, label?: string | null, cssClass?: string | null, sameTab?: boolean | null, image?: { __typename?: 'Asset', id: string, url: string } | null }> }>, footerColumns: Array<{ __typename?: 'FooterColumn', footerIframe?: string | null, footerTitle?: string | null, wideColumn?: boolean | null, recentBlogByCategory?: BlogTags | null, footerColumnCssWrapper?: string | null, footerImage?: { __typename?: 'Asset', url: string } | null, footerText?: { __typename?: 'RichText', html: string, raw: any } | null, footerLink: Array<{ __typename?: 'NavigationItem', link?: string | null, label?: string | null, cssClass?: string | null, sameTab?: boolean | null, image?: { __typename?: 'Asset', id: string, url: string } | null, items: Array<{ __typename?: 'NavigationItem', link?: string | null, label?: string | null, cssClass?: string | null, sameTab?: boolean | null, image?: { __typename?: 'Asset', id: string, url: string } | null }> }> }>, footerItems: Array<{ __typename?: 'NavigationItem', link?: string | null, label?: string | null, cssClass?: string | null, sameTab?: boolean | null, image?: { __typename?: 'Asset', id: string, url: string } | null, items: Array<{ __typename?: 'NavigationItem', link?: string | null, label?: string | null, cssClass?: string | null, sameTab?: boolean | null, image?: { __typename?: 'Asset', id: string, url: string } | null }> }> }> };

export type ProductsQueryVariables = Exact<{ [key: string]: never; }>;


export type ProductsQuery = { __typename?: 'Query', products: Array<{ __typename?: 'Product', name: string, id: string, productSlug: string, vendor?: string | null, price?: string | null, sku?: string | null, purchaseLink?: string | null, purchaseLabel?: string | null, enableProduct?: boolean | null, productType: ProductType, iFrame?: string | null, productJson?: any | null, gallery: Array<{ __typename?: 'Asset', url: string }>, description?: { __typename?: 'RichText', html: string } | null, videoBox: Array<{ __typename?: 'VideoBox', videoTitle?: string | null, youtubeVideoId?: string | null, vimeoVideoId?: string | null, youtubePlaylistId?: string | null }> }> };

export type ProductQueryVariables = Exact<{
  productSlug: Scalars['String'];
}>;


export type ProductQuery = { __typename?: 'Query', product?: { __typename?: 'Product', name: string, id: string, productSlug: string, vendor?: string | null, price?: string | null, sku?: string | null, purchaseLink?: string | null, purchaseLabel?: string | null, enableProduct?: boolean | null, productType: ProductType, iFrame?: string | null, productJson?: any | null, gallery: Array<{ __typename?: 'Asset', url: string }>, description?: { __typename?: 'RichText', html: string } | null, videoBox: Array<{ __typename?: 'VideoBox', videoTitle?: string | null, youtubeVideoId?: string | null, vimeoVideoId?: string | null, youtubePlaylistId?: string | null }> } | null };

export type ProductPageQueryVariables = Exact<{
  productSlug: Scalars['String'];
}>;


export type ProductPageQuery = { __typename?: 'Query', product?: { __typename?: 'Product', name: string, id: string, productSlug: string, vendor?: string | null, price?: string | null, sku?: string | null, purchaseLink?: string | null, purchaseLabel?: string | null, enableProduct?: boolean | null, productType: ProductType, iFrame?: string | null, productJson?: any | null, gallery: Array<{ __typename?: 'Asset', url: string }>, description?: { __typename?: 'RichText', html: string } | null, videoBox: Array<{ __typename?: 'VideoBox', videoTitle?: string | null, youtubeVideoId?: string | null, vimeoVideoId?: string | null, youtubePlaylistId?: string | null }> } | null, products: Array<{ __typename?: 'Product', name: string, id: string, productSlug: string, vendor?: string | null, price?: string | null, sku?: string | null, purchaseLink?: string | null, purchaseLabel?: string | null, enableProduct?: boolean | null, productType: ProductType, iFrame?: string | null, productJson?: any | null, gallery: Array<{ __typename?: 'Asset', url: string }>, description?: { __typename?: 'RichText', html: string } | null, videoBox: Array<{ __typename?: 'VideoBox', videoTitle?: string | null, youtubeVideoId?: string | null, vimeoVideoId?: string | null, youtubePlaylistId?: string | null }> }>, blogs: Array<{ __typename?: 'Blog', id: string, blogSlug?: string | null, blogCategory?: BlogTags | null, title?: string | null, authorQuery: Array<ContactQueries>, excerpt?: string | null, blogCallToActionText?: string | null, blogJson?: any | null, date?: any | null, blogCallToActionLink?: string | null, blogHtml?: string | null, audioBlog?: { __typename?: 'Asset', url: string } | null, image?: { __typename?: 'Asset', id: string, url: string } | null, content?: { __typename?: 'RichText', raw: any, html: string, markdown: string, text: string } | null, blogGallery: Array<{ __typename?: 'Asset', url: string }>, videoBox: Array<{ __typename?: 'VideoBox', videoTitle?: string | null, youtubeVideoId?: string | null, vimeoVideoId?: string | null, youtubePlaylistId?: string | null }> }>, siteLibrary?: { __typename?: 'SiteLibrary', id: string, title?: string | null, isSpanish?: boolean | null, facebookPixelId?: string | null, facebookLink?: string | null, tikTokLink?: string | null, instagramLink?: string | null, spotifyLink?: string | null, threadsLink?: string | null, twitterLink?: string | null, youtubeLink?: string | null, pandoraLink?: string | null, appleMusicLink?: string | null, soundcloudLink?: string | null, pinterestLink?: string | null, githubLink?: string | null, linkedinLink?: string | null, siteCssBodyClass?: string | null, mailchimp?: string | null, contactEmail?: string | null, contactPhone?: string | null, contactName?: string | null, analyticsId?: string | null, mapKey?: string | null, siteLibraryJson?: any | null, secondaryName?: string | null, secondaryLink?: string | null, paypalClientId?: string | null, metaGoogleConsoleVerification?: string | null, metaDescription?: string | null, metaDomain?: string | null, youtubeApiKey: string, logo?: { __typename?: 'Asset', id: string, url: string } | null, secondaryLogo?: { __typename?: 'Asset', id: string, url: string } | null, themeColor: { __typename?: 'RootColor', background: { __typename?: 'Color', hex: any, css: string, rgba: { __typename?: 'RGBA', r: any, g: any, b: any, a: any } }, backgroundSecondary: { __typename?: 'Color', hex: any, css: string, rgba: { __typename?: 'RGBA', r: any, g: any, b: any, a: any } }, primary: { __typename?: 'Color', hex: any, css: string, rgba: { __typename?: 'RGBA', r: any, g: any, b: any, a: any } }, secondary: { __typename?: 'Color', hex: any, css: string, rgba: { __typename?: 'RGBA', r: any, g: any, b: any, a: any } }, tertiary: { __typename?: 'Color', hex: any, css: string, rgba: { __typename?: 'RGBA', r: any, g: any, b: any, a: any } }, primaryFadeOpacity: { __typename?: 'Color', hex: any, css: string, rgba: { __typename?: 'RGBA', r: any, g: any, b: any, a: any } }, text: { __typename?: 'Color', hex: any, css: string, rgba: { __typename?: 'RGBA', r: any, g: any, b: any, a: any } }, textOverlay: { __typename?: 'Color', hex: any, css: string, rgba: { __typename?: 'RGBA', r: any, g: any, b: any, a: any } } }, favicon?: { __typename?: 'Asset', url: string } | null, metaOgImage?: { __typename?: 'Asset', url: string } | null, metaAppleTouchIcon?: { __typename?: 'Asset', url: string } | null } | null, contacts: Array<{ __typename?: 'Contact', contactName: string, contactQuery: ContactQueries, contactEmail?: string | null, contactTitle?: string | null, contactPhone?: string | null, contactAddress?: string | null, contactGoogleAddressLink?: string | null, contactWhatsapp?: string | null, contactCalendly?: string | null, contactLinkedin?: string | null, contactAvatar?: { __typename?: 'Asset', id: string, url: string } | null }>, profiles: Array<{ __typename?: 'Profile', createdAt: any, updatedAt: any, appleMusicLink?: string | null, calendlyLink?: string | null, email?: string | null, epkLink?: string | null, facebookLink?: string | null, iFrame?: string | null, instagramLink?: string | null, role?: string | null, linkedinLink?: string | null, profileType: ProfilesSelect, miniBio?: string | null, name?: string | null, order?: number | null, pandoraLink?: string | null, phoneNumber?: string | null, primaryProfile?: boolean | null, soundcloudLink?: string | null, spotifyLink?: string | null, profileSlug?: string | null, tikTokLink?: string | null, tourWidgetiFrame?: string | null, threadsLink?: string | null, twitterLink?: string | null, websiteLink?: string | null, youtubeLink?: string | null, contactQuery: Array<ContactQueries>, displayVcf?: boolean | null, profileJson?: any | null, bandsInTownKey?: string | null, profilePageLayoutStyle?: ProfilePageLayoutStyle | null, externalLink?: string | null, fullBio?: { __typename?: 'RichText', html: string, raw: any } | null, avatarImage?: { __typename?: 'Asset', url: string } | null, imageGallery: Array<{ __typename?: 'Asset', url: string }>, portfolioGallery: Array<{ __typename?: 'Asset', url: string }>, videoBox: Array<{ __typename?: 'VideoBox', videoTitle?: string | null, youtubeVideoId?: string | null, vimeoVideoId?: string | null, youtubePlaylistId?: string | null }>, heroImage?: { __typename?: 'Asset', url: string } | null, profileLogo?: { __typename?: 'Asset', url: string } | null }>, navigations: Array<{ __typename?: 'Navigation', navigationLayoutStyle?: NavigationLayout | null, pageNavigationSelection?: PageNavigationSelection | null, navigationWrapperCssClass?: string | null, footerWrapperCssClass?: string | null, navigationLogo?: { __typename?: 'Asset', url: string } | null, items: Array<{ __typename?: 'NavigationItem', link?: string | null, label?: string | null, cssClass?: string | null, sameTab?: boolean | null, primaryItem?: boolean | null, image?: { __typename?: 'Asset', id: string, url: string } | null, items: Array<{ __typename?: 'NavigationItem', link?: string | null, label?: string | null, cssClass?: string | null, sameTab?: boolean | null, image?: { __typename?: 'Asset', id: string, url: string } | null }> }>, footerColumns: Array<{ __typename?: 'FooterColumn', footerIframe?: string | null, footerTitle?: string | null, wideColumn?: boolean | null, recentBlogByCategory?: BlogTags | null, footerColumnCssWrapper?: string | null, footerImage?: { __typename?: 'Asset', url: string } | null, footerText?: { __typename?: 'RichText', html: string, raw: any } | null, footerLink: Array<{ __typename?: 'NavigationItem', link?: string | null, label?: string | null, cssClass?: string | null, sameTab?: boolean | null, image?: { __typename?: 'Asset', id: string, url: string } | null, items: Array<{ __typename?: 'NavigationItem', link?: string | null, label?: string | null, cssClass?: string | null, sameTab?: boolean | null, image?: { __typename?: 'Asset', id: string, url: string } | null }> }> }>, footerItems: Array<{ __typename?: 'NavigationItem', link?: string | null, label?: string | null, cssClass?: string | null, sameTab?: boolean | null, image?: { __typename?: 'Asset', id: string, url: string } | null, items: Array<{ __typename?: 'NavigationItem', link?: string | null, label?: string | null, cssClass?: string | null, sameTab?: boolean | null, image?: { __typename?: 'Asset', id: string, url: string } | null }> }> }> };

export type BlogPageQueryVariables = Exact<{
  blogSlug: Scalars['String'];
}>;


export type BlogPageQuery = { __typename?: 'Query', blog?: { __typename?: 'Blog', id: string, blogSlug?: string | null, blogCategory?: BlogTags | null, title?: string | null, authorQuery: Array<ContactQueries>, excerpt?: string | null, blogCallToActionText?: string | null, blogJson?: any | null, date?: any | null, blogCallToActionLink?: string | null, blogHtml?: string | null, audioBlog?: { __typename?: 'Asset', url: string } | null, image?: { __typename?: 'Asset', id: string, url: string } | null, content?: { __typename?: 'RichText', raw: any, html: string, markdown: string, text: string } | null, blogGallery: Array<{ __typename?: 'Asset', url: string }>, videoBox: Array<{ __typename?: 'VideoBox', videoTitle?: string | null, youtubeVideoId?: string | null, vimeoVideoId?: string | null, youtubePlaylistId?: string | null }> } | null, blogs: Array<{ __typename?: 'Blog', id: string, blogSlug?: string | null, blogCategory?: BlogTags | null, title?: string | null, authorQuery: Array<ContactQueries>, excerpt?: string | null, blogCallToActionText?: string | null, blogJson?: any | null, date?: any | null, blogCallToActionLink?: string | null, blogHtml?: string | null, audioBlog?: { __typename?: 'Asset', url: string } | null, image?: { __typename?: 'Asset', id: string, url: string } | null, content?: { __typename?: 'RichText', raw: any, html: string, markdown: string, text: string } | null, blogGallery: Array<{ __typename?: 'Asset', url: string }>, videoBox: Array<{ __typename?: 'VideoBox', videoTitle?: string | null, youtubeVideoId?: string | null, vimeoVideoId?: string | null, youtubePlaylistId?: string | null }> }>, contacts: Array<{ __typename?: 'Contact', contactName: string, contactQuery: ContactQueries, contactEmail?: string | null, contactTitle?: string | null, contactPhone?: string | null, contactAddress?: string | null, contactGoogleAddressLink?: string | null, contactWhatsapp?: string | null, contactCalendly?: string | null, contactLinkedin?: string | null, contactAvatar?: { __typename?: 'Asset', id: string, url: string } | null }>, siteLibrary?: { __typename?: 'SiteLibrary', id: string, title?: string | null, isSpanish?: boolean | null, facebookPixelId?: string | null, facebookLink?: string | null, tikTokLink?: string | null, instagramLink?: string | null, spotifyLink?: string | null, threadsLink?: string | null, twitterLink?: string | null, youtubeLink?: string | null, pandoraLink?: string | null, appleMusicLink?: string | null, soundcloudLink?: string | null, pinterestLink?: string | null, githubLink?: string | null, linkedinLink?: string | null, siteCssBodyClass?: string | null, mailchimp?: string | null, contactEmail?: string | null, contactPhone?: string | null, contactName?: string | null, analyticsId?: string | null, mapKey?: string | null, siteLibraryJson?: any | null, secondaryName?: string | null, secondaryLink?: string | null, paypalClientId?: string | null, metaGoogleConsoleVerification?: string | null, metaDescription?: string | null, metaDomain?: string | null, youtubeApiKey: string, logo?: { __typename?: 'Asset', id: string, url: string } | null, secondaryLogo?: { __typename?: 'Asset', id: string, url: string } | null, themeColor: { __typename?: 'RootColor', background: { __typename?: 'Color', hex: any, css: string, rgba: { __typename?: 'RGBA', r: any, g: any, b: any, a: any } }, backgroundSecondary: { __typename?: 'Color', hex: any, css: string, rgba: { __typename?: 'RGBA', r: any, g: any, b: any, a: any } }, primary: { __typename?: 'Color', hex: any, css: string, rgba: { __typename?: 'RGBA', r: any, g: any, b: any, a: any } }, secondary: { __typename?: 'Color', hex: any, css: string, rgba: { __typename?: 'RGBA', r: any, g: any, b: any, a: any } }, tertiary: { __typename?: 'Color', hex: any, css: string, rgba: { __typename?: 'RGBA', r: any, g: any, b: any, a: any } }, primaryFadeOpacity: { __typename?: 'Color', hex: any, css: string, rgba: { __typename?: 'RGBA', r: any, g: any, b: any, a: any } }, text: { __typename?: 'Color', hex: any, css: string, rgba: { __typename?: 'RGBA', r: any, g: any, b: any, a: any } }, textOverlay: { __typename?: 'Color', hex: any, css: string, rgba: { __typename?: 'RGBA', r: any, g: any, b: any, a: any } } }, favicon?: { __typename?: 'Asset', url: string } | null, metaOgImage?: { __typename?: 'Asset', url: string } | null, metaAppleTouchIcon?: { __typename?: 'Asset', url: string } | null } | null, navigations: Array<{ __typename?: 'Navigation', navigationLayoutStyle?: NavigationLayout | null, pageNavigationSelection?: PageNavigationSelection | null, navigationWrapperCssClass?: string | null, footerWrapperCssClass?: string | null, navigationLogo?: { __typename?: 'Asset', url: string } | null, items: Array<{ __typename?: 'NavigationItem', link?: string | null, label?: string | null, cssClass?: string | null, sameTab?: boolean | null, primaryItem?: boolean | null, image?: { __typename?: 'Asset', id: string, url: string } | null, items: Array<{ __typename?: 'NavigationItem', link?: string | null, label?: string | null, cssClass?: string | null, sameTab?: boolean | null, image?: { __typename?: 'Asset', id: string, url: string } | null }> }>, footerColumns: Array<{ __typename?: 'FooterColumn', footerIframe?: string | null, footerTitle?: string | null, wideColumn?: boolean | null, recentBlogByCategory?: BlogTags | null, footerColumnCssWrapper?: string | null, footerImage?: { __typename?: 'Asset', url: string } | null, footerText?: { __typename?: 'RichText', html: string, raw: any } | null, footerLink: Array<{ __typename?: 'NavigationItem', link?: string | null, label?: string | null, cssClass?: string | null, sameTab?: boolean | null, image?: { __typename?: 'Asset', id: string, url: string } | null, items: Array<{ __typename?: 'NavigationItem', link?: string | null, label?: string | null, cssClass?: string | null, sameTab?: boolean | null, image?: { __typename?: 'Asset', id: string, url: string } | null }> }> }>, footerItems: Array<{ __typename?: 'NavigationItem', link?: string | null, label?: string | null, cssClass?: string | null, sameTab?: boolean | null, image?: { __typename?: 'Asset', id: string, url: string } | null, items: Array<{ __typename?: 'NavigationItem', link?: string | null, label?: string | null, cssClass?: string | null, sameTab?: boolean | null, image?: { __typename?: 'Asset', id: string, url: string } | null }> }> }> };

export type AlbumPageQueryVariables = Exact<{
  albumSlug: Scalars['String'];
  albumFirst?: InputMaybe<Scalars['Int']>;
  albumOrderBy?: InputMaybe<AlbumOrderByInput>;
}>;


export type AlbumPageQuery = { __typename?: 'Query', album?: { __typename?: 'Album', id: string, albumSlug?: string | null, title?: string | null, releaseDate?: any | null, albumBuyLink?: string | null, featureHomePage?: boolean | null, albumJsonData?: any | null, iFramePlayer?: string | null, albumCover?: { __typename?: 'Asset', id: string, url: string } | null, description?: { __typename?: 'RichText', raw: any, html: string, markdown: string, text: string } | null, videoBox: Array<{ __typename?: 'VideoBox', videoTitle?: string | null, youtubeVideoId?: string | null, vimeoVideoId?: string | null, youtubePlaylistId?: string | null }> } | null, albums: Array<{ __typename?: 'Album', id: string, albumSlug?: string | null, title?: string | null, releaseDate?: any | null, albumBuyLink?: string | null, featureHomePage?: boolean | null, albumJsonData?: any | null, iFramePlayer?: string | null, albumCover?: { __typename?: 'Asset', id: string, url: string } | null, description?: { __typename?: 'RichText', raw: any, html: string, markdown: string, text: string } | null, videoBox: Array<{ __typename?: 'VideoBox', videoTitle?: string | null, youtubeVideoId?: string | null, vimeoVideoId?: string | null, youtubePlaylistId?: string | null }> }>, blogs: Array<{ __typename?: 'Blog', id: string, blogSlug?: string | null, blogCategory?: BlogTags | null, title?: string | null, authorQuery: Array<ContactQueries>, excerpt?: string | null, blogCallToActionText?: string | null, blogJson?: any | null, date?: any | null, blogCallToActionLink?: string | null, blogHtml?: string | null, audioBlog?: { __typename?: 'Asset', url: string } | null, image?: { __typename?: 'Asset', id: string, url: string } | null, content?: { __typename?: 'RichText', raw: any, html: string, markdown: string, text: string } | null, blogGallery: Array<{ __typename?: 'Asset', url: string }>, videoBox: Array<{ __typename?: 'VideoBox', videoTitle?: string | null, youtubeVideoId?: string | null, vimeoVideoId?: string | null, youtubePlaylistId?: string | null }> }>, siteLibrary?: { __typename?: 'SiteLibrary', id: string, title?: string | null, isSpanish?: boolean | null, facebookPixelId?: string | null, facebookLink?: string | null, tikTokLink?: string | null, instagramLink?: string | null, spotifyLink?: string | null, threadsLink?: string | null, twitterLink?: string | null, youtubeLink?: string | null, pandoraLink?: string | null, appleMusicLink?: string | null, soundcloudLink?: string | null, pinterestLink?: string | null, githubLink?: string | null, linkedinLink?: string | null, siteCssBodyClass?: string | null, mailchimp?: string | null, contactEmail?: string | null, contactPhone?: string | null, contactName?: string | null, analyticsId?: string | null, mapKey?: string | null, siteLibraryJson?: any | null, secondaryName?: string | null, secondaryLink?: string | null, paypalClientId?: string | null, metaGoogleConsoleVerification?: string | null, metaDescription?: string | null, metaDomain?: string | null, youtubeApiKey: string, logo?: { __typename?: 'Asset', id: string, url: string } | null, secondaryLogo?: { __typename?: 'Asset', id: string, url: string } | null, themeColor: { __typename?: 'RootColor', background: { __typename?: 'Color', hex: any, css: string, rgba: { __typename?: 'RGBA', r: any, g: any, b: any, a: any } }, backgroundSecondary: { __typename?: 'Color', hex: any, css: string, rgba: { __typename?: 'RGBA', r: any, g: any, b: any, a: any } }, primary: { __typename?: 'Color', hex: any, css: string, rgba: { __typename?: 'RGBA', r: any, g: any, b: any, a: any } }, secondary: { __typename?: 'Color', hex: any, css: string, rgba: { __typename?: 'RGBA', r: any, g: any, b: any, a: any } }, tertiary: { __typename?: 'Color', hex: any, css: string, rgba: { __typename?: 'RGBA', r: any, g: any, b: any, a: any } }, primaryFadeOpacity: { __typename?: 'Color', hex: any, css: string, rgba: { __typename?: 'RGBA', r: any, g: any, b: any, a: any } }, text: { __typename?: 'Color', hex: any, css: string, rgba: { __typename?: 'RGBA', r: any, g: any, b: any, a: any } }, textOverlay: { __typename?: 'Color', hex: any, css: string, rgba: { __typename?: 'RGBA', r: any, g: any, b: any, a: any } } }, favicon?: { __typename?: 'Asset', url: string } | null, metaOgImage?: { __typename?: 'Asset', url: string } | null, metaAppleTouchIcon?: { __typename?: 'Asset', url: string } | null } | null, navigations: Array<{ __typename?: 'Navigation', navigationLayoutStyle?: NavigationLayout | null, pageNavigationSelection?: PageNavigationSelection | null, navigationWrapperCssClass?: string | null, footerWrapperCssClass?: string | null, navigationLogo?: { __typename?: 'Asset', url: string } | null, items: Array<{ __typename?: 'NavigationItem', link?: string | null, label?: string | null, cssClass?: string | null, sameTab?: boolean | null, primaryItem?: boolean | null, image?: { __typename?: 'Asset', id: string, url: string } | null, items: Array<{ __typename?: 'NavigationItem', link?: string | null, label?: string | null, cssClass?: string | null, sameTab?: boolean | null, image?: { __typename?: 'Asset', id: string, url: string } | null }> }>, footerColumns: Array<{ __typename?: 'FooterColumn', footerIframe?: string | null, footerTitle?: string | null, wideColumn?: boolean | null, recentBlogByCategory?: BlogTags | null, footerColumnCssWrapper?: string | null, footerImage?: { __typename?: 'Asset', url: string } | null, footerText?: { __typename?: 'RichText', html: string, raw: any } | null, footerLink: Array<{ __typename?: 'NavigationItem', link?: string | null, label?: string | null, cssClass?: string | null, sameTab?: boolean | null, image?: { __typename?: 'Asset', id: string, url: string } | null, items: Array<{ __typename?: 'NavigationItem', link?: string | null, label?: string | null, cssClass?: string | null, sameTab?: boolean | null, image?: { __typename?: 'Asset', id: string, url: string } | null }> }> }>, footerItems: Array<{ __typename?: 'NavigationItem', link?: string | null, label?: string | null, cssClass?: string | null, sameTab?: boolean | null, image?: { __typename?: 'Asset', id: string, url: string } | null, items: Array<{ __typename?: 'NavigationItem', link?: string | null, label?: string | null, cssClass?: string | null, sameTab?: boolean | null, image?: { __typename?: 'Asset', id: string, url: string } | null }> }> }> };

export type EventPageQueryVariables = Exact<{
  eventSlug: Scalars['String'];
  eventFirst?: InputMaybe<Scalars['Int']>;
  eventOrderBy?: InputMaybe<EventOrderByInput>;
}>;


export type EventPageQuery = { __typename?: 'Query', event?: { __typename?: 'Event', eventAddress?: string | null, eventAddressGoogleMapLink?: string | null, eventCityState?: string | null, eventEndDateTime?: any | null, eventIFrame?: string | null, eventFeatured?: boolean | null, eventLinkButtonText?: string | null, eventShortDescription?: string | null, eventSlug?: string | null, eventStartDateTime?: any | null, eventTicketLinkDestination?: string | null, eventTitle?: string | null, eventVenueName?: string | null, eventShowType?: EventShowType | null, videoBox: Array<{ __typename?: 'VideoBox', videoTitle?: string | null, youtubeVideoId?: string | null, vimeoVideoId?: string | null, youtubePlaylistId?: string | null }>, eventDescription?: { __typename?: 'RichText', html: string, raw: any } | null, eventFlyer?: { __typename?: 'Asset', id: string, url: string } | null, eventGallery: Array<{ __typename?: 'Asset', url: string, id: string }> } | null, events: Array<{ __typename?: 'Event', eventAddress?: string | null, eventAddressGoogleMapLink?: string | null, eventCityState?: string | null, eventEndDateTime?: any | null, eventIFrame?: string | null, eventFeatured?: boolean | null, eventLinkButtonText?: string | null, eventShortDescription?: string | null, eventSlug?: string | null, eventStartDateTime?: any | null, eventTicketLinkDestination?: string | null, eventTitle?: string | null, eventVenueName?: string | null, eventShowType?: EventShowType | null, videoBox: Array<{ __typename?: 'VideoBox', videoTitle?: string | null, youtubeVideoId?: string | null, vimeoVideoId?: string | null, youtubePlaylistId?: string | null }>, eventDescription?: { __typename?: 'RichText', html: string, raw: any } | null, eventFlyer?: { __typename?: 'Asset', id: string, url: string } | null, eventGallery: Array<{ __typename?: 'Asset', url: string, id: string }> }>, blogs: Array<{ __typename?: 'Blog', id: string, blogSlug?: string | null, blogCategory?: BlogTags | null, title?: string | null, authorQuery: Array<ContactQueries>, excerpt?: string | null, blogCallToActionText?: string | null, blogJson?: any | null, date?: any | null, blogCallToActionLink?: string | null, blogHtml?: string | null, audioBlog?: { __typename?: 'Asset', url: string } | null, image?: { __typename?: 'Asset', id: string, url: string } | null, content?: { __typename?: 'RichText', raw: any, html: string, markdown: string, text: string } | null, blogGallery: Array<{ __typename?: 'Asset', url: string }>, videoBox: Array<{ __typename?: 'VideoBox', videoTitle?: string | null, youtubeVideoId?: string | null, vimeoVideoId?: string | null, youtubePlaylistId?: string | null }> }>, siteLibrary?: { __typename?: 'SiteLibrary', id: string, title?: string | null, isSpanish?: boolean | null, facebookPixelId?: string | null, facebookLink?: string | null, tikTokLink?: string | null, instagramLink?: string | null, spotifyLink?: string | null, threadsLink?: string | null, twitterLink?: string | null, youtubeLink?: string | null, pandoraLink?: string | null, appleMusicLink?: string | null, soundcloudLink?: string | null, pinterestLink?: string | null, githubLink?: string | null, linkedinLink?: string | null, siteCssBodyClass?: string | null, mailchimp?: string | null, contactEmail?: string | null, contactPhone?: string | null, contactName?: string | null, analyticsId?: string | null, mapKey?: string | null, siteLibraryJson?: any | null, secondaryName?: string | null, secondaryLink?: string | null, paypalClientId?: string | null, metaGoogleConsoleVerification?: string | null, metaDescription?: string | null, metaDomain?: string | null, youtubeApiKey: string, logo?: { __typename?: 'Asset', id: string, url: string } | null, secondaryLogo?: { __typename?: 'Asset', id: string, url: string } | null, themeColor: { __typename?: 'RootColor', background: { __typename?: 'Color', hex: any, css: string, rgba: { __typename?: 'RGBA', r: any, g: any, b: any, a: any } }, backgroundSecondary: { __typename?: 'Color', hex: any, css: string, rgba: { __typename?: 'RGBA', r: any, g: any, b: any, a: any } }, primary: { __typename?: 'Color', hex: any, css: string, rgba: { __typename?: 'RGBA', r: any, g: any, b: any, a: any } }, secondary: { __typename?: 'Color', hex: any, css: string, rgba: { __typename?: 'RGBA', r: any, g: any, b: any, a: any } }, tertiary: { __typename?: 'Color', hex: any, css: string, rgba: { __typename?: 'RGBA', r: any, g: any, b: any, a: any } }, primaryFadeOpacity: { __typename?: 'Color', hex: any, css: string, rgba: { __typename?: 'RGBA', r: any, g: any, b: any, a: any } }, text: { __typename?: 'Color', hex: any, css: string, rgba: { __typename?: 'RGBA', r: any, g: any, b: any, a: any } }, textOverlay: { __typename?: 'Color', hex: any, css: string, rgba: { __typename?: 'RGBA', r: any, g: any, b: any, a: any } } }, favicon?: { __typename?: 'Asset', url: string } | null, metaOgImage?: { __typename?: 'Asset', url: string } | null, metaAppleTouchIcon?: { __typename?: 'Asset', url: string } | null } | null, navigations: Array<{ __typename?: 'Navigation', navigationLayoutStyle?: NavigationLayout | null, pageNavigationSelection?: PageNavigationSelection | null, navigationWrapperCssClass?: string | null, footerWrapperCssClass?: string | null, navigationLogo?: { __typename?: 'Asset', url: string } | null, items: Array<{ __typename?: 'NavigationItem', link?: string | null, label?: string | null, cssClass?: string | null, sameTab?: boolean | null, primaryItem?: boolean | null, image?: { __typename?: 'Asset', id: string, url: string } | null, items: Array<{ __typename?: 'NavigationItem', link?: string | null, label?: string | null, cssClass?: string | null, sameTab?: boolean | null, image?: { __typename?: 'Asset', id: string, url: string } | null }> }>, footerColumns: Array<{ __typename?: 'FooterColumn', footerIframe?: string | null, footerTitle?: string | null, wideColumn?: boolean | null, recentBlogByCategory?: BlogTags | null, footerColumnCssWrapper?: string | null, footerImage?: { __typename?: 'Asset', url: string } | null, footerText?: { __typename?: 'RichText', html: string, raw: any } | null, footerLink: Array<{ __typename?: 'NavigationItem', link?: string | null, label?: string | null, cssClass?: string | null, sameTab?: boolean | null, image?: { __typename?: 'Asset', id: string, url: string } | null, items: Array<{ __typename?: 'NavigationItem', link?: string | null, label?: string | null, cssClass?: string | null, sameTab?: boolean | null, image?: { __typename?: 'Asset', id: string, url: string } | null }> }> }>, footerItems: Array<{ __typename?: 'NavigationItem', link?: string | null, label?: string | null, cssClass?: string | null, sameTab?: boolean | null, image?: { __typename?: 'Asset', id: string, url: string } | null, items: Array<{ __typename?: 'NavigationItem', link?: string | null, label?: string | null, cssClass?: string | null, sameTab?: boolean | null, image?: { __typename?: 'Asset', id: string, url: string } | null }> }> }> };

export const AlbumFieldsFragmentDoc = gql`
    fragment albumFields on Album {
  id
  albumSlug
  title
  releaseDate
  albumBuyLink
  featureHomePage
  albumCover {
    id
    url
  }
  description {
    raw
    html
    markdown
    text
  }
  albumJsonData
  iFramePlayer
  videoBox {
    videoTitle
    youtubeVideoId
    vimeoVideoId
    youtubePlaylistId
  }
}
    `;
export const BlogFieldsFragmentDoc = gql`
    fragment blogFields on Blog {
  id
  blogSlug
  blogCategory
  title
  authorQuery
  excerpt
  audioBlog {
    url
  }
  image {
    id
    url
  }
  content {
    raw
    html
    markdown
    text
  }
  blogCallToActionText
  blogCategory
  blogJson
  date
  blogCallToActionLink
  blogGallery {
    url
  }
  videoBox {
    videoTitle
    youtubeVideoId
    vimeoVideoId
    youtubePlaylistId
  }
  blogHtml
}
    `;
export const SiteLibraryFieldsFragmentDoc = gql`
    fragment siteLibraryFields on SiteLibrary {
  id
  title
  isSpanish
  facebookPixelId
  facebookLink
  tikTokLink
  instagramLink
  spotifyLink
  threadsLink
  twitterLink
  youtubeLink
  pandoraLink
  appleMusicLink
  soundcloudLink
  pinterestLink
  githubLink
  linkedinLink
  siteCssBodyClass
  mailchimp
  logo {
    id
    url
  }
  contactEmail
  contactPhone
  contactName
  analyticsId
  mapKey
  siteLibraryJson
  secondaryName
  secondaryLink
  secondaryLogo {
    id
    url
  }
  paypalClientId
  themeColor {
    background {
      hex
      rgba {
        r
        g
        b
        a
      }
      css
    }
    backgroundSecondary {
      hex
      rgba {
        r
        g
        b
        a
      }
      css
    }
    primary {
      hex
      rgba {
        r
        g
        b
        a
      }
      css
    }
    secondary {
      hex
      rgba {
        r
        g
        b
        a
      }
      css
    }
    tertiary {
      hex
      rgba {
        r
        g
        b
        a
      }
      css
    }
    primaryFadeOpacity {
      hex
      rgba {
        r
        g
        b
        a
      }
      css
    }
    text {
      hex
      rgba {
        r
        g
        b
        a
      }
      css
    }
    textOverlay {
      hex
      rgba {
        r
        g
        b
        a
      }
      css
    }
  }
  metaGoogleConsoleVerification
  metaDescription
  favicon {
    url
  }
  metaOgImage {
    url
  }
  metaAppleTouchIcon {
    url
  }
  metaDomain
  youtubeApiKey
}
    `;
export const EventFieldsFragmentDoc = gql`
    fragment eventFields on Event {
  eventAddress
  eventAddressGoogleMapLink
  eventCityState
  eventEndDateTime
  eventIFrame
  videoBox {
    videoTitle
    youtubeVideoId
    vimeoVideoId
    youtubePlaylistId
  }
  eventDescription {
    html
    raw
  }
  eventFeatured
  eventFlyer {
    id
    url
  }
  eventLinkButtonText
  eventShortDescription
  eventSlug
  eventStartDateTime
  eventTicketLinkDestination
  eventTitle
  eventVenueName
  eventShowType
  eventGallery {
    url
    id
  }
}
    `;
export const TestimonialFieldsFragmentDoc = gql`
    fragment testimonialFields on Testimonial {
  id
  updatedAt
  testimonialName
  testimonialAvatar {
    url
  }
  testimonialJobTitle
  testimonialText {
    html
    raw
  }
  testimonialType
  starCount
  testimonialLogo {
    url
  }
  testimonialLink
  testimonialLinkLabel
  testimonialSourceLink
}
    `;
export const LogoTableFieldsFragmentDoc = gql`
    fragment logoTableFields on LogoTable {
  logoName
  logoLink
  logoImage {
    url
  }
  logoType
}
    `;
export const PagesSlugListFieldsFragmentDoc = gql`
    fragment pagesSlugListFields on Page {
  pageSlug
  updatedAt
  noIndex
}
    `;
export const BlogsSlugListFieldsFragmentDoc = gql`
    fragment blogsSlugListFields on Blog {
  blogSlug
  updatedAt
}
    `;
export const AlbumsSlugListFieldsFragmentDoc = gql`
    fragment albumsSlugListFields on Album {
  albumSlug
  updatedAt
}
    `;
export const EventsSlugListFieldsFragmentDoc = gql`
    fragment eventsSlugListFields on Event {
  eventSlug
  updatedAt
}
    `;
export const ProfilesSlugListFieldsFragmentDoc = gql`
    fragment profilesSlugListFields on Profile {
  profileSlug
  profileType
  updatedAt
}
    `;
export const ProductsSlugListFieldsFragmentDoc = gql`
    fragment productsSlugListFields on Product {
  productSlug
  productType
  updatedAt
}
    `;
export const TextContentFieldsFragmentDoc = gql`
    fragment TextContentFields on TextContent {
  header {
    raw
    html
  }
  subHeader {
    raw
    html
  }
  content {
    raw
    html
  }
  link
  contentImage {
    url
  }
  imageStyle
  textContentWidth
  contentAlign
  linkImage
  cssClass
  htmlText
}
    `;
export const CallToActionFieldsFragmentDoc = gql`
    fragment CallToActionFields on CallToAction {
  ctaLabel
  ctaLink
  ctaClass
  ctaPrimary
  contentAlign
}
    `;
export const HeroMediaSliderFieldsFragmentDoc = gql`
    fragment HeroMediaSliderFields on HeroMediaSlider {
  sliderMediaBackground {
    url
  }
  sliderCssWrapper
  mediaType
  textContent {
    header {
      raw
      html
    }
    subHeader {
      raw
      html
    }
    content {
      raw
      html
    }
    link
    contentImage {
      url
    }
    imageStyle
    textContentWidth
    contentAlign
    linkImage
    cssClass
    htmlText
  }
  callToAction(first: 50) {
    ctaLabel
    ctaLink
    ctaClass
    ctaPrimary
    contentAlign
  }
  displaySocialMedia
  youtubeVideoId
  id
}
    `;
export const ContactFormFieldsFragmentDoc = gql`
    fragment ContactFormFields on ContactForm {
  contactFormTitle
  contactFormDescription {
    raw
    html
  }
  netlifyContactForm
  netlifyFormFields
  jotformUrl
  hubspotFormId
  hubspotPortalId
  calendlyLink
  cssClass
}
    `;
export const GridBoxFieldsFragmentDoc = gql`
    fragment GridBoxFields on GridBox {
  boxTitle
  boxLink
  boxDescription {
    raw
    html
  }
  boxImage {
    url
  }
  boxDisplay
}
    `;
export const AccordionFieldsFragmentDoc = gql`
    fragment AccordionFields on Accordion {
  contentHeader {
    raw
    html
  }
  contentDescription {
    raw
    html
  }
  videoBox {
    videoTitle
    youtubeVideoId
    vimeoVideoId
    youtubePlaylistId
  }
  contentImage {
    url
  }
}
    `;
export const VideoBoxFieldsFragmentDoc = gql`
    fragment VideoBoxFields on VideoBox {
  videoTitle
  youtubeVideoId
  vimeoVideoId
  youtubePlaylistId
}
    `;
export const LoopTextFieldsFragmentDoc = gql`
    fragment LoopTextFields on LoopText {
  staticText
  loopTextItem {
    loopTextItemContent
  }
  cssClassStatic
  cssClassItem
  cssClassWrapper
}
    `;
export const LayoutBlockColumnFieldsFragmentDoc = gql`
    fragment layoutBlockColumnFields on LayoutBlockColumn {
  id
  htmlId
  cssClass
  hideBlockColumn
  backgroundImage {
    url
  }
  contentTags {
    albumDisplayType
    blogCategory
    blogSectionTitle
    contactType
    eventDisplayLayout
    eventShowType
    logoTableType
    logoTableLayout
    productType
    profileLayoutStyle
    profileSectionTitle
    profileType
    testimonialType
    parentPageType
  }
  elements {
    stripePricingTableId
    stripePublishableKey
    displayInstagramSectionUsername
    parallaxImage {
      url
    }
    galleryLayout
    gallery(first: 500) {
      url
    }
    standOutText
    iFrameTitle
    iFrameCode
    parallaxImage {
      url
    }
    image {
      url
    }
    imageCssClass
    htmlText
    htmlTextCssClass
    elementJson
    mapLatLong {
      longitude
      latitude
    }
    bandsInTownKey
  }
  sections(first: 100) {
    __typename
    ...TextContentFields
    ...CallToActionFields
    ...HeroMediaSliderFields
    ...ContactFormFields
    ...GridBoxFields
    ...AccordionFields
    ...VideoBoxFields
    ...LoopTextFields
  }
}
    ${TextContentFieldsFragmentDoc}
${CallToActionFieldsFragmentDoc}
${HeroMediaSliderFieldsFragmentDoc}
${ContactFormFieldsFragmentDoc}
${GridBoxFieldsFragmentDoc}
${AccordionFieldsFragmentDoc}
${VideoBoxFieldsFragmentDoc}
${LoopTextFieldsFragmentDoc}`;
export const PageFieldsFragmentDoc = gql`
    fragment pageFields on Page {
  id
  pageSlug
  pageNavigationSelection
  title
  subtitle
  pageWidthStyle
  contentPageJson
  hideNav
  hideFooter
  hideHeader
  setHomePage
  noIndex
  whatsAppContactNumberFloatingButton
  heroImage {
    url
  }
  layoutBlocks(first: 100) {
    id
    cssClass
    backgroundColor {
      hex
      rgba {
        r
        g
        b
        a
      }
      css
    }
    backgroundImage {
      url
    }
    layoutBlockColumns(first: 100) {
      ...layoutBlockColumnFields
    }
  }
  popup {
    duration
    header
    buttonOpenText
    buttonOpenCss
    openOnScroll
    popupContent(first: 100) {
      ...layoutBlockColumnFields
    }
  }
}
    ${LayoutBlockColumnFieldsFragmentDoc}`;
export const NavigationFieldsFragmentDoc = gql`
    fragment navigationFields on Navigation {
  navigationLayoutStyle
  pageNavigationSelection
  navigationWrapperCssClass
  footerWrapperCssClass
  navigationLogo {
    url
  }
  items {
    image {
      id
      url
    }
    link
    label
    cssClass
    sameTab
    primaryItem
    items {
      image {
        id
        url
      }
      link
      label
      cssClass
      sameTab
    }
  }
  footerColumns {
    footerImage {
      url
    }
    footerText {
      html
      raw
    }
    footerIframe
    footerTitle
    wideColumn
    recentBlogByCategory
    footerColumnCssWrapper
    footerLink {
      image {
        id
        url
      }
      link
      label
      cssClass
      sameTab
      items {
        image {
          id
          url
        }
        link
        label
        cssClass
        sameTab
      }
    }
  }
  footerItems {
    image {
      id
      url
    }
    link
    label
    cssClass
    sameTab
    items {
      image {
        id
        url
      }
      link
      label
      cssClass
      sameTab
    }
  }
}
    `;
export const ProfileFieldsFragmentDoc = gql`
    fragment profileFields on Profile {
  createdAt
  updatedAt
  appleMusicLink
  calendlyLink
  email
  epkLink
  facebookLink
  iFrame
  instagramLink
  role
  linkedinLink
  profileType
  miniBio
  name
  order
  pandoraLink
  phoneNumber
  primaryProfile
  soundcloudLink
  spotifyLink
  profileSlug
  tikTokLink
  tourWidgetiFrame
  threadsLink
  twitterLink
  websiteLink
  youtubeLink
  contactQuery
  displayVcf
  fullBio {
    html
    raw
  }
  avatarImage {
    url
  }
  imageGallery(first: 100) {
    url
  }
  portfolioGallery(first: 100) {
    url
  }
  profileJson
  videoBox {
    videoTitle
    youtubeVideoId
    vimeoVideoId
    youtubePlaylistId
  }
  heroImage {
    url
  }
  profileLogo {
    url
  }
  bandsInTownKey
  profilePageLayoutStyle
  externalLink
}
    `;
export const ContactFieldsFragmentDoc = gql`
    fragment contactFields on Contact {
  contactName
  contactQuery
  contactEmail
  contactTitle
  contactPhone
  contactAddress
  contactGoogleAddressLink
  contactWhatsapp
  contactCalendly
  contactLinkedin
  contactAvatar {
    id
    url
  }
}
    `;
export const ProductFieldsFragmentDoc = gql`
    fragment productFields on Product {
  name
  id
  productSlug
  vendor
  gallery {
    url
  }
  price
  sku
  purchaseLink
  purchaseLabel
  enableProduct
  productType
  description {
    html
  }
  iFrame
  videoBox {
    videoTitle
    youtubeVideoId
    vimeoVideoId
    youtubePlaylistId
  }
  productJson
}
    `;
export const LayoutDocument = gql`
    query layout($eventFirst: Int = 500, $blogFirst: Int = 500, $eventOrderBy: EventOrderByInput = eventStartDateTime_DESC, $blogOrderBy: BlogOrderByInput = date_DESC, $albumFirst: Int = 100, $albumOrderBy: AlbumOrderByInput = releaseDate_DESC, $contactFirst: Int = 100, $testimonialOrderBy: TestimonialOrderByInput = updatedAt_DESC, $testimonialFirst: Int = 100, $profilesFirst: Int = 100, $pageSlug: String!, $productFirst: Int = 100, $logoTableFirst: Int = 100, $logoTableOrderBy: LogoTableOrderByInput = logoName_ASC) {
  siteLibrary(where: {signature: "lnzame"}) {
    ...siteLibraryFields
  }
  events(first: $eventFirst, orderBy: $eventOrderBy) {
    ...eventFields
  }
  albums(first: $albumFirst, orderBy: $albumOrderBy) {
    ...albumFields
  }
  testimonials(first: $testimonialFirst, orderBy: $testimonialOrderBy) {
    ...testimonialFields
  }
  blogs(first: $blogFirst, orderBy: $blogOrderBy) {
    ...blogFields
  }
  profiles(first: $profilesFirst) {
    ...profileFields
  }
  page(where: {pageSlug: $pageSlug}) {
    ...pageFields
  }
  navigations {
    ...navigationFields
  }
  contacts(first: $contactFirst) {
    ...contactFields
  }
  products(first: $productFirst) {
    ...productFields
  }
  logoTables(first: $logoTableFirst, orderBy: $logoTableOrderBy) {
    ...logoTableFields
  }
}
    ${SiteLibraryFieldsFragmentDoc}
${EventFieldsFragmentDoc}
${AlbumFieldsFragmentDoc}
${TestimonialFieldsFragmentDoc}
${BlogFieldsFragmentDoc}
${ProfileFieldsFragmentDoc}
${PageFieldsFragmentDoc}
${NavigationFieldsFragmentDoc}
${ContactFieldsFragmentDoc}
${ProductFieldsFragmentDoc}
${LogoTableFieldsFragmentDoc}`;
export const PagesDocument = gql`
    query pages {
  pages(first: 500) {
    ...pageFields
  }
}
    ${PageFieldsFragmentDoc}`;
export const PagesSlugListDocument = gql`
    query pagesSlugList($pageSlugFirst: Int = 200) {
  pages(first: $pageSlugFirst) {
    ...pagesSlugListFields
  }
  blogs(first: $pageSlugFirst) {
    ...blogsSlugListFields
  }
  albums(first: $pageSlugFirst) {
    ...albumsSlugListFields
  }
  events(first: $pageSlugFirst) {
    ...eventsSlugListFields
  }
  profiles(first: $pageSlugFirst) {
    ...profilesSlugListFields
  }
  products(first: $pageSlugFirst) {
    ...productsSlugListFields
  }
}
    ${PagesSlugListFieldsFragmentDoc}
${BlogsSlugListFieldsFragmentDoc}
${AlbumsSlugListFieldsFragmentDoc}
${EventsSlugListFieldsFragmentDoc}
${ProfilesSlugListFieldsFragmentDoc}
${ProductsSlugListFieldsFragmentDoc}`;
export const BlogDocument = gql`
    query blog($blogSlug: String!) {
  blog(where: {blogSlug: $blogSlug}) {
    ...blogFields
  }
}
    ${BlogFieldsFragmentDoc}`;
export const BlogsDocument = gql`
    query blogs {
  blogs(first: 500) {
    ...blogFields
  }
}
    ${BlogFieldsFragmentDoc}`;
export const ContactsDocument = gql`
    query contacts {
  contacts(first: 500) {
    ...contactFields
  }
}
    ${ContactFieldsFragmentDoc}`;
export const SiteLibraryDocument = gql`
    query siteLibrary {
  siteLibrary(where: {signature: "lnzame"}) {
    ...siteLibraryFields
  }
}
    ${SiteLibraryFieldsFragmentDoc}`;
export const NavigationDocument = gql`
    query Navigation {
  navigations {
    ...navigationFields
  }
}
    ${NavigationFieldsFragmentDoc}`;
export const EventDocument = gql`
    query event($eventSlug: String!) {
  event(where: {eventSlug: $eventSlug}) {
    ...eventFields
  }
}
    ${EventFieldsFragmentDoc}`;
export const AlbumDocument = gql`
    query album($albumSlug: String!) {
  album(where: {albumSlug: $albumSlug}) {
    ...albumFields
  }
}
    ${AlbumFieldsFragmentDoc}`;
export const TestimonialsDocument = gql`
    query testimonials {
  testimonials(first: 100) {
    ...testimonialFields
  }
}
    ${TestimonialFieldsFragmentDoc}`;
export const ProfilesDocument = gql`
    query profiles {
  profiles(first: 100) {
    ...profileFields
  }
}
    ${ProfileFieldsFragmentDoc}`;
export const ProfileDocument = gql`
    query profile($profileSlug: String!) {
  profile(where: {profileSlug: $profileSlug}) {
    ...profileFields
  }
}
    ${ProfileFieldsFragmentDoc}`;
export const ProfilePageDocument = gql`
    query profilePage($profileSlug: String!) {
  profile(where: {profileSlug: $profileSlug}) {
    ...profileFields
  }
  blogs(first: 500) {
    ...blogFields
  }
  siteLibrary(where: {signature: "lnzame"}) {
    ...siteLibraryFields
  }
  contacts(first: 500) {
    ...contactFields
  }
  profiles(first: 100) {
    ...profileFields
  }
  navigations {
    ...navigationFields
  }
}
    ${ProfileFieldsFragmentDoc}
${BlogFieldsFragmentDoc}
${SiteLibraryFieldsFragmentDoc}
${ContactFieldsFragmentDoc}
${NavigationFieldsFragmentDoc}`;
export const ProductsDocument = gql`
    query products {
  products(first: 500) {
    ...productFields
  }
}
    ${ProductFieldsFragmentDoc}`;
export const ProductDocument = gql`
    query product($productSlug: String!) {
  product(where: {productSlug: $productSlug}) {
    ...productFields
  }
}
    ${ProductFieldsFragmentDoc}`;
export const ProductPageDocument = gql`
    query productPage($productSlug: String!) {
  product(where: {productSlug: $productSlug}) {
    ...productFields
  }
  products(first: 500) {
    ...productFields
  }
  blogs(first: 500) {
    ...blogFields
  }
  siteLibrary(where: {signature: "lnzame"}) {
    ...siteLibraryFields
  }
  contacts(first: 500) {
    ...contactFields
  }
  profiles(first: 100) {
    ...profileFields
  }
  navigations {
    ...navigationFields
  }
}
    ${ProductFieldsFragmentDoc}
${BlogFieldsFragmentDoc}
${SiteLibraryFieldsFragmentDoc}
${ContactFieldsFragmentDoc}
${ProfileFieldsFragmentDoc}
${NavigationFieldsFragmentDoc}`;
export const BlogPageDocument = gql`
    query blogPage($blogSlug: String!) {
  blog(where: {blogSlug: $blogSlug}) {
    ...blogFields
  }
  blogs(first: 500) {
    ...blogFields
  }
  contacts(first: 500) {
    ...contactFields
  }
  siteLibrary(where: {signature: "lnzame"}) {
    ...siteLibraryFields
  }
  navigations {
    ...navigationFields
  }
}
    ${BlogFieldsFragmentDoc}
${ContactFieldsFragmentDoc}
${SiteLibraryFieldsFragmentDoc}
${NavigationFieldsFragmentDoc}`;
export const AlbumPageDocument = gql`
    query albumPage($albumSlug: String!, $albumFirst: Int = 100, $albumOrderBy: AlbumOrderByInput = releaseDate_DESC) {
  album(where: {albumSlug: $albumSlug}) {
    ...albumFields
  }
  albums(first: $albumFirst, orderBy: $albumOrderBy) {
    ...albumFields
  }
  blogs(first: 500) {
    ...blogFields
  }
  siteLibrary(where: {signature: "lnzame"}) {
    ...siteLibraryFields
  }
  navigations {
    ...navigationFields
  }
}
    ${AlbumFieldsFragmentDoc}
${BlogFieldsFragmentDoc}
${SiteLibraryFieldsFragmentDoc}
${NavigationFieldsFragmentDoc}`;
export const EventPageDocument = gql`
    query eventPage($eventSlug: String!, $eventFirst: Int = 100, $eventOrderBy: EventOrderByInput = eventStartDateTime_DESC) {
  event(where: {eventSlug: $eventSlug}) {
    ...eventFields
  }
  events(first: $eventFirst, orderBy: $eventOrderBy) {
    ...eventFields
  }
  blogs(first: 500) {
    ...blogFields
  }
  siteLibrary(where: {signature: "lnzame"}) {
    ...siteLibraryFields
  }
  navigations {
    ...navigationFields
  }
}
    ${EventFieldsFragmentDoc}
${BlogFieldsFragmentDoc}
${SiteLibraryFieldsFragmentDoc}
${NavigationFieldsFragmentDoc}`;

export type SdkFunctionWrapper = <T>(action: (requestHeaders?:Record<string, string>) => Promise<T>, operationName: string, operationType?: string) => Promise<T>;


const defaultWrapper: SdkFunctionWrapper = (action, _operationName, _operationType) => action();

export function getSdk(client: GraphQLClient, withWrapper: SdkFunctionWrapper = defaultWrapper) {
  return {
    layout(variables: LayoutQueryVariables, requestHeaders?: Dom.RequestInit["headers"]): Promise<LayoutQuery> {
      return withWrapper((wrappedRequestHeaders) => client.request<LayoutQuery>(LayoutDocument, variables, {...requestHeaders, ...wrappedRequestHeaders}), 'layout', 'query');
    },
    pages(variables?: PagesQueryVariables, requestHeaders?: Dom.RequestInit["headers"]): Promise<PagesQuery> {
      return withWrapper((wrappedRequestHeaders) => client.request<PagesQuery>(PagesDocument, variables, {...requestHeaders, ...wrappedRequestHeaders}), 'pages', 'query');
    },
    pagesSlugList(variables?: PagesSlugListQueryVariables, requestHeaders?: Dom.RequestInit["headers"]): Promise<PagesSlugListQuery> {
      return withWrapper((wrappedRequestHeaders) => client.request<PagesSlugListQuery>(PagesSlugListDocument, variables, {...requestHeaders, ...wrappedRequestHeaders}), 'pagesSlugList', 'query');
    },
    blog(variables: BlogQueryVariables, requestHeaders?: Dom.RequestInit["headers"]): Promise<BlogQuery> {
      return withWrapper((wrappedRequestHeaders) => client.request<BlogQuery>(BlogDocument, variables, {...requestHeaders, ...wrappedRequestHeaders}), 'blog', 'query');
    },
    blogs(variables?: BlogsQueryVariables, requestHeaders?: Dom.RequestInit["headers"]): Promise<BlogsQuery> {
      return withWrapper((wrappedRequestHeaders) => client.request<BlogsQuery>(BlogsDocument, variables, {...requestHeaders, ...wrappedRequestHeaders}), 'blogs', 'query');
    },
    contacts(variables?: ContactsQueryVariables, requestHeaders?: Dom.RequestInit["headers"]): Promise<ContactsQuery> {
      return withWrapper((wrappedRequestHeaders) => client.request<ContactsQuery>(ContactsDocument, variables, {...requestHeaders, ...wrappedRequestHeaders}), 'contacts', 'query');
    },
    siteLibrary(variables?: SiteLibraryQueryVariables, requestHeaders?: Dom.RequestInit["headers"]): Promise<SiteLibraryQuery> {
      return withWrapper((wrappedRequestHeaders) => client.request<SiteLibraryQuery>(SiteLibraryDocument, variables, {...requestHeaders, ...wrappedRequestHeaders}), 'siteLibrary', 'query');
    },
    Navigation(variables?: NavigationQueryVariables, requestHeaders?: Dom.RequestInit["headers"]): Promise<NavigationQuery> {
      return withWrapper((wrappedRequestHeaders) => client.request<NavigationQuery>(NavigationDocument, variables, {...requestHeaders, ...wrappedRequestHeaders}), 'Navigation', 'query');
    },
    event(variables: EventQueryVariables, requestHeaders?: Dom.RequestInit["headers"]): Promise<EventQuery> {
      return withWrapper((wrappedRequestHeaders) => client.request<EventQuery>(EventDocument, variables, {...requestHeaders, ...wrappedRequestHeaders}), 'event', 'query');
    },
    album(variables: AlbumQueryVariables, requestHeaders?: Dom.RequestInit["headers"]): Promise<AlbumQuery> {
      return withWrapper((wrappedRequestHeaders) => client.request<AlbumQuery>(AlbumDocument, variables, {...requestHeaders, ...wrappedRequestHeaders}), 'album', 'query');
    },
    testimonials(variables?: TestimonialsQueryVariables, requestHeaders?: Dom.RequestInit["headers"]): Promise<TestimonialsQuery> {
      return withWrapper((wrappedRequestHeaders) => client.request<TestimonialsQuery>(TestimonialsDocument, variables, {...requestHeaders, ...wrappedRequestHeaders}), 'testimonials', 'query');
    },
    profiles(variables?: ProfilesQueryVariables, requestHeaders?: Dom.RequestInit["headers"]): Promise<ProfilesQuery> {
      return withWrapper((wrappedRequestHeaders) => client.request<ProfilesQuery>(ProfilesDocument, variables, {...requestHeaders, ...wrappedRequestHeaders}), 'profiles', 'query');
    },
    profile(variables: ProfileQueryVariables, requestHeaders?: Dom.RequestInit["headers"]): Promise<ProfileQuery> {
      return withWrapper((wrappedRequestHeaders) => client.request<ProfileQuery>(ProfileDocument, variables, {...requestHeaders, ...wrappedRequestHeaders}), 'profile', 'query');
    },
    profilePage(variables: ProfilePageQueryVariables, requestHeaders?: Dom.RequestInit["headers"]): Promise<ProfilePageQuery> {
      return withWrapper((wrappedRequestHeaders) => client.request<ProfilePageQuery>(ProfilePageDocument, variables, {...requestHeaders, ...wrappedRequestHeaders}), 'profilePage', 'query');
    },
    products(variables?: ProductsQueryVariables, requestHeaders?: Dom.RequestInit["headers"]): Promise<ProductsQuery> {
      return withWrapper((wrappedRequestHeaders) => client.request<ProductsQuery>(ProductsDocument, variables, {...requestHeaders, ...wrappedRequestHeaders}), 'products', 'query');
    },
    product(variables: ProductQueryVariables, requestHeaders?: Dom.RequestInit["headers"]): Promise<ProductQuery> {
      return withWrapper((wrappedRequestHeaders) => client.request<ProductQuery>(ProductDocument, variables, {...requestHeaders, ...wrappedRequestHeaders}), 'product', 'query');
    },
    productPage(variables: ProductPageQueryVariables, requestHeaders?: Dom.RequestInit["headers"]): Promise<ProductPageQuery> {
      return withWrapper((wrappedRequestHeaders) => client.request<ProductPageQuery>(ProductPageDocument, variables, {...requestHeaders, ...wrappedRequestHeaders}), 'productPage', 'query');
    },
    blogPage(variables: BlogPageQueryVariables, requestHeaders?: Dom.RequestInit["headers"]): Promise<BlogPageQuery> {
      return withWrapper((wrappedRequestHeaders) => client.request<BlogPageQuery>(BlogPageDocument, variables, {...requestHeaders, ...wrappedRequestHeaders}), 'blogPage', 'query');
    },
    albumPage(variables: AlbumPageQueryVariables, requestHeaders?: Dom.RequestInit["headers"]): Promise<AlbumPageQuery> {
      return withWrapper((wrappedRequestHeaders) => client.request<AlbumPageQuery>(AlbumPageDocument, variables, {...requestHeaders, ...wrappedRequestHeaders}), 'albumPage', 'query');
    },
    eventPage(variables: EventPageQueryVariables, requestHeaders?: Dom.RequestInit["headers"]): Promise<EventPageQuery> {
      return withWrapper((wrappedRequestHeaders) => client.request<EventPageQuery>(EventPageDocument, variables, {...requestHeaders, ...wrappedRequestHeaders}), 'eventPage', 'query');
    }
  };
}
export type Sdk = ReturnType<typeof getSdk>;